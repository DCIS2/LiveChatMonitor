import {
  __commonJS,
  __publicField
} from "./chunk-XNHBATJA.js";

// node_modules/tiktok-live-connector/dist/types/errors.js
var require_errors = __commonJS({
  "node_modules/tiktok-live-connector/dist/types/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AuthenticatedWebSocketConnectionError = exports.PremiumFeatureError = exports.SignatureMissingTokensError = exports.SignatureRateLimitError = exports.SignAPIError = exports.FetchSignedWebSocketIdentityParameterError = exports.ErrorReason = exports.TikTokLiveError = exports.SchemaDecodeError = exports.InvalidSchemaNameError = exports.UserOfflineError = exports.AlreadyConnectedError = exports.AlreadyConnectingError = exports.MissingRoomIdError = exports.InvalidResponseError = exports.FetchIsLiveError = exports.InvalidUniqueIdError = void 0;
    var ConnectError = class extends Error {
      constructor(message) {
        super(message);
      }
    };
    var InvalidUniqueIdError = class extends Error {
    };
    exports.InvalidUniqueIdError = InvalidUniqueIdError;
    var FetchIsLiveError = class extends Error {
      constructor(errors, ...args) {
        super();
        __publicField(this, "errors");
        this.errors = errors;
      }
    };
    exports.FetchIsLiveError = FetchIsLiveError;
    var InvalidResponseError = class extends Error {
      constructor(message, requestErr = void 0) {
        super(message);
        __publicField(this, "requestErr");
        this.requestErr = requestErr;
        this.name = "InvalidResponseError";
      }
    };
    exports.InvalidResponseError = InvalidResponseError;
    var MissingRoomIdError = class extends Error {
    };
    exports.MissingRoomIdError = MissingRoomIdError;
    var AlreadyConnectingError = class extends ConnectError {
    };
    exports.AlreadyConnectingError = AlreadyConnectingError;
    var AlreadyConnectedError = class extends ConnectError {
    };
    exports.AlreadyConnectedError = AlreadyConnectedError;
    var UserOfflineError = class extends ConnectError {
    };
    exports.UserOfflineError = UserOfflineError;
    var InvalidSchemaNameError = class extends Error {
    };
    exports.InvalidSchemaNameError = InvalidSchemaNameError;
    var SchemaDecodeError = class extends Error {
    };
    exports.SchemaDecodeError = SchemaDecodeError;
    var TikTokLiveError = class extends Error {
      constructor(message) {
        super(message);
        this.name = this.constructor.name;
      }
    };
    exports.TikTokLiveError = TikTokLiveError;
    var ErrorReason;
    (function(ErrorReason2) {
      ErrorReason2["RATE_LIMIT"] = "Rate Limited";
      ErrorReason2["CONNECT_ERROR"] = "Connect Error";
      ErrorReason2["EMPTY_PAYLOAD"] = "Empty Payload";
      ErrorReason2["SIGN_NOT_200"] = "Sign Error";
      ErrorReason2["EMPTY_COOKIES"] = "Empty Cookies";
      ErrorReason2["PREMIUM_FEATURE"] = "Premium Feature";
      ErrorReason2["AUTHENTICATED_WS"] = "Authenticated WS";
    })(ErrorReason = exports.ErrorReason || (exports.ErrorReason = {}));
    var FetchSignedWebSocketIdentityParameterError = class extends Error {
    };
    exports.FetchSignedWebSocketIdentityParameterError = FetchSignedWebSocketIdentityParameterError;
    var SignAPIError = class extends TikTokLiveError {
      constructor(reason, logId, agentId, ...args) {
        super([`[${reason}]`, ...args].join(" "));
        __publicField(this, "reason");
        __publicField(this, "logId");
        __publicField(this, "agentId");
        this.reason = reason;
        this.logId = logId;
        this.agentId = agentId;
      }
      static formatSignServerMessage(message) {
        message = message.trim();
        const msgLen = message.length;
        const headerText = "SIGN SERVER MESSAGE";
        const headerLen = Math.floor((msgLen - headerText.length) / 2);
        const paddingLen = (msgLen - headerText.length) % 2;
        const footer = "+" + "-".repeat(msgLen + 2) + "+";
        const header = "+" + "-".repeat(headerLen) + " " + headerText + " " + "-".repeat(headerLen + paddingLen) + "+";
        const prefix = "|" + " ".repeat(header.length - 2) + "|";
        const body = "| " + message + " |";
        return `
	${prefix}
	${header}
	${body}
	${footer}
`;
      }
    };
    exports.SignAPIError = SignAPIError;
    var SignatureRateLimitError = class _SignatureRateLimitError extends SignAPIError {
      constructor(apiMessage, formatStr, response) {
        const retryAfter = _SignatureRateLimitError.calculateRetryAfter(response);
        const resetTime = _SignatureRateLimitError.calculateResetTime(response);
        const logId = _SignatureRateLimitError.parseHeaderNumber(response.headers["X-Log-ID"]);
        const agentId = response.headers["X-Agent-ID"];
        const formattedMsg = formatStr.replace("%s", retryAfter.toString());
        const args = [formattedMsg];
        if (apiMessage) {
          const serverMsg = SignAPIError.formatSignServerMessage(apiMessage);
          args.push(serverMsg);
        }
        super(ErrorReason.RATE_LIMIT, logId, agentId, ...args);
        __publicField(this, "retryAfter");
        __publicField(this, "resetTime");
        this.retryAfter = retryAfter;
        this.resetTime = resetTime;
      }
      static parseHeaderNumber(value) {
        return value ? parseInt(value) : void 0;
      }
      static calculateRetryAfter(response) {
        const retryAfter = parseInt(response.headers["retry-after"] || "0");
        return retryAfter * 1e3;
      }
      static calculateResetTime(response) {
        const value = response.headers["x-ratelimit-reset"];
        return value ? parseInt(value) * 1e3 : void 0;
      }
    };
    exports.SignatureRateLimitError = SignatureRateLimitError;
    var SignatureMissingTokensError = class extends SignAPIError {
      constructor(...args) {
        super(ErrorReason.EMPTY_PAYLOAD, void 0, void 0, ...args);
      }
    };
    exports.SignatureMissingTokensError = SignatureMissingTokensError;
    var PremiumFeatureError = class extends SignAPIError {
      constructor(apiMessage, ...args) {
        args.push(SignAPIError.formatSignServerMessage(apiMessage));
        super(ErrorReason.PREMIUM_FEATURE, void 0, void 0, ...args);
      }
    };
    exports.PremiumFeatureError = PremiumFeatureError;
    var AuthenticatedWebSocketConnectionError = class extends SignAPIError {
      constructor(...args) {
        super(ErrorReason.AUTHENTICATED_WS, void 0, void 0, ...args);
      }
    };
    exports.AuthenticatedWebSocketConnectionError = AuthenticatedWebSocketConnectionError;
  }
});

// browser-external:node:events
var require_node_events = __commonJS({
  "browser-external:node:events"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node:events" has been externalized for browser compatibility. Cannot access "node:events.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/@bufbuild/protobuf/dist/cjs/wire/varint.js
var require_varint = __commonJS({
  "node_modules/@bufbuild/protobuf/dist/cjs/wire/varint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.varint64read = varint64read;
    exports.varint64write = varint64write;
    exports.int64FromString = int64FromString;
    exports.int64ToString = int64ToString;
    exports.uInt64ToString = uInt64ToString;
    exports.varint32write = varint32write;
    exports.varint32read = varint32read;
    function varint64read() {
      let lowBits = 0;
      let highBits = 0;
      for (let shift = 0; shift < 28; shift += 7) {
        let b = this.buf[this.pos++];
        lowBits |= (b & 127) << shift;
        if ((b & 128) == 0) {
          this.assertBounds();
          return [lowBits, highBits];
        }
      }
      let middleByte = this.buf[this.pos++];
      lowBits |= (middleByte & 15) << 28;
      highBits = (middleByte & 112) >> 4;
      if ((middleByte & 128) == 0) {
        this.assertBounds();
        return [lowBits, highBits];
      }
      for (let shift = 3; shift <= 31; shift += 7) {
        let b = this.buf[this.pos++];
        highBits |= (b & 127) << shift;
        if ((b & 128) == 0) {
          this.assertBounds();
          return [lowBits, highBits];
        }
      }
      throw new Error("invalid varint");
    }
    function varint64write(lo, hi, bytes) {
      for (let i = 0; i < 28; i = i + 7) {
        const shift = lo >>> i;
        const hasNext = !(shift >>> 7 == 0 && hi == 0);
        const byte = (hasNext ? shift | 128 : shift) & 255;
        bytes.push(byte);
        if (!hasNext) {
          return;
        }
      }
      const splitBits = lo >>> 28 & 15 | (hi & 7) << 4;
      const hasMoreBits = !(hi >> 3 == 0);
      bytes.push((hasMoreBits ? splitBits | 128 : splitBits) & 255);
      if (!hasMoreBits) {
        return;
      }
      for (let i = 3; i < 31; i = i + 7) {
        const shift = hi >>> i;
        const hasNext = !(shift >>> 7 == 0);
        const byte = (hasNext ? shift | 128 : shift) & 255;
        bytes.push(byte);
        if (!hasNext) {
          return;
        }
      }
      bytes.push(hi >>> 31 & 1);
    }
    var TWO_PWR_32_DBL = 4294967296;
    function int64FromString(dec) {
      const minus = dec[0] === "-";
      if (minus) {
        dec = dec.slice(1);
      }
      const base = 1e6;
      let lowBits = 0;
      let highBits = 0;
      function add1e6digit(begin, end) {
        const digit1e6 = Number(dec.slice(begin, end));
        highBits *= base;
        lowBits = lowBits * base + digit1e6;
        if (lowBits >= TWO_PWR_32_DBL) {
          highBits = highBits + (lowBits / TWO_PWR_32_DBL | 0);
          lowBits = lowBits % TWO_PWR_32_DBL;
        }
      }
      add1e6digit(-24, -18);
      add1e6digit(-18, -12);
      add1e6digit(-12, -6);
      add1e6digit(-6);
      return minus ? negate(lowBits, highBits) : newBits(lowBits, highBits);
    }
    function int64ToString(lo, hi) {
      let bits = newBits(lo, hi);
      const negative = bits.hi & 2147483648;
      if (negative) {
        bits = negate(bits.lo, bits.hi);
      }
      const result = uInt64ToString(bits.lo, bits.hi);
      return negative ? "-" + result : result;
    }
    function uInt64ToString(lo, hi) {
      ({ lo, hi } = toUnsigned(lo, hi));
      if (hi <= 2097151) {
        return String(TWO_PWR_32_DBL * hi + lo);
      }
      const low = lo & 16777215;
      const mid = (lo >>> 24 | hi << 8) & 16777215;
      const high = hi >> 16 & 65535;
      let digitA = low + mid * 6777216 + high * 6710656;
      let digitB = mid + high * 8147497;
      let digitC = high * 2;
      const base = 1e7;
      if (digitA >= base) {
        digitB += Math.floor(digitA / base);
        digitA %= base;
      }
      if (digitB >= base) {
        digitC += Math.floor(digitB / base);
        digitB %= base;
      }
      return digitC.toString() + decimalFrom1e7WithLeadingZeros(digitB) + decimalFrom1e7WithLeadingZeros(digitA);
    }
    function toUnsigned(lo, hi) {
      return { lo: lo >>> 0, hi: hi >>> 0 };
    }
    function newBits(lo, hi) {
      return { lo: lo | 0, hi: hi | 0 };
    }
    function negate(lowBits, highBits) {
      highBits = ~highBits;
      if (lowBits) {
        lowBits = ~lowBits + 1;
      } else {
        highBits += 1;
      }
      return newBits(lowBits, highBits);
    }
    var decimalFrom1e7WithLeadingZeros = (digit1e7) => {
      const partial = String(digit1e7);
      return "0000000".slice(partial.length) + partial;
    };
    function varint32write(value, bytes) {
      if (value >= 0) {
        while (value > 127) {
          bytes.push(value & 127 | 128);
          value = value >>> 7;
        }
        bytes.push(value);
      } else {
        for (let i = 0; i < 9; i++) {
          bytes.push(value & 127 | 128);
          value = value >> 7;
        }
        bytes.push(1);
      }
    }
    function varint32read() {
      let b = this.buf[this.pos++];
      let result = b & 127;
      if ((b & 128) == 0) {
        this.assertBounds();
        return result;
      }
      b = this.buf[this.pos++];
      result |= (b & 127) << 7;
      if ((b & 128) == 0) {
        this.assertBounds();
        return result;
      }
      b = this.buf[this.pos++];
      result |= (b & 127) << 14;
      if ((b & 128) == 0) {
        this.assertBounds();
        return result;
      }
      b = this.buf[this.pos++];
      result |= (b & 127) << 21;
      if ((b & 128) == 0) {
        this.assertBounds();
        return result;
      }
      b = this.buf[this.pos++];
      result |= (b & 15) << 28;
      for (let readBytes = 5; (b & 128) !== 0 && readBytes < 10; readBytes++)
        b = this.buf[this.pos++];
      if ((b & 128) != 0)
        throw new Error("invalid varint");
      this.assertBounds();
      return result >>> 0;
    }
  }
});

// node_modules/@bufbuild/protobuf/dist/cjs/proto-int64.js
var require_proto_int64 = __commonJS({
  "node_modules/@bufbuild/protobuf/dist/cjs/proto-int64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.protoInt64 = void 0;
    var varint_js_1 = require_varint();
    exports.protoInt64 = makeInt64Support();
    function makeInt64Support() {
      const dv = new DataView(new ArrayBuffer(8));
      const ok = typeof BigInt === "function" && typeof dv.getBigInt64 === "function" && typeof dv.getBigUint64 === "function" && typeof dv.setBigInt64 === "function" && typeof dv.setBigUint64 === "function" && (typeof process != "object" || typeof process.env != "object" || process.env.BUF_BIGINT_DISABLE !== "1");
      if (ok) {
        const MIN = BigInt("-9223372036854775808");
        const MAX = BigInt("9223372036854775807");
        const UMIN = BigInt("0");
        const UMAX = BigInt("18446744073709551615");
        return {
          zero: BigInt(0),
          supported: true,
          parse(value) {
            const bi = typeof value == "bigint" ? value : BigInt(value);
            if (bi > MAX || bi < MIN) {
              throw new Error(`invalid int64: ${value}`);
            }
            return bi;
          },
          uParse(value) {
            const bi = typeof value == "bigint" ? value : BigInt(value);
            if (bi > UMAX || bi < UMIN) {
              throw new Error(`invalid uint64: ${value}`);
            }
            return bi;
          },
          enc(value) {
            dv.setBigInt64(0, this.parse(value), true);
            return {
              lo: dv.getInt32(0, true),
              hi: dv.getInt32(4, true)
            };
          },
          uEnc(value) {
            dv.setBigInt64(0, this.uParse(value), true);
            return {
              lo: dv.getInt32(0, true),
              hi: dv.getInt32(4, true)
            };
          },
          dec(lo, hi) {
            dv.setInt32(0, lo, true);
            dv.setInt32(4, hi, true);
            return dv.getBigInt64(0, true);
          },
          uDec(lo, hi) {
            dv.setInt32(0, lo, true);
            dv.setInt32(4, hi, true);
            return dv.getBigUint64(0, true);
          }
        };
      }
      return {
        zero: "0",
        supported: false,
        parse(value) {
          if (typeof value != "string") {
            value = value.toString();
          }
          assertInt64String(value);
          return value;
        },
        uParse(value) {
          if (typeof value != "string") {
            value = value.toString();
          }
          assertUInt64String(value);
          return value;
        },
        enc(value) {
          if (typeof value != "string") {
            value = value.toString();
          }
          assertInt64String(value);
          return (0, varint_js_1.int64FromString)(value);
        },
        uEnc(value) {
          if (typeof value != "string") {
            value = value.toString();
          }
          assertUInt64String(value);
          return (0, varint_js_1.int64FromString)(value);
        },
        dec(lo, hi) {
          return (0, varint_js_1.int64ToString)(lo, hi);
        },
        uDec(lo, hi) {
          return (0, varint_js_1.uInt64ToString)(lo, hi);
        }
      };
    }
    function assertInt64String(value) {
      if (!/^-?[0-9]+$/.test(value)) {
        throw new Error("invalid int64: " + value);
      }
    }
    function assertUInt64String(value) {
      if (!/^[0-9]+$/.test(value)) {
        throw new Error("invalid uint64: " + value);
      }
    }
  }
});

// node_modules/@bufbuild/protobuf/dist/cjs/wire/text-encoding.js
var require_text_encoding = __commonJS({
  "node_modules/@bufbuild/protobuf/dist/cjs/wire/text-encoding.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.configureTextEncoding = configureTextEncoding;
    exports.getTextEncoding = getTextEncoding;
    var symbol = Symbol.for("@bufbuild/protobuf/text-encoding");
    function configureTextEncoding(textEncoding) {
      globalThis[symbol] = textEncoding;
    }
    function getTextEncoding() {
      if (globalThis[symbol] == void 0) {
        const te = new globalThis.TextEncoder();
        const td = new globalThis.TextDecoder();
        globalThis[symbol] = {
          encodeUtf8(text) {
            return te.encode(text);
          },
          decodeUtf8(bytes) {
            return td.decode(bytes);
          },
          checkUtf8(text) {
            try {
              encodeURIComponent(text);
              return true;
            } catch (_) {
              return false;
            }
          }
        };
      }
      return globalThis[symbol];
    }
  }
});

// node_modules/@bufbuild/protobuf/dist/cjs/wire/binary-encoding.js
var require_binary_encoding = __commonJS({
  "node_modules/@bufbuild/protobuf/dist/cjs/wire/binary-encoding.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BinaryReader = exports.BinaryWriter = exports.INT32_MIN = exports.INT32_MAX = exports.UINT32_MAX = exports.FLOAT32_MIN = exports.FLOAT32_MAX = exports.WireType = void 0;
    var varint_js_1 = require_varint();
    var proto_int64_js_1 = require_proto_int64();
    var text_encoding_js_1 = require_text_encoding();
    var WireType;
    (function(WireType2) {
      WireType2[WireType2["Varint"] = 0] = "Varint";
      WireType2[WireType2["Bit64"] = 1] = "Bit64";
      WireType2[WireType2["LengthDelimited"] = 2] = "LengthDelimited";
      WireType2[WireType2["StartGroup"] = 3] = "StartGroup";
      WireType2[WireType2["EndGroup"] = 4] = "EndGroup";
      WireType2[WireType2["Bit32"] = 5] = "Bit32";
    })(WireType || (exports.WireType = WireType = {}));
    exports.FLOAT32_MAX = 34028234663852886e22;
    exports.FLOAT32_MIN = -34028234663852886e22;
    exports.UINT32_MAX = 4294967295;
    exports.INT32_MAX = 2147483647;
    exports.INT32_MIN = -2147483648;
    var BinaryWriter = class {
      constructor(encodeUtf8 = (0, text_encoding_js_1.getTextEncoding)().encodeUtf8) {
        this.encodeUtf8 = encodeUtf8;
        this.stack = [];
        this.chunks = [];
        this.buf = [];
      }
      /**
       * Return all bytes written and reset this writer.
       */
      finish() {
        if (this.buf.length) {
          this.chunks.push(new Uint8Array(this.buf));
          this.buf = [];
        }
        let len = 0;
        for (let i = 0; i < this.chunks.length; i++)
          len += this.chunks[i].length;
        let bytes = new Uint8Array(len);
        let offset = 0;
        for (let i = 0; i < this.chunks.length; i++) {
          bytes.set(this.chunks[i], offset);
          offset += this.chunks[i].length;
        }
        this.chunks = [];
        return bytes;
      }
      /**
       * Start a new fork for length-delimited data like a message
       * or a packed repeated field.
       *
       * Must be joined later with `join()`.
       */
      fork() {
        this.stack.push({ chunks: this.chunks, buf: this.buf });
        this.chunks = [];
        this.buf = [];
        return this;
      }
      /**
       * Join the last fork. Write its length and bytes, then
       * return to the previous state.
       */
      join() {
        let chunk = this.finish();
        let prev = this.stack.pop();
        if (!prev)
          throw new Error("invalid state, fork stack empty");
        this.chunks = prev.chunks;
        this.buf = prev.buf;
        this.uint32(chunk.byteLength);
        return this.raw(chunk);
      }
      /**
       * Writes a tag (field number and wire type).
       *
       * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.
       *
       * Generated code should compute the tag ahead of time and call `uint32()`.
       */
      tag(fieldNo, type) {
        return this.uint32((fieldNo << 3 | type) >>> 0);
      }
      /**
       * Write a chunk of raw bytes.
       */
      raw(chunk) {
        if (this.buf.length) {
          this.chunks.push(new Uint8Array(this.buf));
          this.buf = [];
        }
        this.chunks.push(chunk);
        return this;
      }
      /**
       * Write a `uint32` value, an unsigned 32 bit varint.
       */
      uint32(value) {
        assertUInt32(value);
        while (value > 127) {
          this.buf.push(value & 127 | 128);
          value = value >>> 7;
        }
        this.buf.push(value);
        return this;
      }
      /**
       * Write a `int32` value, a signed 32 bit varint.
       */
      int32(value) {
        assertInt32(value);
        (0, varint_js_1.varint32write)(value, this.buf);
        return this;
      }
      /**
       * Write a `bool` value, a variant.
       */
      bool(value) {
        this.buf.push(value ? 1 : 0);
        return this;
      }
      /**
       * Write a `bytes` value, length-delimited arbitrary data.
       */
      bytes(value) {
        this.uint32(value.byteLength);
        return this.raw(value);
      }
      /**
       * Write a `string` value, length-delimited data converted to UTF-8 text.
       */
      string(value) {
        let chunk = this.encodeUtf8(value);
        this.uint32(chunk.byteLength);
        return this.raw(chunk);
      }
      /**
       * Write a `float` value, 32-bit floating point number.
       */
      float(value) {
        assertFloat32(value);
        let chunk = new Uint8Array(4);
        new DataView(chunk.buffer).setFloat32(0, value, true);
        return this.raw(chunk);
      }
      /**
       * Write a `double` value, a 64-bit floating point number.
       */
      double(value) {
        let chunk = new Uint8Array(8);
        new DataView(chunk.buffer).setFloat64(0, value, true);
        return this.raw(chunk);
      }
      /**
       * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.
       */
      fixed32(value) {
        assertUInt32(value);
        let chunk = new Uint8Array(4);
        new DataView(chunk.buffer).setUint32(0, value, true);
        return this.raw(chunk);
      }
      /**
       * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.
       */
      sfixed32(value) {
        assertInt32(value);
        let chunk = new Uint8Array(4);
        new DataView(chunk.buffer).setInt32(0, value, true);
        return this.raw(chunk);
      }
      /**
       * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.
       */
      sint32(value) {
        assertInt32(value);
        value = (value << 1 ^ value >> 31) >>> 0;
        (0, varint_js_1.varint32write)(value, this.buf);
        return this;
      }
      /**
       * Write a `fixed64` value, a signed, fixed-length 64-bit integer.
       */
      sfixed64(value) {
        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = proto_int64_js_1.protoInt64.enc(value);
        view.setInt32(0, tc.lo, true);
        view.setInt32(4, tc.hi, true);
        return this.raw(chunk);
      }
      /**
       * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.
       */
      fixed64(value) {
        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = proto_int64_js_1.protoInt64.uEnc(value);
        view.setInt32(0, tc.lo, true);
        view.setInt32(4, tc.hi, true);
        return this.raw(chunk);
      }
      /**
       * Write a `int64` value, a signed 64-bit varint.
       */
      int64(value) {
        let tc = proto_int64_js_1.protoInt64.enc(value);
        (0, varint_js_1.varint64write)(tc.lo, tc.hi, this.buf);
        return this;
      }
      /**
       * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.
       */
      sint64(value) {
        const tc = proto_int64_js_1.protoInt64.enc(value), sign = tc.hi >> 31, lo = tc.lo << 1 ^ sign, hi = (tc.hi << 1 | tc.lo >>> 31) ^ sign;
        (0, varint_js_1.varint64write)(lo, hi, this.buf);
        return this;
      }
      /**
       * Write a `uint64` value, an unsigned 64-bit varint.
       */
      uint64(value) {
        const tc = proto_int64_js_1.protoInt64.uEnc(value);
        (0, varint_js_1.varint64write)(tc.lo, tc.hi, this.buf);
        return this;
      }
    };
    exports.BinaryWriter = BinaryWriter;
    var BinaryReader = class {
      constructor(buf, decodeUtf8 = (0, text_encoding_js_1.getTextEncoding)().decodeUtf8) {
        this.decodeUtf8 = decodeUtf8;
        this.varint64 = varint_js_1.varint64read;
        this.uint32 = varint_js_1.varint32read;
        this.buf = buf;
        this.len = buf.length;
        this.pos = 0;
        this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
      }
      /**
       * Reads a tag - field number and wire type.
       */
      tag() {
        let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;
        if (fieldNo <= 0 || wireType < 0 || wireType > 5)
          throw new Error("illegal tag: field no " + fieldNo + " wire type " + wireType);
        return [fieldNo, wireType];
      }
      /**
       * Skip one element and return the skipped data.
       *
       * When skipping StartGroup, provide the tags field number to check for
       * matching field number in the EndGroup tag.
       */
      skip(wireType, fieldNo) {
        let start = this.pos;
        switch (wireType) {
          case WireType.Varint:
            while (this.buf[this.pos++] & 128) {
            }
            break;
          case WireType.Bit64:
            this.pos += 4;
          case WireType.Bit32:
            this.pos += 4;
            break;
          case WireType.LengthDelimited:
            let len = this.uint32();
            this.pos += len;
            break;
          case WireType.StartGroup:
            for (; ; ) {
              const [fn, wt] = this.tag();
              if (wt === WireType.EndGroup) {
                if (fieldNo !== void 0 && fn !== fieldNo) {
                  throw new Error("invalid end group tag");
                }
                break;
              }
              this.skip(wt, fn);
            }
            break;
          default:
            throw new Error("cant skip wire type " + wireType);
        }
        this.assertBounds();
        return this.buf.subarray(start, this.pos);
      }
      /**
       * Throws error if position in byte array is out of range.
       */
      assertBounds() {
        if (this.pos > this.len)
          throw new RangeError("premature EOF");
      }
      /**
       * Read a `int32` field, a signed 32 bit varint.
       */
      int32() {
        return this.uint32() | 0;
      }
      /**
       * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.
       */
      sint32() {
        let zze = this.uint32();
        return zze >>> 1 ^ -(zze & 1);
      }
      /**
       * Read a `int64` field, a signed 64-bit varint.
       */
      int64() {
        return proto_int64_js_1.protoInt64.dec(...this.varint64());
      }
      /**
       * Read a `uint64` field, an unsigned 64-bit varint.
       */
      uint64() {
        return proto_int64_js_1.protoInt64.uDec(...this.varint64());
      }
      /**
       * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.
       */
      sint64() {
        let [lo, hi] = this.varint64();
        let s = -(lo & 1);
        lo = (lo >>> 1 | (hi & 1) << 31) ^ s;
        hi = hi >>> 1 ^ s;
        return proto_int64_js_1.protoInt64.dec(lo, hi);
      }
      /**
       * Read a `bool` field, a variant.
       */
      bool() {
        let [lo, hi] = this.varint64();
        return lo !== 0 || hi !== 0;
      }
      /**
       * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.
       */
      fixed32() {
        return this.view.getUint32((this.pos += 4) - 4, true);
      }
      /**
       * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.
       */
      sfixed32() {
        return this.view.getInt32((this.pos += 4) - 4, true);
      }
      /**
       * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.
       */
      fixed64() {
        return proto_int64_js_1.protoInt64.uDec(this.sfixed32(), this.sfixed32());
      }
      /**
       * Read a `fixed64` field, a signed, fixed-length 64-bit integer.
       */
      sfixed64() {
        return proto_int64_js_1.protoInt64.dec(this.sfixed32(), this.sfixed32());
      }
      /**
       * Read a `float` field, 32-bit floating point number.
       */
      float() {
        return this.view.getFloat32((this.pos += 4) - 4, true);
      }
      /**
       * Read a `double` field, a 64-bit floating point number.
       */
      double() {
        return this.view.getFloat64((this.pos += 8) - 8, true);
      }
      /**
       * Read a `bytes` field, length-delimited arbitrary data.
       */
      bytes() {
        let len = this.uint32(), start = this.pos;
        this.pos += len;
        this.assertBounds();
        return this.buf.subarray(start, start + len);
      }
      /**
       * Read a `string` field, length-delimited data converted to UTF-8 text.
       */
      string() {
        return this.decodeUtf8(this.bytes());
      }
    };
    exports.BinaryReader = BinaryReader;
    function assertInt32(arg) {
      if (typeof arg == "string") {
        arg = Number(arg);
      } else if (typeof arg != "number") {
        throw new Error("invalid int32: " + typeof arg);
      }
      if (!Number.isInteger(arg) || arg > exports.INT32_MAX || arg < exports.INT32_MIN)
        throw new Error("invalid int32: " + arg);
    }
    function assertUInt32(arg) {
      if (typeof arg == "string") {
        arg = Number(arg);
      } else if (typeof arg != "number") {
        throw new Error("invalid uint32: " + typeof arg);
      }
      if (!Number.isInteger(arg) || arg > exports.UINT32_MAX || arg < 0)
        throw new Error("invalid uint32: " + arg);
    }
    function assertFloat32(arg) {
      if (typeof arg == "string") {
        const o = arg;
        arg = Number(arg);
        if (Number.isNaN(arg) && o !== "NaN") {
          throw new Error("invalid float32: " + o);
        }
      } else if (typeof arg != "number") {
        throw new Error("invalid float32: " + typeof arg);
      }
      if (Number.isFinite(arg) && (arg > exports.FLOAT32_MAX || arg < exports.FLOAT32_MIN))
        throw new Error("invalid float32: " + arg);
    }
  }
});

// node_modules/@bufbuild/protobuf/dist/cjs/wire/base64-encoding.js
var require_base64_encoding = __commonJS({
  "node_modules/@bufbuild/protobuf/dist/cjs/wire/base64-encoding.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.base64Decode = base64Decode;
    exports.base64Encode = base64Encode;
    function base64Decode(base64Str) {
      const table = getDecodeTable();
      let es = base64Str.length * 3 / 4;
      if (base64Str[base64Str.length - 2] == "=")
        es -= 2;
      else if (base64Str[base64Str.length - 1] == "=")
        es -= 1;
      let bytes = new Uint8Array(es), bytePos = 0, groupPos = 0, b, p = 0;
      for (let i = 0; i < base64Str.length; i++) {
        b = table[base64Str.charCodeAt(i)];
        if (b === void 0) {
          switch (base64Str[i]) {
            case "=":
              groupPos = 0;
            case "\n":
            case "\r":
            case "	":
            case " ":
              continue;
            default:
              throw Error("invalid base64 string");
          }
        }
        switch (groupPos) {
          case 0:
            p = b;
            groupPos = 1;
            break;
          case 1:
            bytes[bytePos++] = p << 2 | (b & 48) >> 4;
            p = b;
            groupPos = 2;
            break;
          case 2:
            bytes[bytePos++] = (p & 15) << 4 | (b & 60) >> 2;
            p = b;
            groupPos = 3;
            break;
          case 3:
            bytes[bytePos++] = (p & 3) << 6 | b;
            groupPos = 0;
            break;
        }
      }
      if (groupPos == 1)
        throw Error("invalid base64 string");
      return bytes.subarray(0, bytePos);
    }
    function base64Encode(bytes, encoding = "std") {
      const table = getEncodeTable(encoding);
      const pad = encoding == "std";
      let base64 = "", groupPos = 0, b, p = 0;
      for (let i = 0; i < bytes.length; i++) {
        b = bytes[i];
        switch (groupPos) {
          case 0:
            base64 += table[b >> 2];
            p = (b & 3) << 4;
            groupPos = 1;
            break;
          case 1:
            base64 += table[p | b >> 4];
            p = (b & 15) << 2;
            groupPos = 2;
            break;
          case 2:
            base64 += table[p | b >> 6];
            base64 += table[b & 63];
            groupPos = 0;
            break;
        }
      }
      if (groupPos) {
        base64 += table[p];
        if (pad) {
          base64 += "=";
          if (groupPos == 1)
            base64 += "=";
        }
      }
      return base64;
    }
    var encodeTableStd;
    var encodeTableUrl;
    var decodeTable;
    function getEncodeTable(encoding) {
      if (!encodeTableStd) {
        encodeTableStd = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
        encodeTableUrl = encodeTableStd.slice(0, -2).concat("-", "_");
      }
      return encoding == "url" ? (
        // biome-ignore lint/style/noNonNullAssertion: TS fails to narrow down
        encodeTableUrl
      ) : encodeTableStd;
    }
    function getDecodeTable() {
      if (!decodeTable) {
        decodeTable = [];
        const encodeTable = getEncodeTable("std");
        for (let i = 0; i < encodeTable.length; i++)
          decodeTable[encodeTable[i].charCodeAt(0)] = i;
        decodeTable["-".charCodeAt(0)] = encodeTable.indexOf("+");
        decodeTable["_".charCodeAt(0)] = encodeTable.indexOf("/");
      }
      return decodeTable;
    }
  }
});

// node_modules/@bufbuild/protobuf/dist/cjs/descriptors.js
var require_descriptors = __commonJS({
  "node_modules/@bufbuild/protobuf/dist/cjs/descriptors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ScalarType = void 0;
    var ScalarType;
    (function(ScalarType2) {
      ScalarType2[ScalarType2["DOUBLE"] = 1] = "DOUBLE";
      ScalarType2[ScalarType2["FLOAT"] = 2] = "FLOAT";
      ScalarType2[ScalarType2["INT64"] = 3] = "INT64";
      ScalarType2[ScalarType2["UINT64"] = 4] = "UINT64";
      ScalarType2[ScalarType2["INT32"] = 5] = "INT32";
      ScalarType2[ScalarType2["FIXED64"] = 6] = "FIXED64";
      ScalarType2[ScalarType2["FIXED32"] = 7] = "FIXED32";
      ScalarType2[ScalarType2["BOOL"] = 8] = "BOOL";
      ScalarType2[ScalarType2["STRING"] = 9] = "STRING";
      ScalarType2[ScalarType2["BYTES"] = 12] = "BYTES";
      ScalarType2[ScalarType2["UINT32"] = 13] = "UINT32";
      ScalarType2[ScalarType2["SFIXED32"] = 15] = "SFIXED32";
      ScalarType2[ScalarType2["SFIXED64"] = 16] = "SFIXED64";
      ScalarType2[ScalarType2["SINT32"] = 17] = "SINT32";
      ScalarType2[ScalarType2["SINT64"] = 18] = "SINT64";
    })(ScalarType || (exports.ScalarType = ScalarType = {}));
  }
});

// node_modules/@bufbuild/protobuf/dist/cjs/wire/text-format.js
var require_text_format = __commonJS({
  "node_modules/@bufbuild/protobuf/dist/cjs/wire/text-format.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseTextFormatEnumValue = parseTextFormatEnumValue;
    exports.parseTextFormatScalarValue = parseTextFormatScalarValue;
    var descriptors_js_1 = require_descriptors();
    var proto_int64_js_1 = require_proto_int64();
    function parseTextFormatEnumValue(descEnum, value) {
      const enumValue = descEnum.values.find((v) => v.name === value);
      if (!enumValue) {
        throw new Error(`cannot parse ${descEnum} default value: ${value}`);
      }
      return enumValue.number;
    }
    function parseTextFormatScalarValue(type, value) {
      switch (type) {
        case descriptors_js_1.ScalarType.STRING:
          return value;
        case descriptors_js_1.ScalarType.BYTES: {
          const u = unescapeBytesDefaultValue(value);
          if (u === false) {
            throw new Error(`cannot parse ${descriptors_js_1.ScalarType[type]} default value: ${value}`);
          }
          return u;
        }
        case descriptors_js_1.ScalarType.INT64:
        case descriptors_js_1.ScalarType.SFIXED64:
        case descriptors_js_1.ScalarType.SINT64:
          return proto_int64_js_1.protoInt64.parse(value);
        case descriptors_js_1.ScalarType.UINT64:
        case descriptors_js_1.ScalarType.FIXED64:
          return proto_int64_js_1.protoInt64.uParse(value);
        case descriptors_js_1.ScalarType.DOUBLE:
        case descriptors_js_1.ScalarType.FLOAT:
          switch (value) {
            case "inf":
              return Number.POSITIVE_INFINITY;
            case "-inf":
              return Number.NEGATIVE_INFINITY;
            case "nan":
              return Number.NaN;
            default:
              return parseFloat(value);
          }
        case descriptors_js_1.ScalarType.BOOL:
          return value === "true";
        case descriptors_js_1.ScalarType.INT32:
        case descriptors_js_1.ScalarType.UINT32:
        case descriptors_js_1.ScalarType.SINT32:
        case descriptors_js_1.ScalarType.FIXED32:
        case descriptors_js_1.ScalarType.SFIXED32:
          return parseInt(value, 10);
      }
    }
    function unescapeBytesDefaultValue(str) {
      const b = [];
      const input = {
        tail: str,
        c: "",
        next() {
          if (this.tail.length == 0) {
            return false;
          }
          this.c = this.tail[0];
          this.tail = this.tail.substring(1);
          return true;
        },
        take(n) {
          if (this.tail.length >= n) {
            const r = this.tail.substring(0, n);
            this.tail = this.tail.substring(n);
            return r;
          }
          return false;
        }
      };
      while (input.next()) {
        switch (input.c) {
          case "\\":
            if (input.next()) {
              switch (input.c) {
                case "\\":
                  b.push(input.c.charCodeAt(0));
                  break;
                case "b":
                  b.push(8);
                  break;
                case "f":
                  b.push(12);
                  break;
                case "n":
                  b.push(10);
                  break;
                case "r":
                  b.push(13);
                  break;
                case "t":
                  b.push(9);
                  break;
                case "v":
                  b.push(11);
                  break;
                case "0":
                case "1":
                case "2":
                case "3":
                case "4":
                case "5":
                case "6":
                case "7": {
                  const s = input.c;
                  const t = input.take(2);
                  if (t === false) {
                    return false;
                  }
                  const n = parseInt(s + t, 8);
                  if (Number.isNaN(n)) {
                    return false;
                  }
                  b.push(n);
                  break;
                }
                case "x": {
                  const s = input.c;
                  const t = input.take(2);
                  if (t === false) {
                    return false;
                  }
                  const n = parseInt(s + t, 16);
                  if (Number.isNaN(n)) {
                    return false;
                  }
                  b.push(n);
                  break;
                }
                case "u": {
                  const s = input.c;
                  const t = input.take(4);
                  if (t === false) {
                    return false;
                  }
                  const n = parseInt(s + t, 16);
                  if (Number.isNaN(n)) {
                    return false;
                  }
                  const chunk = new Uint8Array(4);
                  const view = new DataView(chunk.buffer);
                  view.setInt32(0, n, true);
                  b.push(chunk[0], chunk[1], chunk[2], chunk[3]);
                  break;
                }
                case "U": {
                  const s = input.c;
                  const t = input.take(8);
                  if (t === false) {
                    return false;
                  }
                  const tc = proto_int64_js_1.protoInt64.uEnc(s + t);
                  const chunk = new Uint8Array(8);
                  const view = new DataView(chunk.buffer);
                  view.setInt32(0, tc.lo, true);
                  view.setInt32(4, tc.hi, true);
                  b.push(chunk[0], chunk[1], chunk[2], chunk[3], chunk[4], chunk[5], chunk[6], chunk[7]);
                  break;
                }
              }
            }
            break;
          default:
            b.push(input.c.charCodeAt(0));
        }
      }
      return new Uint8Array(b);
    }
  }
});

// node_modules/@bufbuild/protobuf/dist/cjs/is-message.js
var require_is_message = __commonJS({
  "node_modules/@bufbuild/protobuf/dist/cjs/is-message.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isMessage = isMessage;
    function isMessage(arg, schema) {
      const isMessage2 = arg !== null && typeof arg == "object" && "$typeName" in arg && typeof arg.$typeName == "string";
      if (!isMessage2) {
        return false;
      }
      if (schema === void 0) {
        return true;
      }
      return schema.typeName === arg.$typeName;
    }
  }
});

// node_modules/@bufbuild/protobuf/dist/cjs/reflect/error.js
var require_error = __commonJS({
  "node_modules/@bufbuild/protobuf/dist/cjs/reflect/error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FieldError = void 0;
    exports.isFieldError = isFieldError;
    var errorNames = [
      "FieldValueInvalidError",
      "FieldListRangeError",
      "ForeignFieldError"
    ];
    var FieldError = class extends Error {
      constructor(fieldOrOneof, message, name = "FieldValueInvalidError") {
        super(message);
        this.name = name;
        this.field = () => fieldOrOneof;
      }
    };
    exports.FieldError = FieldError;
    function isFieldError(arg) {
      return arg instanceof Error && errorNames.includes(arg.name) && "field" in arg && typeof arg.field == "function";
    }
  }
});

// node_modules/@bufbuild/protobuf/dist/cjs/reflect/scalar.js
var require_scalar = __commonJS({
  "node_modules/@bufbuild/protobuf/dist/cjs/reflect/scalar.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.scalarEquals = scalarEquals;
    exports.scalarZeroValue = scalarZeroValue;
    exports.isScalarZeroValue = isScalarZeroValue;
    var proto_int64_js_1 = require_proto_int64();
    var descriptors_js_1 = require_descriptors();
    function scalarEquals(type, a, b) {
      if (a === b) {
        return true;
      }
      if (type == descriptors_js_1.ScalarType.BYTES) {
        if (!(a instanceof Uint8Array) || !(b instanceof Uint8Array)) {
          return false;
        }
        if (a.length !== b.length) {
          return false;
        }
        for (let i = 0; i < a.length; i++) {
          if (a[i] !== b[i]) {
            return false;
          }
        }
        return true;
      }
      switch (type) {
        case descriptors_js_1.ScalarType.UINT64:
        case descriptors_js_1.ScalarType.FIXED64:
        case descriptors_js_1.ScalarType.INT64:
        case descriptors_js_1.ScalarType.SFIXED64:
        case descriptors_js_1.ScalarType.SINT64:
          return a == b;
      }
      return false;
    }
    function scalarZeroValue(type, longAsString) {
      switch (type) {
        case descriptors_js_1.ScalarType.STRING:
          return "";
        case descriptors_js_1.ScalarType.BOOL:
          return false;
        case descriptors_js_1.ScalarType.DOUBLE:
        case descriptors_js_1.ScalarType.FLOAT:
          return 0;
        case descriptors_js_1.ScalarType.INT64:
        case descriptors_js_1.ScalarType.UINT64:
        case descriptors_js_1.ScalarType.SFIXED64:
        case descriptors_js_1.ScalarType.FIXED64:
        case descriptors_js_1.ScalarType.SINT64:
          return longAsString ? "0" : proto_int64_js_1.protoInt64.zero;
        case descriptors_js_1.ScalarType.BYTES:
          return new Uint8Array(0);
        default:
          return 0;
      }
    }
    function isScalarZeroValue(type, value) {
      switch (type) {
        case descriptors_js_1.ScalarType.BOOL:
          return value === false;
        case descriptors_js_1.ScalarType.STRING:
          return value === "";
        case descriptors_js_1.ScalarType.BYTES:
          return value instanceof Uint8Array && !value.byteLength;
        default:
          return value == 0;
      }
    }
  }
});

// node_modules/@bufbuild/protobuf/dist/cjs/reflect/unsafe.js
var require_unsafe = __commonJS({
  "node_modules/@bufbuild/protobuf/dist/cjs/reflect/unsafe.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.unsafeLocal = void 0;
    exports.unsafeOneofCase = unsafeOneofCase;
    exports.unsafeIsSet = unsafeIsSet;
    exports.unsafeIsSetExplicit = unsafeIsSetExplicit;
    exports.unsafeGet = unsafeGet;
    exports.unsafeSet = unsafeSet;
    exports.unsafeClear = unsafeClear;
    var scalar_js_1 = require_scalar();
    var IMPLICIT = 2;
    exports.unsafeLocal = Symbol.for("reflect unsafe local");
    function unsafeOneofCase(target, oneof) {
      const c = target[oneof.localName].case;
      if (c === void 0) {
        return c;
      }
      return oneof.fields.find((f) => f.localName === c);
    }
    function unsafeIsSet(target, field) {
      const name = field.localName;
      if (field.oneof) {
        return target[field.oneof.localName].case === name;
      }
      if (field.presence != IMPLICIT) {
        return target[name] !== void 0 && Object.prototype.hasOwnProperty.call(target, name);
      }
      switch (field.fieldKind) {
        case "list":
          return target[name].length > 0;
        case "map":
          return Object.keys(target[name]).length > 0;
        case "scalar":
          return !(0, scalar_js_1.isScalarZeroValue)(field.scalar, target[name]);
        case "enum":
          return target[name] !== field.enum.values[0].number;
      }
      throw new Error("message field with implicit presence");
    }
    function unsafeIsSetExplicit(target, localName) {
      return Object.prototype.hasOwnProperty.call(target, localName) && target[localName] !== void 0;
    }
    function unsafeGet(target, field) {
      if (field.oneof) {
        const oneof = target[field.oneof.localName];
        if (oneof.case === field.localName) {
          return oneof.value;
        }
        return void 0;
      }
      return target[field.localName];
    }
    function unsafeSet(target, field, value) {
      if (field.oneof) {
        target[field.oneof.localName] = {
          case: field.localName,
          value
        };
      } else {
        target[field.localName] = value;
      }
    }
    function unsafeClear(target, field) {
      const name = field.localName;
      if (field.oneof) {
        const oneofLocalName = field.oneof.localName;
        if (target[oneofLocalName].case === name) {
          target[oneofLocalName] = { case: void 0 };
        }
      } else if (field.presence != IMPLICIT) {
        delete target[name];
      } else {
        switch (field.fieldKind) {
          case "map":
            target[name] = {};
            break;
          case "list":
            target[name] = [];
            break;
          case "enum":
            target[name] = field.enum.values[0].number;
            break;
          case "scalar":
            target[name] = (0, scalar_js_1.scalarZeroValue)(field.scalar, field.longAsString);
            break;
        }
      }
    }
  }
});

// node_modules/@bufbuild/protobuf/dist/cjs/reflect/guard.js
var require_guard = __commonJS({
  "node_modules/@bufbuild/protobuf/dist/cjs/reflect/guard.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isObject = isObject;
    exports.isOneofADT = isOneofADT;
    exports.isReflectList = isReflectList;
    exports.isReflectMap = isReflectMap;
    exports.isReflectMessage = isReflectMessage;
    var unsafe_js_1 = require_unsafe();
    function isObject(arg) {
      return arg !== null && typeof arg == "object" && !Array.isArray(arg);
    }
    function isOneofADT(arg) {
      return arg !== null && typeof arg == "object" && "case" in arg && (typeof arg.case == "string" && "value" in arg && arg.value != null || arg.case === void 0 && (!("value" in arg) || arg.value === void 0));
    }
    function isReflectList(arg, field) {
      var _a, _b, _c, _d;
      if (isObject(arg) && unsafe_js_1.unsafeLocal in arg && "add" in arg && "field" in arg && typeof arg.field == "function") {
        if (field !== void 0) {
          const a = field;
          const b = arg.field();
          return a.listKind == b.listKind && a.scalar === b.scalar && ((_a = a.message) === null || _a === void 0 ? void 0 : _a.typeName) === ((_b = b.message) === null || _b === void 0 ? void 0 : _b.typeName) && ((_c = a.enum) === null || _c === void 0 ? void 0 : _c.typeName) === ((_d = b.enum) === null || _d === void 0 ? void 0 : _d.typeName);
        }
        return true;
      }
      return false;
    }
    function isReflectMap(arg, field) {
      var _a, _b, _c, _d;
      if (isObject(arg) && unsafe_js_1.unsafeLocal in arg && "has" in arg && "field" in arg && typeof arg.field == "function") {
        if (field !== void 0) {
          const a = field, b = arg.field();
          return a.mapKey === b.mapKey && a.mapKind == b.mapKind && a.scalar === b.scalar && ((_a = a.message) === null || _a === void 0 ? void 0 : _a.typeName) === ((_b = b.message) === null || _b === void 0 ? void 0 : _b.typeName) && ((_c = a.enum) === null || _c === void 0 ? void 0 : _c.typeName) === ((_d = b.enum) === null || _d === void 0 ? void 0 : _d.typeName);
        }
        return true;
      }
      return false;
    }
    function isReflectMessage(arg, messageDesc) {
      return isObject(arg) && unsafe_js_1.unsafeLocal in arg && "desc" in arg && isObject(arg.desc) && arg.desc.kind === "message" && (messageDesc === void 0 || arg.desc.typeName == messageDesc.typeName);
    }
  }
});

// node_modules/@bufbuild/protobuf/dist/cjs/reflect/reflect-check.js
var require_reflect_check = __commonJS({
  "node_modules/@bufbuild/protobuf/dist/cjs/reflect/reflect-check.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkField = checkField;
    exports.checkListItem = checkListItem;
    exports.checkMapEntry = checkMapEntry;
    exports.formatVal = formatVal;
    var descriptors_js_1 = require_descriptors();
    var is_message_js_1 = require_is_message();
    var error_js_1 = require_error();
    var guard_js_1 = require_guard();
    var binary_encoding_js_1 = require_binary_encoding();
    var text_encoding_js_1 = require_text_encoding();
    var proto_int64_js_1 = require_proto_int64();
    function checkField(field, value) {
      const check = field.fieldKind == "list" ? (0, guard_js_1.isReflectList)(value, field) : field.fieldKind == "map" ? (0, guard_js_1.isReflectMap)(value, field) : checkSingular(field, value);
      if (check === true) {
        return void 0;
      }
      let reason;
      switch (field.fieldKind) {
        case "list":
          reason = `expected ${formatReflectList(field)}, got ${formatVal(value)}`;
          break;
        case "map":
          reason = `expected ${formatReflectMap(field)}, got ${formatVal(value)}`;
          break;
        default: {
          reason = reasonSingular(field, value, check);
        }
      }
      return new error_js_1.FieldError(field, reason);
    }
    function checkListItem(field, index, value) {
      const check = checkSingular(field, value);
      if (check !== true) {
        return new error_js_1.FieldError(field, `list item #${index + 1}: ${reasonSingular(field, value, check)}`);
      }
      return void 0;
    }
    function checkMapEntry(field, key, value) {
      const checkKey = checkScalarValue(key, field.mapKey);
      if (checkKey !== true) {
        return new error_js_1.FieldError(field, `invalid map key: ${reasonSingular({ scalar: field.mapKey }, key, checkKey)}`);
      }
      const checkVal = checkSingular(field, value);
      if (checkVal !== true) {
        return new error_js_1.FieldError(field, `map entry ${formatVal(key)}: ${reasonSingular(field, value, checkVal)}`);
      }
      return void 0;
    }
    function checkSingular(field, value) {
      if (field.scalar !== void 0) {
        return checkScalarValue(value, field.scalar);
      }
      if (field.enum !== void 0) {
        if (field.enum.open) {
          return Number.isInteger(value);
        }
        return field.enum.values.some((v) => v.number === value);
      }
      return (0, guard_js_1.isReflectMessage)(value, field.message);
    }
    function checkScalarValue(value, scalar) {
      switch (scalar) {
        case descriptors_js_1.ScalarType.DOUBLE:
          return typeof value == "number";
        case descriptors_js_1.ScalarType.FLOAT:
          if (typeof value != "number") {
            return false;
          }
          if (Number.isNaN(value) || !Number.isFinite(value)) {
            return true;
          }
          if (value > binary_encoding_js_1.FLOAT32_MAX || value < binary_encoding_js_1.FLOAT32_MIN) {
            return `${value.toFixed()} out of range`;
          }
          return true;
        case descriptors_js_1.ScalarType.INT32:
        case descriptors_js_1.ScalarType.SFIXED32:
        case descriptors_js_1.ScalarType.SINT32:
          if (typeof value !== "number" || !Number.isInteger(value)) {
            return false;
          }
          if (value > binary_encoding_js_1.INT32_MAX || value < binary_encoding_js_1.INT32_MIN) {
            return `${value.toFixed()} out of range`;
          }
          return true;
        case descriptors_js_1.ScalarType.FIXED32:
        case descriptors_js_1.ScalarType.UINT32:
          if (typeof value !== "number" || !Number.isInteger(value)) {
            return false;
          }
          if (value > binary_encoding_js_1.UINT32_MAX || value < 0) {
            return `${value.toFixed()} out of range`;
          }
          return true;
        case descriptors_js_1.ScalarType.BOOL:
          return typeof value == "boolean";
        case descriptors_js_1.ScalarType.STRING:
          if (typeof value != "string") {
            return false;
          }
          return (0, text_encoding_js_1.getTextEncoding)().checkUtf8(value) || "invalid UTF8";
        case descriptors_js_1.ScalarType.BYTES:
          return value instanceof Uint8Array;
        case descriptors_js_1.ScalarType.INT64:
        case descriptors_js_1.ScalarType.SFIXED64:
        case descriptors_js_1.ScalarType.SINT64:
          if (typeof value == "bigint" || typeof value == "number" || typeof value == "string" && value.length > 0) {
            try {
              proto_int64_js_1.protoInt64.parse(value);
              return true;
            } catch (_) {
              return `${value} out of range`;
            }
          }
          return false;
        case descriptors_js_1.ScalarType.FIXED64:
        case descriptors_js_1.ScalarType.UINT64:
          if (typeof value == "bigint" || typeof value == "number" || typeof value == "string" && value.length > 0) {
            try {
              proto_int64_js_1.protoInt64.uParse(value);
              return true;
            } catch (_) {
              return `${value} out of range`;
            }
          }
          return false;
      }
    }
    function reasonSingular(field, val, details) {
      details = typeof details == "string" ? `: ${details}` : `, got ${formatVal(val)}`;
      if (field.scalar !== void 0) {
        return `expected ${scalarTypeDescription(field.scalar)}` + details;
      }
      if (field.enum !== void 0) {
        return `expected ${field.enum.toString()}` + details;
      }
      return `expected ${formatReflectMessage(field.message)}` + details;
    }
    function formatVal(val) {
      switch (typeof val) {
        case "object":
          if (val === null) {
            return "null";
          }
          if (val instanceof Uint8Array) {
            return `Uint8Array(${val.length})`;
          }
          if (Array.isArray(val)) {
            return `Array(${val.length})`;
          }
          if ((0, guard_js_1.isReflectList)(val)) {
            return formatReflectList(val.field());
          }
          if ((0, guard_js_1.isReflectMap)(val)) {
            return formatReflectMap(val.field());
          }
          if ((0, guard_js_1.isReflectMessage)(val)) {
            return formatReflectMessage(val.desc);
          }
          if ((0, is_message_js_1.isMessage)(val)) {
            return `message ${val.$typeName}`;
          }
          return "object";
        case "string":
          return val.length > 30 ? "string" : `"${val.split('"').join('\\"')}"`;
        case "boolean":
          return String(val);
        case "number":
          return String(val);
        case "bigint":
          return String(val) + "n";
        default:
          return typeof val;
      }
    }
    function formatReflectMessage(desc) {
      return `ReflectMessage (${desc.typeName})`;
    }
    function formatReflectList(field) {
      switch (field.listKind) {
        case "message":
          return `ReflectList (${field.message.toString()})`;
        case "enum":
          return `ReflectList (${field.enum.toString()})`;
        case "scalar":
          return `ReflectList (${descriptors_js_1.ScalarType[field.scalar]})`;
      }
    }
    function formatReflectMap(field) {
      switch (field.mapKind) {
        case "message":
          return `ReflectMap (${descriptors_js_1.ScalarType[field.mapKey]}, ${field.message.toString()})`;
        case "enum":
          return `ReflectMap (${descriptors_js_1.ScalarType[field.mapKey]}, ${field.enum.toString()})`;
        case "scalar":
          return `ReflectMap (${descriptors_js_1.ScalarType[field.mapKey]}, ${descriptors_js_1.ScalarType[field.scalar]})`;
      }
    }
    function scalarTypeDescription(scalar) {
      switch (scalar) {
        case descriptors_js_1.ScalarType.STRING:
          return "string";
        case descriptors_js_1.ScalarType.BOOL:
          return "boolean";
        case descriptors_js_1.ScalarType.INT64:
        case descriptors_js_1.ScalarType.SINT64:
        case descriptors_js_1.ScalarType.SFIXED64:
          return "bigint (int64)";
        case descriptors_js_1.ScalarType.UINT64:
        case descriptors_js_1.ScalarType.FIXED64:
          return "bigint (uint64)";
        case descriptors_js_1.ScalarType.BYTES:
          return "Uint8Array";
        case descriptors_js_1.ScalarType.DOUBLE:
          return "number (float64)";
        case descriptors_js_1.ScalarType.FLOAT:
          return "number (float32)";
        case descriptors_js_1.ScalarType.FIXED32:
        case descriptors_js_1.ScalarType.UINT32:
          return "number (uint32)";
        case descriptors_js_1.ScalarType.INT32:
        case descriptors_js_1.ScalarType.SFIXED32:
        case descriptors_js_1.ScalarType.SINT32:
          return "number (int32)";
      }
    }
  }
});

// node_modules/@bufbuild/protobuf/dist/cjs/wkt/wrappers.js
var require_wrappers = __commonJS({
  "node_modules/@bufbuild/protobuf/dist/cjs/wkt/wrappers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isWrapper = isWrapper;
    exports.isWrapperDesc = isWrapperDesc;
    function isWrapper(arg) {
      return isWrapperTypeName(arg.$typeName);
    }
    function isWrapperDesc(messageDesc) {
      const f = messageDesc.fields[0];
      return isWrapperTypeName(messageDesc.typeName) && f !== void 0 && f.fieldKind == "scalar" && f.name == "value" && f.number == 1;
    }
    function isWrapperTypeName(name) {
      return name.startsWith("google.protobuf.") && [
        "DoubleValue",
        "FloatValue",
        "Int64Value",
        "UInt64Value",
        "Int32Value",
        "UInt32Value",
        "BoolValue",
        "StringValue",
        "BytesValue"
      ].includes(name.substring(16));
    }
  }
});

// node_modules/@bufbuild/protobuf/dist/cjs/create.js
var require_create = __commonJS({
  "node_modules/@bufbuild/protobuf/dist/cjs/create.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.create = create;
    var is_message_js_1 = require_is_message();
    var descriptors_js_1 = require_descriptors();
    var scalar_js_1 = require_scalar();
    var guard_js_1 = require_guard();
    var unsafe_js_1 = require_unsafe();
    var wrappers_js_1 = require_wrappers();
    var EDITION_PROTO3 = 999;
    var EDITION_PROTO2 = 998;
    var IMPLICIT = 2;
    function create(schema, init) {
      if ((0, is_message_js_1.isMessage)(init, schema)) {
        return init;
      }
      const message = createZeroMessage(schema);
      if (init !== void 0) {
        initMessage(schema, message, init);
      }
      return message;
    }
    function initMessage(messageDesc, message, init) {
      for (const member of messageDesc.members) {
        let value = init[member.localName];
        if (value == null) {
          continue;
        }
        let field;
        if (member.kind == "oneof") {
          const oneofField = (0, unsafe_js_1.unsafeOneofCase)(init, member);
          if (!oneofField) {
            continue;
          }
          field = oneofField;
          value = (0, unsafe_js_1.unsafeGet)(init, oneofField);
        } else {
          field = member;
        }
        switch (field.fieldKind) {
          case "message":
            value = toMessage(field, value);
            break;
          case "scalar":
            value = initScalar(field, value);
            break;
          case "list":
            value = initList(field, value);
            break;
          case "map":
            value = initMap(field, value);
            break;
        }
        (0, unsafe_js_1.unsafeSet)(message, field, value);
      }
      return message;
    }
    function initScalar(field, value) {
      if (field.scalar == descriptors_js_1.ScalarType.BYTES) {
        return toU8Arr(value);
      }
      return value;
    }
    function initMap(field, value) {
      if ((0, guard_js_1.isObject)(value)) {
        if (field.scalar == descriptors_js_1.ScalarType.BYTES) {
          return convertObjectValues(value, toU8Arr);
        }
        if (field.mapKind == "message") {
          return convertObjectValues(value, (val) => toMessage(field, val));
        }
      }
      return value;
    }
    function initList(field, value) {
      if (Array.isArray(value)) {
        if (field.scalar == descriptors_js_1.ScalarType.BYTES) {
          return value.map(toU8Arr);
        }
        if (field.listKind == "message") {
          return value.map((item) => toMessage(field, item));
        }
      }
      return value;
    }
    function toMessage(field, value) {
      if (field.fieldKind == "message" && !field.oneof && (0, wrappers_js_1.isWrapperDesc)(field.message)) {
        return initScalar(field.message.fields[0], value);
      }
      if ((0, guard_js_1.isObject)(value)) {
        if (field.message.typeName == "google.protobuf.Struct" && field.parent.typeName !== "google.protobuf.Value") {
          return value;
        }
        if (!(0, is_message_js_1.isMessage)(value, field.message)) {
          return create(field.message, value);
        }
      }
      return value;
    }
    function toU8Arr(value) {
      return Array.isArray(value) ? new Uint8Array(value) : value;
    }
    function convertObjectValues(obj, fn) {
      const ret = {};
      for (const entry of Object.entries(obj)) {
        ret[entry[0]] = fn(entry[1]);
      }
      return ret;
    }
    var tokenZeroMessageField = Symbol();
    var messagePrototypes = /* @__PURE__ */ new WeakMap();
    function createZeroMessage(desc) {
      let msg;
      if (!needsPrototypeChain(desc)) {
        msg = {
          $typeName: desc.typeName
        };
        for (const member of desc.members) {
          if (member.kind == "oneof" || member.presence == IMPLICIT) {
            msg[member.localName] = createZeroField(member);
          }
        }
      } else {
        const cached = messagePrototypes.get(desc);
        let prototype;
        let members;
        if (cached) {
          ({ prototype, members } = cached);
        } else {
          prototype = {};
          members = /* @__PURE__ */ new Set();
          for (const member of desc.members) {
            if (member.kind == "oneof") {
              continue;
            }
            if (member.fieldKind != "scalar" && member.fieldKind != "enum") {
              continue;
            }
            if (member.presence == IMPLICIT) {
              continue;
            }
            members.add(member);
            prototype[member.localName] = createZeroField(member);
          }
          messagePrototypes.set(desc, { prototype, members });
        }
        msg = Object.create(prototype);
        msg.$typeName = desc.typeName;
        for (const member of desc.members) {
          if (members.has(member)) {
            continue;
          }
          if (member.kind == "field") {
            if (member.fieldKind == "message") {
              continue;
            }
            if (member.fieldKind == "scalar" || member.fieldKind == "enum") {
              if (member.presence != IMPLICIT) {
                continue;
              }
            }
          }
          msg[member.localName] = createZeroField(member);
        }
      }
      return msg;
    }
    function needsPrototypeChain(desc) {
      switch (desc.file.edition) {
        case EDITION_PROTO3:
          return false;
        case EDITION_PROTO2:
          return true;
        default:
          return desc.fields.some((f) => f.presence != IMPLICIT && f.fieldKind != "message" && !f.oneof);
      }
    }
    function createZeroField(field) {
      if (field.kind == "oneof") {
        return { case: void 0 };
      }
      if (field.fieldKind == "list") {
        return [];
      }
      if (field.fieldKind == "map") {
        return {};
      }
      if (field.fieldKind == "message") {
        return tokenZeroMessageField;
      }
      const defaultValue = field.getDefaultValue();
      if (defaultValue !== void 0) {
        return field.fieldKind == "scalar" && field.longAsString ? defaultValue.toString() : defaultValue;
      }
      return field.fieldKind == "scalar" ? (0, scalar_js_1.scalarZeroValue)(field.scalar, field.longAsString) : field.enum.values[0].number;
    }
  }
});

// node_modules/@bufbuild/protobuf/dist/cjs/reflect/reflect.js
var require_reflect = __commonJS({
  "node_modules/@bufbuild/protobuf/dist/cjs/reflect/reflect.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.reflect = reflect;
    exports.reflectList = reflectList;
    exports.reflectMap = reflectMap;
    var descriptors_js_1 = require_descriptors();
    var reflect_check_js_1 = require_reflect_check();
    var error_js_1 = require_error();
    var unsafe_js_1 = require_unsafe();
    var create_js_1 = require_create();
    var wrappers_js_1 = require_wrappers();
    var scalar_js_1 = require_scalar();
    var proto_int64_js_1 = require_proto_int64();
    var guard_js_1 = require_guard();
    function reflect(messageDesc, message, check = true) {
      return new ReflectMessageImpl(messageDesc, message, check);
    }
    var ReflectMessageImpl = class {
      get sortedFields() {
        var _a;
        return (_a = this._sortedFields) !== null && _a !== void 0 ? _a : (
          // biome-ignore lint/suspicious/noAssignInExpressions: no
          this._sortedFields = this.desc.fields.concat().sort((a, b) => a.number - b.number)
        );
      }
      constructor(messageDesc, message, check = true) {
        this.lists = /* @__PURE__ */ new Map();
        this.maps = /* @__PURE__ */ new Map();
        this.check = check;
        this.desc = messageDesc;
        this.message = this[unsafe_js_1.unsafeLocal] = message !== null && message !== void 0 ? message : (0, create_js_1.create)(messageDesc);
        this.fields = messageDesc.fields;
        this.oneofs = messageDesc.oneofs;
        this.members = messageDesc.members;
      }
      findNumber(number) {
        if (!this._fieldsByNumber) {
          this._fieldsByNumber = new Map(this.desc.fields.map((f) => [f.number, f]));
        }
        return this._fieldsByNumber.get(number);
      }
      oneofCase(oneof) {
        assertOwn(this.message, oneof);
        return (0, unsafe_js_1.unsafeOneofCase)(this.message, oneof);
      }
      isSet(field) {
        assertOwn(this.message, field);
        return (0, unsafe_js_1.unsafeIsSet)(this.message, field);
      }
      clear(field) {
        assertOwn(this.message, field);
        (0, unsafe_js_1.unsafeClear)(this.message, field);
      }
      get(field) {
        assertOwn(this.message, field);
        const value = (0, unsafe_js_1.unsafeGet)(this.message, field);
        switch (field.fieldKind) {
          case "list":
            let list = this.lists.get(field);
            if (!list || list[unsafe_js_1.unsafeLocal] !== value) {
              this.lists.set(
                field,
                // biome-ignore lint/suspicious/noAssignInExpressions: no
                list = new ReflectListImpl(field, value, this.check)
              );
            }
            return list;
          case "map":
            let map = this.maps.get(field);
            if (!map || map[unsafe_js_1.unsafeLocal] !== value) {
              this.maps.set(
                field,
                // biome-ignore lint/suspicious/noAssignInExpressions: no
                map = new ReflectMapImpl(field, value, this.check)
              );
            }
            return map;
          case "message":
            return messageToReflect(field, value, this.check);
          case "scalar":
            return value === void 0 ? (0, scalar_js_1.scalarZeroValue)(field.scalar, false) : longToReflect(field, value);
          case "enum":
            return value !== null && value !== void 0 ? value : field.enum.values[0].number;
        }
      }
      set(field, value) {
        assertOwn(this.message, field);
        if (this.check) {
          const err = (0, reflect_check_js_1.checkField)(field, value);
          if (err) {
            throw err;
          }
        }
        let local;
        if (field.fieldKind == "message") {
          local = messageToLocal(field, value);
        } else if ((0, guard_js_1.isReflectMap)(value) || (0, guard_js_1.isReflectList)(value)) {
          local = value[unsafe_js_1.unsafeLocal];
        } else {
          local = longToLocal(field, value);
        }
        (0, unsafe_js_1.unsafeSet)(this.message, field, local);
      }
      getUnknown() {
        return this.message.$unknown;
      }
      setUnknown(value) {
        this.message.$unknown = value;
      }
    };
    function assertOwn(owner, member) {
      if (member.parent.typeName !== owner.$typeName) {
        throw new error_js_1.FieldError(member, `cannot use ${member.toString()} with message ${owner.$typeName}`, "ForeignFieldError");
      }
    }
    function reflectList(field, unsafeInput, check = true) {
      return new ReflectListImpl(field, unsafeInput !== null && unsafeInput !== void 0 ? unsafeInput : [], check);
    }
    var ReflectListImpl = class {
      field() {
        return this._field;
      }
      get size() {
        return this._arr.length;
      }
      constructor(field, unsafeInput, check) {
        this._field = field;
        this._arr = this[unsafe_js_1.unsafeLocal] = unsafeInput;
        this.check = check;
      }
      get(index) {
        const item = this._arr[index];
        return item === void 0 ? void 0 : listItemToReflect(this._field, item, this.check);
      }
      set(index, item) {
        if (index < 0 || index >= this._arr.length) {
          throw new error_js_1.FieldError(this._field, `list item #${index + 1}: out of range`);
        }
        if (this.check) {
          const err = (0, reflect_check_js_1.checkListItem)(this._field, index, item);
          if (err) {
            throw err;
          }
        }
        this._arr[index] = listItemToLocal(this._field, item);
      }
      add(item) {
        if (this.check) {
          const err = (0, reflect_check_js_1.checkListItem)(this._field, this._arr.length, item);
          if (err) {
            throw err;
          }
        }
        this._arr.push(listItemToLocal(this._field, item));
        return void 0;
      }
      clear() {
        this._arr.splice(0, this._arr.length);
      }
      [Symbol.iterator]() {
        return this.values();
      }
      keys() {
        return this._arr.keys();
      }
      *values() {
        for (const item of this._arr) {
          yield listItemToReflect(this._field, item, this.check);
        }
      }
      *entries() {
        for (let i = 0; i < this._arr.length; i++) {
          yield [i, listItemToReflect(this._field, this._arr[i], this.check)];
        }
      }
    };
    function reflectMap(field, unsafeInput, check = true) {
      return new ReflectMapImpl(field, unsafeInput, check);
    }
    var ReflectMapImpl = class {
      constructor(field, unsafeInput, check = true) {
        this.obj = this[unsafe_js_1.unsafeLocal] = unsafeInput !== null && unsafeInput !== void 0 ? unsafeInput : {};
        this.check = check;
        this._field = field;
      }
      field() {
        return this._field;
      }
      set(key, value) {
        if (this.check) {
          const err = (0, reflect_check_js_1.checkMapEntry)(this._field, key, value);
          if (err) {
            throw err;
          }
        }
        this.obj[mapKeyToLocal(key)] = mapValueToLocal(this._field, value);
        return this;
      }
      delete(key) {
        const k = mapKeyToLocal(key);
        const has = Object.prototype.hasOwnProperty.call(this.obj, k);
        if (has) {
          delete this.obj[k];
        }
        return has;
      }
      clear() {
        for (const key of Object.keys(this.obj)) {
          delete this.obj[key];
        }
      }
      get(key) {
        let val = this.obj[mapKeyToLocal(key)];
        if (val !== void 0) {
          val = mapValueToReflect(this._field, val, this.check);
        }
        return val;
      }
      has(key) {
        return Object.prototype.hasOwnProperty.call(this.obj, mapKeyToLocal(key));
      }
      *keys() {
        for (const objKey of Object.keys(this.obj)) {
          yield mapKeyToReflect(objKey, this._field.mapKey);
        }
      }
      *entries() {
        for (const objEntry of Object.entries(this.obj)) {
          yield [
            mapKeyToReflect(objEntry[0], this._field.mapKey),
            mapValueToReflect(this._field, objEntry[1], this.check)
          ];
        }
      }
      [Symbol.iterator]() {
        return this.entries();
      }
      get size() {
        return Object.keys(this.obj).length;
      }
      *values() {
        for (const val of Object.values(this.obj)) {
          yield mapValueToReflect(this._field, val, this.check);
        }
      }
      forEach(callbackfn, thisArg) {
        for (const mapEntry of this.entries()) {
          callbackfn.call(thisArg, mapEntry[1], mapEntry[0], this);
        }
      }
    };
    function messageToLocal(field, value) {
      if (!(0, guard_js_1.isReflectMessage)(value)) {
        return value;
      }
      if ((0, wrappers_js_1.isWrapper)(value.message) && !field.oneof && field.fieldKind == "message") {
        return value.message.value;
      }
      if (value.desc.typeName == "google.protobuf.Struct" && field.parent.typeName != "google.protobuf.Value") {
        return wktStructToLocal(value.message);
      }
      return value.message;
    }
    function messageToReflect(field, value, check) {
      if (value !== void 0) {
        if ((0, wrappers_js_1.isWrapperDesc)(field.message) && !field.oneof && field.fieldKind == "message") {
          value = {
            $typeName: field.message.typeName,
            value: longToReflect(field.message.fields[0], value)
          };
        } else if (field.message.typeName == "google.protobuf.Struct" && field.parent.typeName != "google.protobuf.Value" && (0, guard_js_1.isObject)(value)) {
          value = wktStructToReflect(value);
        }
      }
      return new ReflectMessageImpl(field.message, value, check);
    }
    function listItemToLocal(field, value) {
      if (field.listKind == "message") {
        return messageToLocal(field, value);
      }
      return longToLocal(field, value);
    }
    function listItemToReflect(field, value, check) {
      if (field.listKind == "message") {
        return messageToReflect(field, value, check);
      }
      return longToReflect(field, value);
    }
    function mapValueToLocal(field, value) {
      if (field.mapKind == "message") {
        return messageToLocal(field, value);
      }
      return longToLocal(field, value);
    }
    function mapValueToReflect(field, value, check) {
      if (field.mapKind == "message") {
        return messageToReflect(field, value, check);
      }
      return value;
    }
    function mapKeyToLocal(key) {
      return typeof key == "string" || typeof key == "number" ? key : String(key);
    }
    function mapKeyToReflect(key, type) {
      switch (type) {
        case descriptors_js_1.ScalarType.STRING:
          return key;
        case descriptors_js_1.ScalarType.INT32:
        case descriptors_js_1.ScalarType.FIXED32:
        case descriptors_js_1.ScalarType.UINT32:
        case descriptors_js_1.ScalarType.SFIXED32:
        case descriptors_js_1.ScalarType.SINT32: {
          const n = Number.parseInt(key);
          if (Number.isFinite(n)) {
            return n;
          }
          break;
        }
        case descriptors_js_1.ScalarType.BOOL:
          switch (key) {
            case "true":
              return true;
            case "false":
              return false;
          }
          break;
        case descriptors_js_1.ScalarType.UINT64:
        case descriptors_js_1.ScalarType.FIXED64:
          try {
            return proto_int64_js_1.protoInt64.uParse(key);
          } catch (_a) {
          }
          break;
        default:
          try {
            return proto_int64_js_1.protoInt64.parse(key);
          } catch (_b) {
          }
          break;
      }
      return key;
    }
    function longToReflect(field, value) {
      switch (field.scalar) {
        case descriptors_js_1.ScalarType.INT64:
        case descriptors_js_1.ScalarType.SFIXED64:
        case descriptors_js_1.ScalarType.SINT64:
          if ("longAsString" in field && field.longAsString && typeof value == "string") {
            value = proto_int64_js_1.protoInt64.parse(value);
          }
          break;
        case descriptors_js_1.ScalarType.FIXED64:
        case descriptors_js_1.ScalarType.UINT64:
          if ("longAsString" in field && field.longAsString && typeof value == "string") {
            value = proto_int64_js_1.protoInt64.uParse(value);
          }
          break;
      }
      return value;
    }
    function longToLocal(field, value) {
      switch (field.scalar) {
        case descriptors_js_1.ScalarType.INT64:
        case descriptors_js_1.ScalarType.SFIXED64:
        case descriptors_js_1.ScalarType.SINT64:
          if ("longAsString" in field && field.longAsString) {
            value = String(value);
          } else if (typeof value == "string" || typeof value == "number") {
            value = proto_int64_js_1.protoInt64.parse(value);
          }
          break;
        case descriptors_js_1.ScalarType.FIXED64:
        case descriptors_js_1.ScalarType.UINT64:
          if ("longAsString" in field && field.longAsString) {
            value = String(value);
          } else if (typeof value == "string" || typeof value == "number") {
            value = proto_int64_js_1.protoInt64.uParse(value);
          }
          break;
      }
      return value;
    }
    function wktStructToReflect(json) {
      const struct = {
        $typeName: "google.protobuf.Struct",
        fields: {}
      };
      if ((0, guard_js_1.isObject)(json)) {
        for (const [k, v] of Object.entries(json)) {
          struct.fields[k] = wktValueToReflect(v);
        }
      }
      return struct;
    }
    function wktStructToLocal(val) {
      const json = {};
      for (const [k, v] of Object.entries(val.fields)) {
        json[k] = wktValueToLocal(v);
      }
      return json;
    }
    function wktValueToLocal(val) {
      switch (val.kind.case) {
        case "structValue":
          return wktStructToLocal(val.kind.value);
        case "listValue":
          return val.kind.value.values.map(wktValueToLocal);
        case "nullValue":
        case void 0:
          return null;
        default:
          return val.kind.value;
      }
    }
    function wktValueToReflect(json) {
      const value = {
        $typeName: "google.protobuf.Value",
        kind: { case: void 0 }
      };
      switch (typeof json) {
        case "number":
          value.kind = { case: "numberValue", value: json };
          break;
        case "string":
          value.kind = { case: "stringValue", value: json };
          break;
        case "boolean":
          value.kind = { case: "boolValue", value: json };
          break;
        case "object":
          if (json === null) {
            const nullValue = 0;
            value.kind = { case: "nullValue", value: nullValue };
          } else if (Array.isArray(json)) {
            const listValue = {
              $typeName: "google.protobuf.ListValue",
              values: []
            };
            if (Array.isArray(json)) {
              for (const e of json) {
                listValue.values.push(wktValueToReflect(e));
              }
            }
            value.kind = {
              case: "listValue",
              value: listValue
            };
          } else {
            value.kind = {
              case: "structValue",
              value: wktStructToReflect(json)
            };
          }
          break;
      }
      return value;
    }
  }
});

// node_modules/@bufbuild/protobuf/dist/cjs/to-binary.js
var require_to_binary = __commonJS({
  "node_modules/@bufbuild/protobuf/dist/cjs/to-binary.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toBinary = toBinary;
    exports.writeField = writeField;
    var reflect_js_1 = require_reflect();
    var binary_encoding_js_1 = require_binary_encoding();
    var descriptors_js_1 = require_descriptors();
    var LEGACY_REQUIRED = 3;
    var writeDefaults = {
      writeUnknownFields: true
    };
    function makeWriteOptions(options) {
      return options ? Object.assign(Object.assign({}, writeDefaults), options) : writeDefaults;
    }
    function toBinary(schema, message, options) {
      return writeFields(new binary_encoding_js_1.BinaryWriter(), makeWriteOptions(options), (0, reflect_js_1.reflect)(schema, message)).finish();
    }
    function writeFields(writer, opts, msg) {
      var _a;
      for (const f of msg.sortedFields) {
        if (!msg.isSet(f)) {
          if (f.presence == LEGACY_REQUIRED) {
            throw new Error(`cannot encode ${f} to binary: required field not set`);
          }
          continue;
        }
        writeField(writer, opts, msg, f);
      }
      if (opts.writeUnknownFields) {
        for (const { no, wireType, data } of (_a = msg.getUnknown()) !== null && _a !== void 0 ? _a : []) {
          writer.tag(no, wireType).raw(data);
        }
      }
      return writer;
    }
    function writeField(writer, opts, msg, field) {
      var _a;
      switch (field.fieldKind) {
        case "scalar":
        case "enum":
          writeScalar(writer, msg.desc.typeName, field.name, (_a = field.scalar) !== null && _a !== void 0 ? _a : descriptors_js_1.ScalarType.INT32, field.number, msg.get(field));
          break;
        case "list":
          writeListField(writer, opts, field, msg.get(field));
          break;
        case "message":
          writeMessageField(writer, opts, field, msg.get(field));
          break;
        case "map":
          for (const [key, val] of msg.get(field)) {
            writeMapEntry(writer, opts, field, key, val);
          }
          break;
      }
    }
    function writeScalar(writer, msgName, fieldName, scalarType, fieldNo, value) {
      writeScalarValue(writer.tag(fieldNo, writeTypeOfScalar(scalarType)), msgName, fieldName, scalarType, value);
    }
    function writeMessageField(writer, opts, field, message) {
      if (field.delimitedEncoding) {
        writeFields(writer.tag(field.number, binary_encoding_js_1.WireType.StartGroup), opts, message).tag(field.number, binary_encoding_js_1.WireType.EndGroup);
      } else {
        writeFields(writer.tag(field.number, binary_encoding_js_1.WireType.LengthDelimited).fork(), opts, message).join();
      }
    }
    function writeListField(writer, opts, field, list) {
      var _a;
      if (field.listKind == "message") {
        for (const item of list) {
          writeMessageField(writer, opts, field, item);
        }
        return;
      }
      const scalarType = (_a = field.scalar) !== null && _a !== void 0 ? _a : descriptors_js_1.ScalarType.INT32;
      if (field.packed) {
        if (!list.size) {
          return;
        }
        writer.tag(field.number, binary_encoding_js_1.WireType.LengthDelimited).fork();
        for (const item of list) {
          writeScalarValue(writer, field.parent.typeName, field.name, scalarType, item);
        }
        writer.join();
        return;
      }
      for (const item of list) {
        writeScalar(writer, field.parent.typeName, field.name, scalarType, field.number, item);
      }
    }
    function writeMapEntry(writer, opts, field, key, value) {
      var _a;
      writer.tag(field.number, binary_encoding_js_1.WireType.LengthDelimited).fork();
      writeScalar(writer, field.parent.typeName, field.name, field.mapKey, 1, key);
      switch (field.mapKind) {
        case "scalar":
        case "enum":
          writeScalar(writer, field.parent.typeName, field.name, (_a = field.scalar) !== null && _a !== void 0 ? _a : descriptors_js_1.ScalarType.INT32, 2, value);
          break;
        case "message":
          writeFields(writer.tag(2, binary_encoding_js_1.WireType.LengthDelimited).fork(), opts, value).join();
          break;
      }
      writer.join();
    }
    function writeScalarValue(writer, msgName, fieldName, type, value) {
      try {
        switch (type) {
          case descriptors_js_1.ScalarType.STRING:
            writer.string(value);
            break;
          case descriptors_js_1.ScalarType.BOOL:
            writer.bool(value);
            break;
          case descriptors_js_1.ScalarType.DOUBLE:
            writer.double(value);
            break;
          case descriptors_js_1.ScalarType.FLOAT:
            writer.float(value);
            break;
          case descriptors_js_1.ScalarType.INT32:
            writer.int32(value);
            break;
          case descriptors_js_1.ScalarType.INT64:
            writer.int64(value);
            break;
          case descriptors_js_1.ScalarType.UINT64:
            writer.uint64(value);
            break;
          case descriptors_js_1.ScalarType.FIXED64:
            writer.fixed64(value);
            break;
          case descriptors_js_1.ScalarType.BYTES:
            writer.bytes(value);
            break;
          case descriptors_js_1.ScalarType.FIXED32:
            writer.fixed32(value);
            break;
          case descriptors_js_1.ScalarType.SFIXED32:
            writer.sfixed32(value);
            break;
          case descriptors_js_1.ScalarType.SFIXED64:
            writer.sfixed64(value);
            break;
          case descriptors_js_1.ScalarType.SINT64:
            writer.sint64(value);
            break;
          case descriptors_js_1.ScalarType.UINT32:
            writer.uint32(value);
            break;
          case descriptors_js_1.ScalarType.SINT32:
            writer.sint32(value);
            break;
        }
      } catch (e) {
        if (e instanceof Error) {
          throw new Error(`cannot encode field ${msgName}.${fieldName} to binary: ${e.message}`);
        }
        throw e;
      }
    }
    function writeTypeOfScalar(type) {
      switch (type) {
        case descriptors_js_1.ScalarType.BYTES:
        case descriptors_js_1.ScalarType.STRING:
          return binary_encoding_js_1.WireType.LengthDelimited;
        case descriptors_js_1.ScalarType.DOUBLE:
        case descriptors_js_1.ScalarType.FIXED64:
        case descriptors_js_1.ScalarType.SFIXED64:
          return binary_encoding_js_1.WireType.Bit64;
        case descriptors_js_1.ScalarType.FIXED32:
        case descriptors_js_1.ScalarType.SFIXED32:
        case descriptors_js_1.ScalarType.FLOAT:
          return binary_encoding_js_1.WireType.Bit32;
        default:
          return binary_encoding_js_1.WireType.Varint;
      }
    }
  }
});

// node_modules/@bufbuild/protobuf/dist/cjs/from-binary.js
var require_from_binary = __commonJS({
  "node_modules/@bufbuild/protobuf/dist/cjs/from-binary.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromBinary = fromBinary;
    exports.mergeFromBinary = mergeFromBinary;
    exports.readField = readField;
    var descriptors_js_1 = require_descriptors();
    var scalar_js_1 = require_scalar();
    var reflect_js_1 = require_reflect();
    var binary_encoding_js_1 = require_binary_encoding();
    var varint_js_1 = require_varint();
    var readDefaults = {
      readUnknownFields: true
    };
    function makeReadOptions(options) {
      return options ? Object.assign(Object.assign({}, readDefaults), options) : readDefaults;
    }
    function fromBinary(schema, bytes, options) {
      const msg = (0, reflect_js_1.reflect)(schema, void 0, false);
      readMessage(msg, new binary_encoding_js_1.BinaryReader(bytes), makeReadOptions(options), false, bytes.byteLength);
      return msg.message;
    }
    function mergeFromBinary(schema, target, bytes, options) {
      readMessage((0, reflect_js_1.reflect)(schema, target, false), new binary_encoding_js_1.BinaryReader(bytes), makeReadOptions(options), false, bytes.byteLength);
      return target;
    }
    function readMessage(message, reader, options, delimited, lengthOrDelimitedFieldNo) {
      var _a;
      const end = delimited ? reader.len : reader.pos + lengthOrDelimitedFieldNo;
      let fieldNo;
      let wireType;
      const unknownFields = (_a = message.getUnknown()) !== null && _a !== void 0 ? _a : [];
      while (reader.pos < end) {
        [fieldNo, wireType] = reader.tag();
        if (delimited && wireType == binary_encoding_js_1.WireType.EndGroup) {
          break;
        }
        const field = message.findNumber(fieldNo);
        if (!field) {
          const data = reader.skip(wireType, fieldNo);
          if (options.readUnknownFields) {
            unknownFields.push({ no: fieldNo, wireType, data });
          }
          continue;
        }
        readField(message, reader, field, wireType, options);
      }
      if (delimited) {
        if (wireType != binary_encoding_js_1.WireType.EndGroup || fieldNo !== lengthOrDelimitedFieldNo) {
          throw new Error("invalid end group tag");
        }
      }
      if (unknownFields.length > 0) {
        message.setUnknown(unknownFields);
      }
    }
    function readField(message, reader, field, wireType, options) {
      var _a;
      switch (field.fieldKind) {
        case "scalar":
          message.set(field, readScalar(reader, field.scalar));
          break;
        case "enum":
          const val = readScalar(reader, descriptors_js_1.ScalarType.INT32);
          if (field.enum.open) {
            message.set(field, val);
          } else {
            const ok = field.enum.values.some((v) => v.number === val);
            if (ok) {
              message.set(field, val);
            } else if (options.readUnknownFields) {
              const bytes = [];
              (0, varint_js_1.varint32write)(val, bytes);
              const unknownFields = (_a = message.getUnknown()) !== null && _a !== void 0 ? _a : [];
              unknownFields.push({
                no: field.number,
                wireType,
                data: new Uint8Array(bytes)
              });
              message.setUnknown(unknownFields);
            }
          }
          break;
        case "message":
          message.set(field, readMessageField(reader, options, field, message.get(field)));
          break;
        case "list":
          readListField(reader, wireType, message.get(field), options);
          break;
        case "map":
          readMapEntry(reader, message.get(field), options);
          break;
      }
    }
    function readMapEntry(reader, map, options) {
      const field = map.field();
      let key;
      let val;
      const len = reader.uint32();
      const end = reader.pos + len;
      while (reader.pos < end) {
        const [fieldNo] = reader.tag();
        switch (fieldNo) {
          case 1:
            key = readScalar(reader, field.mapKey);
            break;
          case 2:
            switch (field.mapKind) {
              case "scalar":
                val = readScalar(reader, field.scalar);
                break;
              case "enum":
                val = reader.int32();
                break;
              case "message":
                val = readMessageField(reader, options, field);
                break;
            }
            break;
        }
      }
      if (key === void 0) {
        key = (0, scalar_js_1.scalarZeroValue)(field.mapKey, false);
      }
      if (val === void 0) {
        switch (field.mapKind) {
          case "scalar":
            val = (0, scalar_js_1.scalarZeroValue)(field.scalar, false);
            break;
          case "enum":
            val = field.enum.values[0].number;
            break;
          case "message":
            val = (0, reflect_js_1.reflect)(field.message, void 0, false);
            break;
        }
      }
      map.set(key, val);
    }
    function readListField(reader, wireType, list, options) {
      var _a;
      const field = list.field();
      if (field.listKind === "message") {
        list.add(readMessageField(reader, options, field));
        return;
      }
      const scalarType = (_a = field.scalar) !== null && _a !== void 0 ? _a : descriptors_js_1.ScalarType.INT32;
      const packed = wireType == binary_encoding_js_1.WireType.LengthDelimited && scalarType != descriptors_js_1.ScalarType.STRING && scalarType != descriptors_js_1.ScalarType.BYTES;
      if (!packed) {
        list.add(readScalar(reader, scalarType));
        return;
      }
      const e = reader.uint32() + reader.pos;
      while (reader.pos < e) {
        list.add(readScalar(reader, scalarType));
      }
    }
    function readMessageField(reader, options, field, mergeMessage) {
      const delimited = field.delimitedEncoding;
      const message = mergeMessage !== null && mergeMessage !== void 0 ? mergeMessage : (0, reflect_js_1.reflect)(field.message, void 0, false);
      readMessage(message, reader, options, delimited, delimited ? field.number : reader.uint32());
      return message;
    }
    function readScalar(reader, type) {
      switch (type) {
        case descriptors_js_1.ScalarType.STRING:
          return reader.string();
        case descriptors_js_1.ScalarType.BOOL:
          return reader.bool();
        case descriptors_js_1.ScalarType.DOUBLE:
          return reader.double();
        case descriptors_js_1.ScalarType.FLOAT:
          return reader.float();
        case descriptors_js_1.ScalarType.INT32:
          return reader.int32();
        case descriptors_js_1.ScalarType.INT64:
          return reader.int64();
        case descriptors_js_1.ScalarType.UINT64:
          return reader.uint64();
        case descriptors_js_1.ScalarType.FIXED64:
          return reader.fixed64();
        case descriptors_js_1.ScalarType.BYTES:
          return reader.bytes();
        case descriptors_js_1.ScalarType.FIXED32:
          return reader.fixed32();
        case descriptors_js_1.ScalarType.SFIXED32:
          return reader.sfixed32();
        case descriptors_js_1.ScalarType.SFIXED64:
          return reader.sfixed64();
        case descriptors_js_1.ScalarType.SINT64:
          return reader.sint64();
        case descriptors_js_1.ScalarType.UINT32:
          return reader.uint32();
        case descriptors_js_1.ScalarType.SINT32:
          return reader.sint32();
      }
    }
  }
});

// node_modules/@bufbuild/protobuf/dist/cjs/wire/size-delimited.js
var require_size_delimited = __commonJS({
  "node_modules/@bufbuild/protobuf/dist/cjs/wire/size-delimited.js"(exports) {
    "use strict";
    var __asyncValues = exports && exports.__asyncValues || function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({ value: v2, done: d });
        }, reject);
      }
    };
    var __await = exports && exports.__await || function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    var __asyncGenerator = exports && exports.__asyncGenerator || function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function awaitReturn(f) {
        return function(v) {
          return Promise.resolve(v).then(f, reject);
        };
      }
      function verb(n, f) {
        if (g[n]) {
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
          if (f)
            i[n] = f(i[n]);
        }
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sizeDelimitedEncode = sizeDelimitedEncode;
    exports.sizeDelimitedDecodeStream = sizeDelimitedDecodeStream;
    exports.sizeDelimitedPeek = sizeDelimitedPeek;
    var to_binary_js_1 = require_to_binary();
    var binary_encoding_js_1 = require_binary_encoding();
    var from_binary_js_1 = require_from_binary();
    function sizeDelimitedEncode(messageDesc, message, options) {
      const writer = new binary_encoding_js_1.BinaryWriter();
      writer.bytes((0, to_binary_js_1.toBinary)(messageDesc, message, options));
      return writer.finish();
    }
    function sizeDelimitedDecodeStream(messageDesc, iterable, options) {
      return __asyncGenerator(this, arguments, function* sizeDelimitedDecodeStream_1() {
        var _a, e_1, _b, _c;
        function append(buffer2, chunk) {
          const n = new Uint8Array(buffer2.byteLength + chunk.byteLength);
          n.set(buffer2);
          n.set(chunk, buffer2.length);
          return n;
        }
        let buffer = new Uint8Array(0);
        try {
          for (var _d = true, iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = yield __await(iterable_1.next()), _a = iterable_1_1.done, !_a; _d = true) {
            _c = iterable_1_1.value;
            _d = false;
            const chunk = _c;
            buffer = append(buffer, chunk);
            for (; ; ) {
              const size = sizeDelimitedPeek(buffer);
              if (size.eof) {
                break;
              }
              if (size.offset + size.size > buffer.byteLength) {
                break;
              }
              yield yield __await((0, from_binary_js_1.fromBinary)(messageDesc, buffer.subarray(size.offset, size.offset + size.size), options));
              buffer = buffer.subarray(size.offset + size.size);
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (!_d && !_a && (_b = iterable_1.return))
              yield __await(_b.call(iterable_1));
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        if (buffer.byteLength > 0) {
          throw new Error("incomplete data");
        }
      });
    }
    function sizeDelimitedPeek(data) {
      const sizeEof = { eof: true, size: null, offset: null };
      for (let i = 0; i < 10; i++) {
        if (i > data.byteLength) {
          return sizeEof;
        }
        if ((data[i] & 128) == 0) {
          const reader = new binary_encoding_js_1.BinaryReader(data);
          let size;
          try {
            size = reader.uint32();
          } catch (e) {
            if (e instanceof RangeError) {
              return sizeEof;
            }
            throw e;
          }
          return {
            eof: false,
            size,
            offset: reader.pos
          };
        }
      }
      throw new Error("invalid varint");
    }
  }
});

// node_modules/@bufbuild/protobuf/dist/cjs/wire/index.js
var require_wire = __commonJS({
  "node_modules/@bufbuild/protobuf/dist/cjs/wire/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_binary_encoding(), exports);
    __exportStar(require_base64_encoding(), exports);
    __exportStar(require_text_encoding(), exports);
    __exportStar(require_text_format(), exports);
    __exportStar(require_size_delimited(), exports);
  }
});

// node_modules/tiktok-live-connector/dist/types/tiktok-schema.js
var require_tiktok_schema = __commonJS({
  "node_modules/tiktok-live-connector/dist/types/tiktok-schema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProfitRankType = exports.MessageDisplayStyle = exports.GiftSource = exports.ExhibitionType = exports.GoalMessageSource = exports.PerceptionDialogIconType = exports.CommentTag = exports.IconDisplayType = exports.RenderType = exports.ShowType = exports.HorizontalOnclickTriggerType = exports.GiftMessageIgnoreConfig = exports.UserMetricsType = exports.TopicActionType = exports.TagType = exports.GiftMessageVersion = exports.LinkmicGiftExpressionStrategy = exports.MultiplierType = exports.PunishTypeId = exports.EmoteScene = exports.UserEmoteUploadSource = exports.RewardCondition = exports.Scene = exports.MessageType = exports.LinkMessageType = exports.CommonContentCase = exports.EnvelopeDisplay = exports.EnvelopeFollowShowStatus = exports.EnvelopeBusinessType = exports.BarrageType = exports.LinkLayerMessageType = exports.ControlAction = exports.MemberMessageAction = exports.LinkmicStatus = exports.SubscribingStatus = exports.OldSubscribeStatus = exports.SubscribeType = exports.ReplyStatus = exports.BusinessCase = exports.GroupStatus = exports.KickoutReason = exports.AgreeStatus = exports.HashtagNamespace = exports.LinkmicApplierSortSetting = exports.TextType = exports.EmotePrivateType = exports.ContentSource = exports.EmoteType = exports.AuditStatus = exports.protobufPackage = void 0;
    exports.BadgeStruct_VerticalPaddingRule = exports.BadgeStruct_HorizontalPaddingRule = exports.BadgeStruct_Position = exports.BadgeStruct_BadgeExhibitionType = exports.BadgeStruct_DisplayStatus = exports.BadgeStruct_BadgeSceneType = exports.BadgeStruct_BadgePriorityType = exports.BadgeStruct_BadgeDisplayType = exports.Text_ShowType = exports.CommonMessageData_IMDispatchStrategy = exports.BattleInviteType = exports.BattleType = exports.SourceType = exports.TagClassification = exports.CohostLayoutMode = exports.JoinType = exports.PosIdentityType = exports.LinkmicShareRevenueSetting = exports.ContentInviteSource = exports.LinkUserType = exports.MultiGuestOutsideRoomInviteSource = exports.ContentPositionType = exports.OptPairStatus = exports.CohostABTestType = exports.PollEndType = exports.LinkmicMultiLiveEnum = exports.LinkMicUserAdminType = exports.GuestMicCameraChangeScene = exports.GuestMicCameraManageOp = exports.MuteStatus = exports.LinkRoleType = exports.LinkmicRoleType = exports.LinkSilenceStatus = exports.LinkType = exports.PlayScene = exports.BattleABTestType = exports.GiftPermissionType = exports.Result = exports.BattleAction = exports.RewardStatus = exports.BattleTaskMessageType = exports.Reason = exports.TriggerReason = exports.RankTestMessageScene = exports.PollAppealStatus = exports.PollTemplateStatus = exports.PollKind = exports.HitABStatus = exports.DisplayStyle = exports.UnionAnimationInfoType = void 0;
    exports.Gift_GiftSponsorInfo = exports.Gift_CrossScreenEffectInfo_ReactionEffectIdsEntry = exports.Gift_CrossScreenEffectInfo_ActionEffectIdsEntry = exports.Gift_CrossScreenEffectInfo_SingleActionEffectIdsEntry = exports.Gift_CrossScreenEffectInfo = exports.Gift_BatchGiftInfo = exports.Gift_GiftPanelBanner = exports.Gift = exports.BadgeStruct_PaddingInfo = exports.BadgeStruct_StringBadge = exports.BadgeStruct_IconConfig = exports.BadgeStruct_TextBadge = exports.BadgeStruct_ImageBadge = exports.BadgeStruct_CombineBadgeBackground = exports.BadgeStruct_ProfileCardPanel = exports.BadgeStruct_NumberConfig = exports.BadgeStruct_ProjectionConfig = exports.BadgeStruct_ProfileContent = exports.BadgeStruct_ArrowConfig = exports.BadgeStruct_CombineBadge = exports.BadgeStruct = exports.Image_Content = exports.Image = exports.Text_PatternRef = exports.Text_TextPieceUser = exports.Text_TextPiecePatternRef = exports.Text_TextPieceGift = exports.Text_TextFormat = exports.Text_TextPiece = exports.Text = exports.CommonMessageData_LiveMessageID = exports.CommonMessageData_LiveMessageSEI = exports.CommonMessageData = exports.WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result = exports.WebcastBarrageMessage_IconDisplayType = exports.WebcastBarrageMessage_RenderType = exports.WebcastBarrageMessage_ShowType = exports.WebcastBarrageMessage_BarrageType = exports.WebcastMemberMessage_HitABStatus = exports.WebcastMemberMessage_DisplayStyle = exports.EmoteUploadInfo_UserEmoteUploadSource = exports.WebcastChatMessage_CommentTag = exports.Emote_AuditInfo_AuditTaskType = exports.User_FansClub_FansClubData_UserFansClubStatus = exports.User_FansClub_FansClubData_BadgeIcon = exports.User_FansClub_PreferntialType = exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType = exports.User_EcommerceEntrance_EntranceType = exports.User_EcommerceEntrance_CreatorType = exports.User_LiveEventInfo_EventPayMethod = void 0;
    exports.TimeStampContainer = exports.ValueLabel = exports.TikTokColor = exports.Ranking = exports.LiveStreamGoalIndicator = exports.LiveStreamGoal_GoalStats_GoalComparison = exports.LiveStreamGoal_GoalStats = exports.LiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution = exports.LiveStreamGoal_LiveStreamGoalContributor = exports.LiveStreamGoal_LiveStreamSubGoalGift = exports.LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo = exports.LiveStreamGoal_LiveStreamSubGoal = exports.LiveStreamGoal_AuditInfo = exports.LiveStreamGoal = exports.UserIdentity = exports.MsgFilter = exports.PunishEventInfo = exports.Emote_EmoteUploadInfo = exports.Emote_AuditInfo = exports.Emote = exports.User_UserStats = exports.User_UserAttr = exports.User_SubscribeInfo = exports.User_SubscribeBadge = exports.User_PayGrade = exports.User_OwnRoom = exports.User_FollowInfo = exports.User_FansClubInfo = exports.User_FansClub_FansClubData = exports.User_FansClub = exports.User_EcommerceEntrance_ShowcaseEntranceInfo = exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage = exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel = exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel = exports.User_EcommerceEntrance_ShopEntranceInfo = exports.User_EcommerceEntrance = exports.User_ComboBadgeInfo = exports.User_Border = exports.User_AuthorStats = exports.User_AuthenticationInfo = exports.User_AnchorLevel = exports.User_ActivityInfo = exports.User_LiveEventInfo_WalletPackage = exports.User_LiveEventInfo = exports.User = exports.Gift_GiftBoxInfo = exports.Gift_GiftSkinToGiftTextsInfo = exports.Gift_GiftText = exports.Gift_GiftSkin = exports.Gift_UGGiftStructInfo = void 0;
    exports.Player = exports.MultiLiveAnchorPanelSettings = exports.LinkerWaitingListChangeContent = exports.LinkerUpdateUserSettingContent = exports.LinkerUpdateUserContent_UpdateInfoEntry = exports.LinkerUpdateUserContent = exports.LinkmicUserToastContent = exports.LinkerSysKickOutContent = exports.LinkerSetting = exports.LinkerReplyContent_LinkmicInfo = exports.LinkerReplyContent = exports.LinkerRandomMatchContent = exports.LinkerMuteContent = exports.LinkerMicIdxUpdateContent = exports.LinkerMediaChangeContent_LinkerMediaChangeOperator = exports.LinkerMediaChangeContent = exports.LinkerListChangeContent = exports.CohostListChangeContent = exports.LinkerLinkedListChangeContent = exports.LinkerLeaveContent = exports.LinkerKickOutContent = exports.CohostTopic = exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser = exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo = exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag = exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo = exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra = exports.LinkerInviteContent_LinkerInviteMessageExtra = exports.LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest = exports.LinkerInviteContent_CohostABTestSetting_CohostABTestList = exports.LinkerInviteContent_CohostABTestSetting = exports.LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption = exports.LinkerInviteContent_PerceptionDialogInfo = exports.LinkerInviteContent_LinkmicUserInfo = exports.LinkerInviteContent_InviteTopHostInfo = exports.LinkerInviteContent_RtcExtInfoMapEntry = exports.LinkerInviteContent = exports.LinkerEnterContent = exports.LinkerCreateContent = exports.LinkerCloseContent = exports.ListUser = exports.LinkerCancelContent = exports.LinkerAcceptNoticeContent = exports.FanTicketRoomNoticeContent = exports.UserFanTicket = exports.PollUpdateVotesContent = exports.VoteUser = exports.PollOptionInfo = exports.PollEndContent = exports.PollStartContent = void 0;
    exports.BusinessContent_ListChangeBizContent_UserInfosEntry = exports.BusinessContent_ListChangeBizContent = exports.BusinessContent_PermitJoinGroupBizContent = exports.BusinessContent_CohostContent = exports.BusinessContent = exports.GroupChangeContent = exports.P2PGroupChangeContent = exports.CancelJoinGroupContent = exports.MigrationDetails = exports.PermitJoinGroupContent = exports.LeaveJoinGroupContent = exports.JoinDirectContent = exports.FinishChannelContent = exports.LeaveContent = exports.CancelInviteContent = exports.CancelApplyContent = exports.PosIdentity = exports.KickOutContent = exports.ReplyInviteContent = exports.PermitApplyContent = exports.ApplyContent = exports.InviteContent = exports.MultiLiveContent_KickOutBizContent = exports.MultiLiveContent_PermitBizContent = exports.MultiLiveContent_ReplyBizContent = exports.MultiLiveContent_InviteBizContent = exports.MultiLiveContent_JoinDirectBizContent = exports.MultiLiveContent_ApplyBizContent = exports.MultiLiveContent = exports.MicPositionData = exports.ContentPosition = exports.ListChangeContent = exports.CreateChannelContent = exports.RTCExtraInfo_RTCBitrateMap = exports.RTCExtraInfo_RTCVideoParam = exports.RTCExtraInfo_RTCLiveVideoParam = exports.RTCExtraInfo_RTCEngineConfig = exports.RTCExtraInfo_RTCOther = exports.RTCExtraInfo_RTCInfoExtra = exports.RTCExtraInfo_ByteRTCExtInfo = exports.RTCExtraInfo_RTCMixBase = exports.RTCExtraInfo = exports.GroupChannelUser = exports.GroupChannelAllUser = exports.DSLConfig = exports.GroupPlayer = exports.LinkPosition = exports.Position = exports.LinkLayerListUser = exports.AllListUser = void 0;
    exports.WebsocketParam = exports.Message = exports.WebcastPushFrame_HeadersEntry = exports.WebcastPushFrame = exports.HeartbeatMessage = exports.HighScoreControlCfg = exports.BattleUserArmy = exports.BattleUserArmies = exports.BattleTeamUserArmies = exports.BattleSetting = exports.BattleTeamUser = exports.GiftModeMeta = exports.PublicAreaMessageCommon_UserInteractionInfo = exports.PublicAreaMessageCommon_PortraitInfo = exports.PublicAreaMessageCommon_PortraitTag = exports.PublicAreaMessageCommon_UserMetrics = exports.PublicAreaMessageCommon_CreatorSuccessInfo = exports.PublicAreaMessageCommon_Topic = exports.PublicAreaMessageCommon_TagItem = exports.PublicAreaMessageCommon = exports.PublicAreaCommon = exports.Author = exports.FansClubData_UserBadge_IconsEntry = exports.FansClubData_UserBadge = exports.FansClubData = exports.FansClubMember_PreferDataEntry = exports.FansClubMember = exports.BorderInfo = exports.GradeIcon = exports.UserHonor = exports.FontStyle = exports.PrivilegeLogExtra = exports.JoinGroupContent = exports.BusinessContent_TopHostInfo = exports.BusinessContent_Hashtag = exports.BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo = exports.BusinessContent_JoinGroupMessageExtra_RivalExtra = exports.BusinessContent_JoinGroupMessageExtra = exports.BusinessContent_PerceptionFeedbackOption = exports.BusinessContent_PerceptionDialogInfo = exports.BusinessContent_Tag = exports.BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent = exports.BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent = exports.BusinessContent_JoinGroupBizContent_TagV2_UserInfo = exports.BusinessContent_JoinGroupBizContent_TagV2 = exports.BusinessContent_JoinGroupBizContent_RivalsGameTag = exports.BusinessContent_JoinGroupBizContent = exports.BusinessContent_CohostUserInfo_CohostStreamConfig = exports.BusinessContent_CohostUserInfo = exports.BusinessContent_ListChangeBizContent_VirtualWaitingUser = void 0;
    exports.WebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelation = exports.WebcastLinkMicBattle_TeamMatchCampaign = exports.WebcastLinkMicBattle_BattleCombosEntry = exports.WebcastLinkMicBattle_AnchorInfoEntry = exports.WebcastLinkMicBattle_ArmiesEntry = exports.WebcastLinkMicBattle_BattleResultEntry = exports.WebcastLinkMicBattle = exports.WebcastGiftMessage_SponsorshipInfo = exports.WebcastGiftMessage_FlyingMicResources_TransitionConfig = exports.WebcastGiftMessage_FlyingMicResources = exports.WebcastGiftMessage_LynxGiftExtra = exports.WebcastGiftMessage_AssetsModel_FaceRecognitionMeta = exports.WebcastGiftMessage_AssetsModel_VideoResource = exports.WebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSize = exports.WebcastGiftMessage_AssetsModel_LokiExtraContent = exports.WebcastGiftMessage_AssetsModel_ResourceModel = exports.WebcastGiftMessage_AssetsModel_AssetExtra = exports.WebcastGiftMessage_AssetsModel = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMeta = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResource = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSize = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtra = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox = exports.WebcastGiftMessage_GiftsBoxInfo = exports.WebcastGiftMessage_MatchInfo = exports.WebcastGiftMessage_GiftMonitorInfo = exports.WebcastGiftMessage_GiftTrayInfo = exports.WebcastGiftMessage_TextEffect_Detail = exports.WebcastGiftMessage_TextEffect = exports.WebcastGiftMessage_GiftIMPriority = exports.WebcastGiftMessage_InteractiveGiftInfo = exports.WebcastGiftMessage = exports.WebcastMemberMessage_EffectConfigBean = exports.WebcastMemberMessage_WaveAlgorithmData = exports.WebcastMemberMessage_EffectConfig = exports.WebcastMemberMessage_AdminPermissionsEntry = exports.WebcastMemberMessage = exports.WebcastSubEmote = exports.WebcastEmoteChatMessage = exports.EmoteUploadInfo = exports.WebcastChatMessage_CommentQualityScore = exports.WebcastChatMessage_UserIdentity = exports.WebcastChatMessage = exports.ImageModel_Content = exports.ImageModel = exports.WebcastRoomUserSeqMessage_Contributor = exports.WebcastRoomUserSeqMessage = void 0;
    exports.WebcastBarrageMessage_BarrageTypeFansLevelParam = exports.WebcastBarrageMessage_BarrageTypeUserGradeParam = exports.WebcastBarrageMessage_BarrageEvent_ParamsEntry = exports.WebcastBarrageMessage_BarrageEvent = exports.WebcastBarrageMessage = exports.UserImageBadgeImage = exports.UserImageBadge = exports.UserBadge = exports.UserBadgesAttributes = exports.ProfilePicture = exports.FollowInfo = exports.WebcastSubNotifyMessage_EventTracking = exports.WebcastSubNotifyMessage = exports.TreasureBoxData = exports.WebcastEnvelopeMessage_EnvelopeInfo = exports.WebcastEnvelopeMessage = exports.EmoteImage = exports.EmoteDetails = exports.WebcastHourlyRankMessage_RankContainer_RankingData2 = exports.WebcastHourlyRankMessage_RankContainer_RankingData = exports.WebcastHourlyRankMessage_RankContainer = exports.WebcastHourlyRankMessage = exports.RankItem = exports.SystemMessage = exports.WebcastLiveIntroMessage = exports.WebcastMessageEventDetails = exports.WebcastQuestionNewMessage_Question = exports.WebcastQuestionNewMessage = exports.LikeEffect = exports.SpecifiedDisplayText = exports.WebcastLikeMessage = exports.WebcastSocialMessage = exports.WebcastLinkMicArmiesGroup = exports.WebcastLinkMicArmiesItems = exports.WebcastLinkMicArmies_BattleItemsEntry = exports.WebcastLinkMicArmies = exports.WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTest = exports.WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList = exports.WebcastLinkMicBattle_BattleABTestSetting = exports.WebcastLinkMicBattle_BattleUserInfo_BattleRivalTag = exports.WebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfo = exports.WebcastLinkMicBattle_BattleUserInfo = exports.WebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategy = exports.WebcastLinkMicBattle_BattleDisplayConfig = exports.WebcastLinkMicBattle_BattleResult = exports.WebcastLinkMicBattle_BattleComboInfo = exports.WebcastLinkMicBattle_TeamUsersInfo = exports.WebcastLinkMicBattle_SupportedActionsWrapper = exports.WebcastLinkMicBattle_BattleInviteeGiftPermission = exports.WebcastLinkMicBattle_BattleTeamResult = void 0;
    exports.WebcastLinkMicMethod = exports.WebcastLinkMicFanTicketMethod = exports.WebcastLinkmicBattleTaskMessage_BattleRewardSettle = exports.WebcastLinkmicBattleTaskMessage_BattleTaskSettle = exports.WebcastLinkmicBattleTaskMessage_BattleTaskUpdate = exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide = exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfig = exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfig = exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriod = exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntry = exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig = exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart = exports.WebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElem = exports.WebcastLinkmicBattleTaskMessage_BattlePrompt = exports.WebcastLinkmicBattleTaskMessage = exports.WebcastLinkMicBattlePunishFinish = exports.WebcastRankTextMessage = exports.WebcastPollMessage_PollBasicInfo = exports.WebcastPollMessage_TemplateContent = exports.WebcastPollMessage = exports.WebcastRankUpdateMessage_RankUpdate = exports.WebcastRankUpdateMessage_RankTabInfo = exports.WebcastRankUpdateMessage_RankListTabInfo = exports.WebcastRankUpdateMessage_UnionAnimationInfo = exports.WebcastRankUpdateMessage = exports.WebcastInRoomBannerMessage_DataEntry = exports.WebcastInRoomBannerMessage = exports.WebcastImDeleteMessage = exports.WebcastGoalUpdateMessage_GoalPinInfo = exports.WebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfo = exports.WebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGift = exports.WebcastGoalUpdateMessage_LiveStreamSubGoal = exports.WebcastGoalUpdateMessage = exports.WebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOption = exports.WebcastControlMessage_PerceptionDialogInfo = exports.WebcastControlMessage_Extra = exports.WebcastControlMessage = exports.WebcastCaptionMessage_CaptionContent = exports.WebcastCaptionMessage = exports.WebcastRoomMessage = exports.BaseProtoMessage = exports.ProtoMessageFetchResult_WsParamsEntry = exports.ProtoMessageFetchResult = exports.WebcastBarrageMessage_RightLabel = exports.WebcastBarrageMessage_DisplayControl_ShowResult = exports.WebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntry = exports.WebcastBarrageMessage_DisplayControl = exports.WebcastBarrageMessage_BarrageTypeGiftGalleryParam = exports.WebcastBarrageMessage_AnimationData = exports.WebcastBarrageMessage_BarrageTypeSubscribeGiftParam = void 0;
    exports.WebcastImEnterRoomMessage = exports.WebcastBarrageMessageOld_TextPieceUser = exports.WebcastBarrageMessageOld_TextPiece = exports.WebcastBarrageMessageOld_Text = exports.WebcastBarrageMessageOld = exports.RoomVerifyMessage = exports.WebcastLinkLayerMessage = exports.WebcastLinkMessage = exports.WebcastRoomPinMessage = exports.WebcastOecLiveShoppingMessage_LiveShoppingDetails = exports.WebcastOecLiveShoppingMessage_LiveShoppingData = exports.WebcastOecLiveShoppingMessage = exports.WebcastMsgDetectMessage_TriggerCondition = exports.WebcastMsgDetectMessage_TimeInfo = exports.WebcastMsgDetectMessage = exports.WebcastUnauthorizedMemberMessage = void 0;
    var wire_1 = require_wire();
    exports.protobufPackage = "TikTok";
    var AuditStatus;
    (function(AuditStatus2) {
      AuditStatus2[AuditStatus2["AUDITSTATUSUNKNOWN"] = 0] = "AUDITSTATUSUNKNOWN";
      AuditStatus2[AuditStatus2["AUDITSTATUSPASS"] = 1] = "AUDITSTATUSPASS";
      AuditStatus2[AuditStatus2["AUDITSTATUSFAILED"] = 2] = "AUDITSTATUSFAILED";
      AuditStatus2[AuditStatus2["AUDITSTATUSREVIEWING"] = 3] = "AUDITSTATUSREVIEWING";
      AuditStatus2[AuditStatus2["AUDITSTATUSFORBIDDEN"] = 4] = "AUDITSTATUSFORBIDDEN";
      AuditStatus2[AuditStatus2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(AuditStatus = exports.AuditStatus || (exports.AuditStatus = {}));
    var EmoteType;
    (function(EmoteType2) {
      EmoteType2[EmoteType2["EMOTETYPENORMAL"] = 0] = "EMOTETYPENORMAL";
      EmoteType2[EmoteType2["EMOTETYPEWITHSTICKER"] = 1] = "EMOTETYPEWITHSTICKER";
      EmoteType2[EmoteType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(EmoteType = exports.EmoteType || (exports.EmoteType = {}));
    var ContentSource;
    (function(ContentSource2) {
      ContentSource2[ContentSource2["CONTENTSOURCEUNKNOWN"] = 0] = "CONTENTSOURCEUNKNOWN";
      ContentSource2[ContentSource2["CONTENTSOURCENORMAL"] = 1] = "CONTENTSOURCENORMAL";
      ContentSource2[ContentSource2["CONTENTSOURCECAMERA"] = 2] = "CONTENTSOURCECAMERA";
      ContentSource2[ContentSource2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(ContentSource = exports.ContentSource || (exports.ContentSource = {}));
    var EmotePrivateType;
    (function(EmotePrivateType2) {
      EmotePrivateType2[EmotePrivateType2["EMOTE_PRIVATE_TYPE_NORMAL"] = 0] = "EMOTE_PRIVATE_TYPE_NORMAL";
      EmotePrivateType2[EmotePrivateType2["EMOTE_PRIVATE_TYPE_SUB_WAVE"] = 1] = "EMOTE_PRIVATE_TYPE_SUB_WAVE";
      EmotePrivateType2[EmotePrivateType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(EmotePrivateType = exports.EmotePrivateType || (exports.EmotePrivateType = {}));
    var TextType;
    (function(TextType2) {
      TextType2[TextType2["DISPLAY_TEXT"] = 0] = "DISPLAY_TEXT";
      TextType2[TextType2["CONTENT"] = 1] = "CONTENT";
      TextType2[TextType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(TextType = exports.TextType || (exports.TextType = {}));
    var LinkmicApplierSortSetting;
    (function(LinkmicApplierSortSetting2) {
      LinkmicApplierSortSetting2[LinkmicApplierSortSetting2["LINKMIC_APPLIER_SORT_SETTING_NONE"] = 0] = "LINKMIC_APPLIER_SORT_SETTING_NONE";
      LinkmicApplierSortSetting2[LinkmicApplierSortSetting2["LINKMIC_APPLIER_SORT_SETTING_BY_GIFT_SCORE"] = 1] = "LINKMIC_APPLIER_SORT_SETTING_BY_GIFT_SCORE";
      LinkmicApplierSortSetting2[LinkmicApplierSortSetting2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(LinkmicApplierSortSetting = exports.LinkmicApplierSortSetting || (exports.LinkmicApplierSortSetting = {}));
    var HashtagNamespace;
    (function(HashtagNamespace2) {
      HashtagNamespace2[HashtagNamespace2["GLOBAL"] = 0] = "GLOBAL";
      HashtagNamespace2[HashtagNamespace2["GAMING"] = 1] = "GAMING";
      HashtagNamespace2[HashtagNamespace2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(HashtagNamespace = exports.HashtagNamespace || (exports.HashtagNamespace = {}));
    var AgreeStatus;
    (function(AgreeStatus2) {
      AgreeStatus2[AgreeStatus2["AGREE_UNKNOWN"] = 0] = "AGREE_UNKNOWN";
      AgreeStatus2[AgreeStatus2["AGREE"] = 1] = "AGREE";
      AgreeStatus2[AgreeStatus2["REJECT"] = 2] = "REJECT";
      AgreeStatus2[AgreeStatus2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(AgreeStatus = exports.AgreeStatus || (exports.AgreeStatus = {}));
    var KickoutReason;
    (function(KickoutReason2) {
      KickoutReason2[KickoutReason2["KICKOUT_REASON_UNKNOWN"] = 0] = "KICKOUT_REASON_UNKNOWN";
      KickoutReason2[KickoutReason2["KICKOUT_REASON_FIRST_FRAME_TIMEOUT"] = 1] = "KICKOUT_REASON_FIRST_FRAME_TIMEOUT";
      KickoutReason2[KickoutReason2["KICKOUT_REASON_BY_HOST"] = 2] = "KICKOUT_REASON_BY_HOST";
      KickoutReason2[KickoutReason2["KICKOUT_REASON_RTC_LOST_CONNECTION"] = 3] = "KICKOUT_REASON_RTC_LOST_CONNECTION";
      KickoutReason2[KickoutReason2["KICKOUT_REASON_BY_PUNISH"] = 4] = "KICKOUT_REASON_BY_PUNISH";
      KickoutReason2[KickoutReason2["KICKOUT_REASON_BY_ADMIN"] = 5] = "KICKOUT_REASON_BY_ADMIN";
      KickoutReason2[KickoutReason2["KICKOUT_REASON_HOST_REMOVE_ALL_GUESTS"] = 6] = "KICKOUT_REASON_HOST_REMOVE_ALL_GUESTS";
      KickoutReason2[KickoutReason2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(KickoutReason = exports.KickoutReason || (exports.KickoutReason = {}));
    var GroupStatus;
    (function(GroupStatus2) {
      GroupStatus2[GroupStatus2["GROUP_STATUS_UNKNOWN"] = 0] = "GROUP_STATUS_UNKNOWN";
      GroupStatus2[GroupStatus2["GROUP_STATUS_WAITING"] = 1] = "GROUP_STATUS_WAITING";
      GroupStatus2[GroupStatus2["GROUP_STATUS_LINKED"] = 3] = "GROUP_STATUS_LINKED";
      GroupStatus2[GroupStatus2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(GroupStatus = exports.GroupStatus || (exports.GroupStatus = {}));
    var BusinessCase;
    (function(BusinessCase2) {
      BusinessCase2[BusinessCase2["BUSINESS_NOT_SET"] = 0] = "BUSINESS_NOT_SET";
      BusinessCase2[BusinessCase2["APPLY_BIZ_CONTENT"] = 1] = "APPLY_BIZ_CONTENT";
      BusinessCase2[BusinessCase2["INVITE_BIZ_CONTENT"] = 2] = "INVITE_BIZ_CONTENT";
      BusinessCase2[BusinessCase2["REPLY_BIZ_CONTENT"] = 3] = "REPLY_BIZ_CONTENT";
      BusinessCase2[BusinessCase2["PERMIT_BIZ_CONTENT"] = 4] = "PERMIT_BIZ_CONTENT";
      BusinessCase2[BusinessCase2["JOIN_DIRECT_BIZ_CONTENT"] = 5] = "JOIN_DIRECT_BIZ_CONTENT";
      BusinessCase2[BusinessCase2["KICK_OUT_BIZ_CONTENT"] = 6] = "KICK_OUT_BIZ_CONTENT";
      BusinessCase2[BusinessCase2["LIST_CHANGE_BIZ_CONTENT"] = 11] = "LIST_CHANGE_BIZ_CONTENT";
      BusinessCase2[BusinessCase2["MULTI_LIVE_CONTENT"] = 100] = "MULTI_LIVE_CONTENT";
      BusinessCase2[BusinessCase2["COHOST_CONTENT"] = 200] = "COHOST_CONTENT";
      BusinessCase2[BusinessCase2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(BusinessCase = exports.BusinessCase || (exports.BusinessCase = {}));
    var ReplyStatus;
    (function(ReplyStatus2) {
      ReplyStatus2[ReplyStatus2["REPLY_STATUS_UNKNOWN"] = 0] = "REPLY_STATUS_UNKNOWN";
      ReplyStatus2[ReplyStatus2["REPLY_STATUS_AGREE"] = 1] = "REPLY_STATUS_AGREE";
      ReplyStatus2[ReplyStatus2["REPLY_STATUS_REFUSE_PERSONALLY"] = 2] = "REPLY_STATUS_REFUSE_PERSONALLY";
      ReplyStatus2[ReplyStatus2["REPLY_STATUS_REFUSE_TYPE_NOT_SUPPORT"] = 3] = "REPLY_STATUS_REFUSE_TYPE_NOT_SUPPORT";
      ReplyStatus2[ReplyStatus2["REPLY_STATUS_REFUSE_PROCESSING_INVITATION"] = 4] = "REPLY_STATUS_REFUSE_PROCESSING_INVITATION";
      ReplyStatus2[ReplyStatus2["REPLY_STATUS_REFUSE_BY_TIMEOUT"] = 5] = "REPLY_STATUS_REFUSE_BY_TIMEOUT";
      ReplyStatus2[ReplyStatus2["REPLY_STATUS_REFUSE_EXCEPTION"] = 6] = "REPLY_STATUS_REFUSE_EXCEPTION";
      ReplyStatus2[ReplyStatus2["REPLY_STATUS_REFUSE_SYSTEM_NOT_SUPPORTED"] = 7] = "REPLY_STATUS_REFUSE_SYSTEM_NOT_SUPPORTED";
      ReplyStatus2[ReplyStatus2["REPLY_STATUS_REFUSE_SUBTYPE_DIFFERENCE"] = 8] = "REPLY_STATUS_REFUSE_SUBTYPE_DIFFERENCE";
      ReplyStatus2[ReplyStatus2["REPLY_STATUS_REFUSE_IN_MICROOM"] = 9] = "REPLY_STATUS_REFUSE_IN_MICROOM";
      ReplyStatus2[ReplyStatus2["REPLY_STATUS_REFUSE_NOT_LOAD_PLUGIN"] = 10] = "REPLY_STATUS_REFUSE_NOT_LOAD_PLUGIN";
      ReplyStatus2[ReplyStatus2["REPLY_STATUS_REFUSE_IN_MULTI_GUEST"] = 11] = "REPLY_STATUS_REFUSE_IN_MULTI_GUEST";
      ReplyStatus2[ReplyStatus2["REPLY_STATUS_REFUSE_PAUSE_LIVE"] = 12] = "REPLY_STATUS_REFUSE_PAUSE_LIVE";
      ReplyStatus2[ReplyStatus2["REPLY_STATUS_REFUSE_OPEN_CAMERA_DIALOG_SHOWING"] = 13] = "REPLY_STATUS_REFUSE_OPEN_CAMERA_DIALOG_SHOWING";
      ReplyStatus2[ReplyStatus2["REPLY_STATUS_REFUSE_DRAW_GUESSING"] = 14] = "REPLY_STATUS_REFUSE_DRAW_GUESSING";
      ReplyStatus2[ReplyStatus2["REPLY_STATUS_REFUSE_RANDOM_MATCHING"] = 15] = "REPLY_STATUS_REFUSE_RANDOM_MATCHING";
      ReplyStatus2[ReplyStatus2["REPLY_STATUS_REFUSE_IN_MATCH_PROCESSING"] = 16] = "REPLY_STATUS_REFUSE_IN_MATCH_PROCESSING";
      ReplyStatus2[ReplyStatus2["REPLY_STATUS_REFUSE_IN_MICROOM_FOR_MULTI_COHOST"] = 17] = "REPLY_STATUS_REFUSE_IN_MICROOM_FOR_MULTI_COHOST";
      ReplyStatus2[ReplyStatus2["REPLY_STATUS_REFUSE_COHOST_FINISHED"] = 18] = "REPLY_STATUS_REFUSE_COHOST_FINISHED";
      ReplyStatus2[ReplyStatus2["REPLY_STATUS_REFUSE_NOT_CONNECTED"] = 19] = "REPLY_STATUS_REFUSE_NOT_CONNECTED";
      ReplyStatus2[ReplyStatus2["REPLY_STATUS_REFUSE_LINKMIC_FULL"] = 20] = "REPLY_STATUS_REFUSE_LINKMIC_FULL";
      ReplyStatus2[ReplyStatus2["REPLY_STATUS_REFUSE_ARC_INCOMPATIBLE"] = 21] = "REPLY_STATUS_REFUSE_ARC_INCOMPATIBLE";
      ReplyStatus2[ReplyStatus2["REPLY_STATUS_REFUSE_PROCESSING_OTHER_INVITE"] = 22] = "REPLY_STATUS_REFUSE_PROCESSING_OTHER_INVITE";
      ReplyStatus2[ReplyStatus2["REPLY_STATUS_REFUSE_PROCESSING_OTHER_APPLY"] = 23] = "REPLY_STATUS_REFUSE_PROCESSING_OTHER_APPLY";
      ReplyStatus2[ReplyStatus2["REPLY_STATUS_REFUSE_IN_ANCHOR_COHOST"] = 24] = "REPLY_STATUS_REFUSE_IN_ANCHOR_COHOST";
      ReplyStatus2[ReplyStatus2["REPLY_STATUS_REFUSE_TOPIC_PAIRING"] = 25] = "REPLY_STATUS_REFUSE_TOPIC_PAIRING";
      ReplyStatus2[ReplyStatus2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(ReplyStatus = exports.ReplyStatus || (exports.ReplyStatus = {}));
    var SubscribeType;
    (function(SubscribeType2) {
      SubscribeType2[SubscribeType2["SUBSCRIBETYPE_ONCE"] = 0] = "SUBSCRIBETYPE_ONCE";
      SubscribeType2[SubscribeType2["SUBSCRIBETYPE_AUTO"] = 1] = "SUBSCRIBETYPE_AUTO";
      SubscribeType2[SubscribeType2["SUBSCRIBETYPE_DEFAULT"] = 100] = "SUBSCRIBETYPE_DEFAULT";
      SubscribeType2[SubscribeType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(SubscribeType = exports.SubscribeType || (exports.SubscribeType = {}));
    var OldSubscribeStatus;
    (function(OldSubscribeStatus2) {
      OldSubscribeStatus2[OldSubscribeStatus2["OLD_SUBSCRIBE_STATUS_FIRST"] = 0] = "OLD_SUBSCRIBE_STATUS_FIRST";
      OldSubscribeStatus2[OldSubscribeStatus2["OLD_SUBSCRIBE_STATUS_RESUB"] = 1] = "OLD_SUBSCRIBE_STATUS_RESUB";
      OldSubscribeStatus2[OldSubscribeStatus2["OLD_SUBSCRIBE_STATUS_SUBIN_GRACE_PERIOD"] = 2] = "OLD_SUBSCRIBE_STATUS_SUBIN_GRACE_PERIOD";
      OldSubscribeStatus2[OldSubscribeStatus2["OLD_SUBSCRIBE_STATUS_SUB_NOTIN_GRACE_PERIOD"] = 3] = "OLD_SUBSCRIBE_STATUS_SUB_NOTIN_GRACE_PERIOD";
      OldSubscribeStatus2[OldSubscribeStatus2["OLD_SUBSCRIBE_STATUS_DEFAULT"] = 100] = "OLD_SUBSCRIBE_STATUS_DEFAULT";
      OldSubscribeStatus2[OldSubscribeStatus2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(OldSubscribeStatus = exports.OldSubscribeStatus || (exports.OldSubscribeStatus = {}));
    var SubscribingStatus;
    (function(SubscribingStatus2) {
      SubscribingStatus2[SubscribingStatus2["SUBSCRIBING_STATUS_UNKNOWN"] = 0] = "SUBSCRIBING_STATUS_UNKNOWN";
      SubscribingStatus2[SubscribingStatus2["SUBSCRIBING_STATUS_ONCE"] = 1] = "SUBSCRIBING_STATUS_ONCE";
      SubscribingStatus2[SubscribingStatus2["SUBSCRIBING_STATUS_CIRCLE"] = 2] = "SUBSCRIBING_STATUS_CIRCLE";
      SubscribingStatus2[SubscribingStatus2["SUBSCRIBING_STATUS_CIRCLE_CANCEL"] = 3] = "SUBSCRIBING_STATUS_CIRCLE_CANCEL";
      SubscribingStatus2[SubscribingStatus2["SUBSCRIBING_STATUS_REFUND"] = 4] = "SUBSCRIBING_STATUS_REFUND";
      SubscribingStatus2[SubscribingStatus2["SUBSCRIBING_STATUS_IN_GRACE_PERIOD"] = 5] = "SUBSCRIBING_STATUS_IN_GRACE_PERIOD";
      SubscribingStatus2[SubscribingStatus2["SUBSCRIBING_STATUS_NOT_IN_GRACE_PERIOD"] = 6] = "SUBSCRIBING_STATUS_NOT_IN_GRACE_PERIOD";
      SubscribingStatus2[SubscribingStatus2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(SubscribingStatus = exports.SubscribingStatus || (exports.SubscribingStatus = {}));
    var LinkmicStatus;
    (function(LinkmicStatus2) {
      LinkmicStatus2[LinkmicStatus2["Disable"] = 0] = "Disable";
      LinkmicStatus2[LinkmicStatus2["Enable"] = 1] = "Enable";
      LinkmicStatus2[LinkmicStatus2["Just_Following"] = 2] = "Just_Following";
      LinkmicStatus2[LinkmicStatus2["Multi_Linking"] = 3] = "Multi_Linking";
      LinkmicStatus2[LinkmicStatus2["Multi_Linking_Only_Following"] = 4] = "Multi_Linking_Only_Following";
      LinkmicStatus2[LinkmicStatus2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(LinkmicStatus = exports.LinkmicStatus || (exports.LinkmicStatus = {}));
    var MemberMessageAction;
    (function(MemberMessageAction2) {
      MemberMessageAction2[MemberMessageAction2["UNKNOWN"] = 0] = "UNKNOWN";
      MemberMessageAction2[MemberMessageAction2["JOINED"] = 1] = "JOINED";
      MemberMessageAction2[MemberMessageAction2["SUBSCRIBED"] = 3] = "SUBSCRIBED";
      MemberMessageAction2[MemberMessageAction2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(MemberMessageAction = exports.MemberMessageAction || (exports.MemberMessageAction = {}));
    var ControlAction;
    (function(ControlAction2) {
      ControlAction2[ControlAction2["CONTROL_ACTION_FALLBACK_UNKNOWN"] = 0] = "CONTROL_ACTION_FALLBACK_UNKNOWN";
      ControlAction2[ControlAction2["CONTROL_ACTION_STREAM_PAUSED"] = 1] = "CONTROL_ACTION_STREAM_PAUSED";
      ControlAction2[ControlAction2["CONTROL_ACTION_STREAM_UNPAUSED"] = 2] = "CONTROL_ACTION_STREAM_UNPAUSED";
      ControlAction2[ControlAction2["CONTROL_ACTION_STREAM_ENDED"] = 3] = "CONTROL_ACTION_STREAM_ENDED";
      ControlAction2[ControlAction2["CONTROL_ACTION_STREAM_SUSPENDED"] = 4] = "CONTROL_ACTION_STREAM_SUSPENDED";
      ControlAction2[ControlAction2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(ControlAction = exports.ControlAction || (exports.ControlAction = {}));
    var LinkLayerMessageType;
    (function(LinkLayerMessageType2) {
      LinkLayerMessageType2[LinkLayerMessageType2["Linker_Unknown"] = 0] = "Linker_Unknown";
      LinkLayerMessageType2[LinkLayerMessageType2["Linker_Create"] = 1] = "Linker_Create";
      LinkLayerMessageType2[LinkLayerMessageType2["Linker_Invite"] = 2] = "Linker_Invite";
      LinkLayerMessageType2[LinkLayerMessageType2["Linker_Apply"] = 3] = "Linker_Apply";
      LinkLayerMessageType2[LinkLayerMessageType2["Linker_Permit"] = 4] = "Linker_Permit";
      LinkLayerMessageType2[LinkLayerMessageType2["Linker_Reply"] = 5] = "Linker_Reply";
      LinkLayerMessageType2[LinkLayerMessageType2["Linker_Kick_Out"] = 6] = "Linker_Kick_Out";
      LinkLayerMessageType2[LinkLayerMessageType2["Linker_Cancel_Apply"] = 7] = "Linker_Cancel_Apply";
      LinkLayerMessageType2[LinkLayerMessageType2["Linker_Cancel_Invite"] = 8] = "Linker_Cancel_Invite";
      LinkLayerMessageType2[LinkLayerMessageType2["Linker_Leave"] = 9] = "Linker_Leave";
      LinkLayerMessageType2[LinkLayerMessageType2["Linker_Finish"] = 10] = "Linker_Finish";
      LinkLayerMessageType2[LinkLayerMessageType2["Linker_List_Change"] = 11] = "Linker_List_Change";
      LinkLayerMessageType2[LinkLayerMessageType2["Linker_Join_Direct"] = 12] = "Linker_Join_Direct";
      LinkLayerMessageType2[LinkLayerMessageType2["Linker_Join_Group"] = 13] = "Linker_Join_Group";
      LinkLayerMessageType2[LinkLayerMessageType2["Linker_Permit_Group"] = 14] = "Linker_Permit_Group";
      LinkLayerMessageType2[LinkLayerMessageType2["Linker_Cancel_Group"] = 15] = "Linker_Cancel_Group";
      LinkLayerMessageType2[LinkLayerMessageType2["Linker_Leave_Group"] = 16] = "Linker_Leave_Group";
      LinkLayerMessageType2[LinkLayerMessageType2["Linker_P2P_Group_Change"] = 17] = "Linker_P2P_Group_Change";
      LinkLayerMessageType2[LinkLayerMessageType2["Linker_Group_Change"] = 18] = "Linker_Group_Change";
      LinkLayerMessageType2[LinkLayerMessageType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(LinkLayerMessageType = exports.LinkLayerMessageType || (exports.LinkLayerMessageType = {}));
    var BarrageType;
    (function(BarrageType2) {
      BarrageType2[BarrageType2["BarrageType_Unknown"] = 0] = "BarrageType_Unknown";
      BarrageType2[BarrageType2["EComOrdering"] = 1] = "EComOrdering";
      BarrageType2[BarrageType2["EComBuying"] = 2] = "EComBuying";
      BarrageType2[BarrageType2["Normal"] = 3] = "Normal";
      BarrageType2[BarrageType2["Subscribe"] = 4] = "Subscribe";
      BarrageType2[BarrageType2["EventView"] = 5] = "EventView";
      BarrageType2[BarrageType2["EventRegistered"] = 6] = "EventRegistered";
      BarrageType2[BarrageType2["SubscribeGift"] = 7] = "SubscribeGift";
      BarrageType2[BarrageType2["UserUpgrade"] = 8] = "UserUpgrade";
      BarrageType2[BarrageType2["GradeUserEntranceNotification"] = 9] = "GradeUserEntranceNotification";
      BarrageType2[BarrageType2["FansLevelUpgrade"] = 10] = "FansLevelUpgrade";
      BarrageType2[BarrageType2["FansLevelEntrance"] = 11] = "FansLevelEntrance";
      BarrageType2[BarrageType2["GamePartnership"] = 12] = "GamePartnership";
      BarrageType2[BarrageType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(BarrageType = exports.BarrageType || (exports.BarrageType = {}));
    var EnvelopeBusinessType;
    (function(EnvelopeBusinessType2) {
      EnvelopeBusinessType2[EnvelopeBusinessType2["BusinessTypeUnknown"] = 0] = "BusinessTypeUnknown";
      EnvelopeBusinessType2[EnvelopeBusinessType2["BusinessTypeUserDiamond"] = 1] = "BusinessTypeUserDiamond";
      EnvelopeBusinessType2[EnvelopeBusinessType2["BusinessTypePlatformDiamond"] = 2] = "BusinessTypePlatformDiamond";
      EnvelopeBusinessType2[EnvelopeBusinessType2["BusinessTypePlatformShell"] = 3] = "BusinessTypePlatformShell";
      EnvelopeBusinessType2[EnvelopeBusinessType2["BusinessTypePortal"] = 4] = "BusinessTypePortal";
      EnvelopeBusinessType2[EnvelopeBusinessType2["BusinessTypePlatformMerch"] = 5] = "BusinessTypePlatformMerch";
      EnvelopeBusinessType2[EnvelopeBusinessType2["BusinessTypeEoYDiamond"] = 6] = "BusinessTypeEoYDiamond";
      EnvelopeBusinessType2[EnvelopeBusinessType2["BusinessTypeFanClubGtM"] = 7] = "BusinessTypeFanClubGtM";
      EnvelopeBusinessType2[EnvelopeBusinessType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(EnvelopeBusinessType = exports.EnvelopeBusinessType || (exports.EnvelopeBusinessType = {}));
    var EnvelopeFollowShowStatus;
    (function(EnvelopeFollowShowStatus2) {
      EnvelopeFollowShowStatus2[EnvelopeFollowShowStatus2["ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_SHOW_UNKNOWN"] = 0] = "ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_SHOW_UNKNOWN";
      EnvelopeFollowShowStatus2[EnvelopeFollowShowStatus2["ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_SHOW"] = 1] = "ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_SHOW";
      EnvelopeFollowShowStatus2[EnvelopeFollowShowStatus2["ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_NOT_SHOW"] = 2] = "ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_NOT_SHOW";
      EnvelopeFollowShowStatus2[EnvelopeFollowShowStatus2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(EnvelopeFollowShowStatus = exports.EnvelopeFollowShowStatus || (exports.EnvelopeFollowShowStatus = {}));
    var EnvelopeDisplay;
    (function(EnvelopeDisplay2) {
      EnvelopeDisplay2[EnvelopeDisplay2["ENVELOPE_DISPLAY_UNKNOWN"] = 0] = "ENVELOPE_DISPLAY_UNKNOWN";
      EnvelopeDisplay2[EnvelopeDisplay2["ENVELOPE_DISPLAY_NEW"] = 1] = "ENVELOPE_DISPLAY_NEW";
      EnvelopeDisplay2[EnvelopeDisplay2["ENVELOPE_DISPLAY_HIDE"] = 2] = "ENVELOPE_DISPLAY_HIDE";
      EnvelopeDisplay2[EnvelopeDisplay2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(EnvelopeDisplay = exports.EnvelopeDisplay || (exports.EnvelopeDisplay = {}));
    var CommonContentCase;
    (function(CommonContentCase2) {
      CommonContentCase2[CommonContentCase2["COMMON_CONTENT_NOT_SET"] = 0] = "COMMON_CONTENT_NOT_SET";
      CommonContentCase2[CommonContentCase2["CREATE_CHANNEL_CONTENT"] = 100] = "CREATE_CHANNEL_CONTENT";
      CommonContentCase2[CommonContentCase2["LIST_CHANGE_CONTENT"] = 102] = "LIST_CHANGE_CONTENT";
      CommonContentCase2[CommonContentCase2["INVITE_CONTENT"] = 103] = "INVITE_CONTENT";
      CommonContentCase2[CommonContentCase2["APPLY_CONTENT"] = 104] = "APPLY_CONTENT";
      CommonContentCase2[CommonContentCase2["PERMIT_APPLY_CONTENT"] = 105] = "PERMIT_APPLY_CONTENT";
      CommonContentCase2[CommonContentCase2["REPLY_INVITE_CONTENT"] = 106] = "REPLY_INVITE_CONTENT";
      CommonContentCase2[CommonContentCase2["KICK_OUT_CONTENT"] = 107] = "KICK_OUT_CONTENT";
      CommonContentCase2[CommonContentCase2["CANCEL_APPLY_CONTENT"] = 108] = "CANCEL_APPLY_CONTENT";
      CommonContentCase2[CommonContentCase2["CANCEL_INVITE_CONTENT"] = 109] = "CANCEL_INVITE_CONTENT";
      CommonContentCase2[CommonContentCase2["LEAVE_CONTENT"] = 110] = "LEAVE_CONTENT";
      CommonContentCase2[CommonContentCase2["FINISH_CONTENT"] = 111] = "FINISH_CONTENT";
      CommonContentCase2[CommonContentCase2["JOIN_DIRECT_CONTENT"] = 112] = "JOIN_DIRECT_CONTENT";
      CommonContentCase2[CommonContentCase2["JOIN_GROUP_CONTENT"] = 113] = "JOIN_GROUP_CONTENT";
      CommonContentCase2[CommonContentCase2["PERMIT_GROUP_CONTENT"] = 114] = "PERMIT_GROUP_CONTENT";
      CommonContentCase2[CommonContentCase2["CANCEL_GROUP_CONTENT"] = 115] = "CANCEL_GROUP_CONTENT";
      CommonContentCase2[CommonContentCase2["LEAVE_GROUP_CONTENT"] = 116] = "LEAVE_GROUP_CONTENT";
      CommonContentCase2[CommonContentCase2["P2P_GROUP_CHANGE_CONTENT"] = 117] = "P2P_GROUP_CHANGE_CONTENT";
      CommonContentCase2[CommonContentCase2["GROUP_CHANGE_CONTENT"] = 118] = "GROUP_CHANGE_CONTENT";
      CommonContentCase2[CommonContentCase2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(CommonContentCase = exports.CommonContentCase || (exports.CommonContentCase = {}));
    var LinkMessageType;
    (function(LinkMessageType2) {
      LinkMessageType2[LinkMessageType2["TYPE_LINKER_UNKNOWN"] = 0] = "TYPE_LINKER_UNKNOWN";
      LinkMessageType2[LinkMessageType2["TYPE_LINKER_CREATE"] = 1] = "TYPE_LINKER_CREATE";
      LinkMessageType2[LinkMessageType2["TYPE_LINKER_CLOSE"] = 2] = "TYPE_LINKER_CLOSE";
      LinkMessageType2[LinkMessageType2["TYPE_LINKER_INVITE"] = 3] = "TYPE_LINKER_INVITE";
      LinkMessageType2[LinkMessageType2["TYPE_LINKER_APPLY"] = 4] = "TYPE_LINKER_APPLY";
      LinkMessageType2[LinkMessageType2["TYPE_LINKER_REPLY"] = 5] = "TYPE_LINKER_REPLY";
      LinkMessageType2[LinkMessageType2["TYPE_LINKER_ENTER"] = 6] = "TYPE_LINKER_ENTER";
      LinkMessageType2[LinkMessageType2["TYPE_LINKER_LEAVE"] = 7] = "TYPE_LINKER_LEAVE";
      LinkMessageType2[LinkMessageType2["TYPE_LINKER_PERMIT"] = 8] = "TYPE_LINKER_PERMIT";
      LinkMessageType2[LinkMessageType2["TYPE_LINKER_CANCEL_INVITE"] = 9] = "TYPE_LINKER_CANCEL_INVITE";
      LinkMessageType2[LinkMessageType2["TYPE_LINKER_WAITING_LIST_CHANGE"] = 10] = "TYPE_LINKER_WAITING_LIST_CHANGE";
      LinkMessageType2[LinkMessageType2["TYPE_LINKER_LINKED_LIST_CHANGE"] = 11] = "TYPE_LINKER_LINKED_LIST_CHANGE";
      LinkMessageType2[LinkMessageType2["TYPE_LINKER_UPDATE_USER"] = 12] = "TYPE_LINKER_UPDATE_USER";
      LinkMessageType2[LinkMessageType2["TYPE_LINKER_KICK_OUT"] = 13] = "TYPE_LINKER_KICK_OUT";
      LinkMessageType2[LinkMessageType2["TYPE_LINKER_CANCEL_APPLY"] = 14] = "TYPE_LINKER_CANCEL_APPLY";
      LinkMessageType2[LinkMessageType2["TYPE_LINKER_MUTE"] = 15] = "TYPE_LINKER_MUTE";
      LinkMessageType2[LinkMessageType2["TYPE_LINKER_MATCH"] = 16] = "TYPE_LINKER_MATCH";
      LinkMessageType2[LinkMessageType2["TYPE_LINKER_UPDATE_USER_SETTING"] = 17] = "TYPE_LINKER_UPDATE_USER_SETTING";
      LinkMessageType2[LinkMessageType2["TYPE_LINKER_MIC_IDX_UPDATE"] = 18] = "TYPE_LINKER_MIC_IDX_UPDATE";
      LinkMessageType2[LinkMessageType2["TYPE_LINKER_LEAVE_V2"] = 19] = "TYPE_LINKER_LEAVE_V2";
      LinkMessageType2[LinkMessageType2["TYPE_LINKER_WAITING_LIST_CHANGE_V2"] = 20] = "TYPE_LINKER_WAITING_LIST_CHANGE_V2";
      LinkMessageType2[LinkMessageType2["TYPE_LINKER_LINKED_LIST_CHANGE_V2"] = 21] = "TYPE_LINKER_LINKED_LIST_CHANGE_V2";
      LinkMessageType2[LinkMessageType2["TYPE_LINKER_COHOST_LIST_CHANGE"] = 22] = "TYPE_LINKER_COHOST_LIST_CHANGE";
      LinkMessageType2[LinkMessageType2["TYPE_LINKER_MEDIA_CHANGE"] = 23] = "TYPE_LINKER_MEDIA_CHANGE";
      LinkMessageType2[LinkMessageType2["TYPE_LINKER_ACCEPT_NOTICE"] = 24] = "TYPE_LINKER_ACCEPT_NOTICE";
      LinkMessageType2[LinkMessageType2["TYPE_LINKER_SYS_KICK_OUT"] = 101] = "TYPE_LINKER_SYS_KICK_OUT";
      LinkMessageType2[LinkMessageType2["TYPE_LINKMIC_USER_TOAST"] = 102] = "TYPE_LINKMIC_USER_TOAST";
      LinkMessageType2[LinkMessageType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(LinkMessageType = exports.LinkMessageType || (exports.LinkMessageType = {}));
    var MessageType;
    (function(MessageType2) {
      MessageType2[MessageType2["MESSAGE_TYPE_SUB_SUCCESS"] = 0] = "MESSAGE_TYPE_SUB_SUCCESS";
      MessageType2[MessageType2["MESSAGE_TYPE_ANCHOR_REMINDER"] = 1] = "MESSAGE_TYPE_ANCHOR_REMINDER";
      MessageType2[MessageType2["MESSAGE_TYPE_ENTER_ROOM_EXPIRE_SOON"] = 2] = "MESSAGE_TYPE_ENTER_ROOM_EXPIRE_SOON";
      MessageType2[MessageType2["MESSAGE_TYPE_SUB_GOAL_CREATE_TO_ANCHOR"] = 3] = "MESSAGE_TYPE_SUB_GOAL_CREATE_TO_ANCHOR";
      MessageType2[MessageType2["MESSAGE_TYPE_SUB_GOAL_COMPLETE_TO_AUDIENCE"] = 4] = "MESSAGE_TYPE_SUB_GOAL_COMPLETE_TO_AUDIENCE";
      MessageType2[MessageType2["MESSAGE_TYPE_SUB_GOAL_COMPLETE_TO_ANCHOR"] = 5] = "MESSAGE_TYPE_SUB_GOAL_COMPLETE_TO_ANCHOR";
      MessageType2[MessageType2["MESSAGE_TYPE_SUB_GIFT_TIK_TOK_2_USER_NOTICE"] = 6] = "MESSAGE_TYPE_SUB_GIFT_TIK_TOK_2_USER_NOTICE";
      MessageType2[MessageType2["MESSAGE_TYPE_SUB_GIFT_TIK_TOK_2_ANCHOR_NOTICE"] = 7] = "MESSAGE_TYPE_SUB_GIFT_TIK_TOK_2_ANCHOR_NOTICE";
      MessageType2[MessageType2["MESSAGE_TYPE_SUB_GIFT_T_RECEIVES_END_NOTICE"] = 8] = "MESSAGE_TYPE_SUB_GIFT_T_RECEIVES_END_NOTICE";
      MessageType2[MessageType2["MESSAGE_TYPE_SUB_GIFTS_END_SUCCEED_ROOM_MESSAGE"] = 9] = "MESSAGE_TYPE_SUB_GIFTS_END_SUCCEED_ROOM_MESSAGE";
      MessageType2[MessageType2["MESSAGE_TYPE_SUB_GIFTS_END_SUCCEED_ANCHOR_NOTICE"] = 10] = "MESSAGE_TYPE_SUB_GIFTS_END_SUCCEED_ANCHOR_NOTICE";
      MessageType2[MessageType2["MESSAGE_TYPE_SUB_GIFT_LOW_VERSION_UPGRADE_NOTICE"] = 11] = "MESSAGE_TYPE_SUB_GIFT_LOW_VERSION_UPGRADE_NOTICE";
      MessageType2[MessageType2["MESSAGE_TYPE_SUB_GIFT_USER_BUY_AU_TH_NOTICE"] = 12] = "MESSAGE_TYPE_SUB_GIFT_USER_BUY_AU_TH_NOTICE";
      MessageType2[MessageType2["MESSAGE_TYPE_SUB_COMMON_TEXT_NOTICE"] = 13] = "MESSAGE_TYPE_SUB_COMMON_TEXT_NOTICE";
      MessageType2[MessageType2["MESSAGE_TYPE_SUB_MODERATOR_PIN_PERK"] = 14] = "MESSAGE_TYPE_SUB_MODERATOR_PIN_PERK";
      MessageType2[MessageType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(MessageType = exports.MessageType || (exports.MessageType = {}));
    var Scene;
    (function(Scene2) {
      Scene2[Scene2["SCENE_UNKNOWN"] = 0] = "SCENE_UNKNOWN";
      Scene2[Scene2["SCENE_CO_HOST"] = 2] = "SCENE_CO_HOST";
      Scene2[Scene2["SCENE_MULTI_LIVE"] = 4] = "SCENE_MULTI_LIVE";
      Scene2[Scene2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(Scene = exports.Scene || (exports.Scene = {}));
    var RewardCondition;
    (function(RewardCondition2) {
      RewardCondition2[RewardCondition2["REWARD_CONDITION_SUBSCRIPTION"] = 0] = "REWARD_CONDITION_SUBSCRIPTION";
      RewardCondition2[RewardCondition2["REWARD_CONDITION_SUB_WAVE_CUSTOM"] = 1] = "REWARD_CONDITION_SUB_WAVE_CUSTOM";
      RewardCondition2[RewardCondition2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(RewardCondition = exports.RewardCondition || (exports.RewardCondition = {}));
    var UserEmoteUploadSource;
    (function(UserEmoteUploadSource2) {
      UserEmoteUploadSource2[UserEmoteUploadSource2["USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_ANCHOR"] = 0] = "USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_ANCHOR";
      UserEmoteUploadSource2[UserEmoteUploadSource2["USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_SUBSCRIBER"] = 1] = "USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_SUBSCRIBER";
      UserEmoteUploadSource2[UserEmoteUploadSource2["USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_MODERATOR"] = 2] = "USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_MODERATOR";
      UserEmoteUploadSource2[UserEmoteUploadSource2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(UserEmoteUploadSource = exports.UserEmoteUploadSource || (exports.UserEmoteUploadSource = {}));
    var EmoteScene;
    (function(EmoteScene2) {
      EmoteScene2[EmoteScene2["EMOTE_SCENE_SUBSCRIPTION"] = 0] = "EMOTE_SCENE_SUBSCRIPTION";
      EmoteScene2[EmoteScene2["EMOTE_SCENE_GAME"] = 1] = "EMOTE_SCENE_GAME";
      EmoteScene2[EmoteScene2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(EmoteScene = exports.EmoteScene || (exports.EmoteScene = {}));
    var PunishTypeId;
    (function(PunishTypeId2) {
      PunishTypeId2[PunishTypeId2["PUNISH_TYPE_IDUN_KNOWN"] = 0] = "PUNISH_TYPE_IDUN_KNOWN";
      PunishTypeId2[PunishTypeId2["PUNISH_TYPE_ID_BAN_LINK_MIC"] = 9] = "PUNISH_TYPE_ID_BAN_LINK_MIC";
      PunishTypeId2[PunishTypeId2["PUNISH_TYPE_ID_BAN_GAME_PARTNERSHIP"] = 25] = "PUNISH_TYPE_ID_BAN_GAME_PARTNERSHIP";
      PunishTypeId2[PunishTypeId2["PUNISH_TYPE_ID_REMOVE_GAME_PARTNERSHIP"] = 26] = "PUNISH_TYPE_ID_REMOVE_GAME_PARTNERSHIP";
      PunishTypeId2[PunishTypeId2["PUNISH_TYPE_ID_BANCO_HOST_LINK_MIC"] = 55] = "PUNISH_TYPE_ID_BANCO_HOST_LINK_MIC";
      PunishTypeId2[PunishTypeId2["PUNISH_TYPE_ID_AUTHORITY_LIMIT_MATCH"] = 57] = "PUNISH_TYPE_ID_AUTHORITY_LIMIT_MATCH";
      PunishTypeId2[PunishTypeId2["PUNISH_TYPE_ID_BAN_VOICE_CHAT"] = 59] = "PUNISH_TYPE_ID_BAN_VOICE_CHAT";
      PunishTypeId2[PunishTypeId2["PUNISH_TYPE_ID_BAN_LIVE_GOAL"] = 64] = "PUNISH_TYPE_ID_BAN_LIVE_GOAL";
      PunishTypeId2[PunishTypeId2["PUNISH_TYPE_ID_VIEWER_LIMIT"] = 70] = "PUNISH_TYPE_ID_VIEWER_LIMIT";
      PunishTypeId2[PunishTypeId2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(PunishTypeId = exports.PunishTypeId || (exports.PunishTypeId = {}));
    var MultiplierType;
    (function(MultiplierType2) {
      MultiplierType2[MultiplierType2["MULTIPLIER_TYPE_UNSPECIFIED"] = 0] = "MULTIPLIER_TYPE_UNSPECIFIED";
      MultiplierType2[MultiplierType2["MULTIPLIER_TYPE_CRITICAL_STRIKE"] = 1] = "MULTIPLIER_TYPE_CRITICAL_STRIKE";
      MultiplierType2[MultiplierType2["MULTIPLIER_TYPE_TOP_2"] = 2] = "MULTIPLIER_TYPE_TOP_2";
      MultiplierType2[MultiplierType2["MULTIPLIER_TYPE_TOP_3"] = 3] = "MULTIPLIER_TYPE_TOP_3";
      MultiplierType2[MultiplierType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(MultiplierType = exports.MultiplierType || (exports.MultiplierType = {}));
    var LinkmicGiftExpressionStrategy;
    (function(LinkmicGiftExpressionStrategy2) {
      LinkmicGiftExpressionStrategy2[LinkmicGiftExpressionStrategy2["LINKMIC_GIFT_EXPRESSION_STRATEGY_CONTROL_V_1"] = 0] = "LINKMIC_GIFT_EXPRESSION_STRATEGY_CONTROL_V_1";
      LinkmicGiftExpressionStrategy2[LinkmicGiftExpressionStrategy2["LINKMIC_GIFT_EXPRESSION_STRATEGY_EXPERIMENT_V_1"] = 1] = "LINKMIC_GIFT_EXPRESSION_STRATEGY_EXPERIMENT_V_1";
      LinkmicGiftExpressionStrategy2[LinkmicGiftExpressionStrategy2["LINKMIC_GIFT_EXPRESSION_STRATEGY_EXPERIMENT_V_2"] = 2] = "LINKMIC_GIFT_EXPRESSION_STRATEGY_EXPERIMENT_V_2";
      LinkmicGiftExpressionStrategy2[LinkmicGiftExpressionStrategy2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(LinkmicGiftExpressionStrategy = exports.LinkmicGiftExpressionStrategy || (exports.LinkmicGiftExpressionStrategy = {}));
    var GiftMessageVersion;
    (function(GiftMessageVersion2) {
      GiftMessageVersion2[GiftMessageVersion2["GIFT_MESSAGE_VERSION_0"] = 0] = "GIFT_MESSAGE_VERSION_0";
      GiftMessageVersion2[GiftMessageVersion2["GIFT_MESSAGE_VERSION_1"] = 1] = "GIFT_MESSAGE_VERSION_1";
      GiftMessageVersion2[GiftMessageVersion2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(GiftMessageVersion = exports.GiftMessageVersion || (exports.GiftMessageVersion = {}));
    var TagType;
    (function(TagType2) {
      TagType2[TagType2["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_UNKNOWN"] = 0] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_UNKNOWN";
      TagType2[TagType2["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_USER_GRADE"] = 1] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_USER_GRADE";
      TagType2[TagType2["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FANS_LEVEL"] = 2] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FANS_LEVEL";
      TagType2[TagType2["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_WATCH_ME_DAYS_AGO"] = 3] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_WATCH_ME_DAYS_AGO";
      TagType2[TagType2["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_CUSTOM"] = 4] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_CUSTOM";
      TagType2[TagType2["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_TITLE_GIFT"] = 5] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_TITLE_GIFT";
      TagType2[TagType2["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FIRST_JOINED_TEAM"] = 6] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FIRST_JOINED_TEAM";
      TagType2[TagType2["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_PAY_ACCOMPANY_DAYS"] = 7] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_PAY_ACCOMPANY_DAYS";
      TagType2[TagType2["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_SPONSOR_GIFT_LAST_ROOM"] = 8] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_SPONSOR_GIFT_LAST_ROOM";
      TagType2[TagType2["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_MATCH_MVP_LAST_ROOM"] = 9] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_MATCH_MVP_LAST_ROOM";
      TagType2[TagType2["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_LARGE_AMOUNT_GIFT_LAST_ROOM"] = 10] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_LARGE_AMOUNT_GIFT_LAST_ROOM";
      TagType2[TagType2["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_COMMENT_LAST_ROOM"] = 11] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_COMMENT_LAST_ROOM";
      TagType2[TagType2["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_TITLED_GIFT"] = 12] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_TITLED_GIFT";
      TagType2[TagType2["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_MEET_ANNIVERSARY"] = 13] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_MEET_ANNIVERSARY";
      TagType2[TagType2["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FANS_SLEEP"] = 14] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FANS_SLEEP";
      TagType2[TagType2["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_NOT_SEND_HEART_ME"] = 15] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_NOT_SEND_HEART_ME";
      TagType2[TagType2["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_NOT_JOIN_TEAM"] = 16] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_NOT_JOIN_TEAM";
      TagType2[TagType2["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FIRST_WATCH_LIVE"] = 17] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FIRST_WATCH_LIVE";
      TagType2[TagType2["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_COMMENT"] = 18] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_COMMENT";
      TagType2[TagType2["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_GIFT_TIMES"] = 19] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_GIFT_TIMES";
      TagType2[TagType2["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_WATCH_LIVE_DURATION"] = 20] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_WATCH_LIVE_DURATION";
      TagType2[TagType2["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_GIFT"] = 21] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_GIFT";
      TagType2[TagType2["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_LIVE_CONTRIBUTION_TOP"] = 22] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_LIVE_CONTRIBUTION_TOP";
      TagType2[TagType2["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_JUST_UPGRADE"] = 28] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_JUST_UPGRADE";
      TagType2[TagType2["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_WATCH_DURATION"] = 29] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_WATCH_DURATION";
      TagType2[TagType2["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_COMMENT_NUM"] = 30] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_COMMENT_NUM";
      TagType2[TagType2["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_GIFT_SENT_NUM"] = 31] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_GIFT_SENT_NUM";
      TagType2[TagType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(TagType = exports.TagType || (exports.TagType = {}));
    var TopicActionType;
    (function(TopicActionType2) {
      TopicActionType2[TopicActionType2["TOPIC_ACTION_TYPE_UNKNOWN"] = 0] = "TOPIC_ACTION_TYPE_UNKNOWN";
      TopicActionType2[TopicActionType2["TOPIC_ACTION_TYPE_FOLLOW"] = 1] = "TOPIC_ACTION_TYPE_FOLLOW";
      TopicActionType2[TopicActionType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(TopicActionType = exports.TopicActionType || (exports.TopicActionType = {}));
    var UserMetricsType;
    (function(UserMetricsType2) {
      UserMetricsType2[UserMetricsType2["USER_METRICS_TYPE_UNKNOWN"] = 0] = "USER_METRICS_TYPE_UNKNOWN";
      UserMetricsType2[UserMetricsType2["USER_METRICS_TYPE_GRADE"] = 1] = "USER_METRICS_TYPE_GRADE";
      UserMetricsType2[UserMetricsType2["USER_METRICS_TYPE_SUBSCRIBE"] = 2] = "USER_METRICS_TYPE_SUBSCRIBE";
      UserMetricsType2[UserMetricsType2["USER_METRICS_TYPE_FOLLOW"] = 3] = "USER_METRICS_TYPE_FOLLOW";
      UserMetricsType2[UserMetricsType2["USER_METRICS_TYPE_FANS_CLUB"] = 4] = "USER_METRICS_TYPE_FANS_CLUB";
      UserMetricsType2[UserMetricsType2["USER_METRICS_TYPE_TOP_VIEWER"] = 5] = "USER_METRICS_TYPE_TOP_VIEWER";
      UserMetricsType2[UserMetricsType2["USER_METRICS_TYPE_GIFT"] = 6] = "USER_METRICS_TYPE_GIFT";
      UserMetricsType2[UserMetricsType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(UserMetricsType = exports.UserMetricsType || (exports.UserMetricsType = {}));
    var GiftMessageIgnoreConfig;
    (function(GiftMessageIgnoreConfig2) {
      GiftMessageIgnoreConfig2[GiftMessageIgnoreConfig2["GIFT_MESSAGE_IGNORE_CONFIG_NOT_IGNORE"] = 0] = "GIFT_MESSAGE_IGNORE_CONFIG_NOT_IGNORE";
      GiftMessageIgnoreConfig2[GiftMessageIgnoreConfig2["GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_TRAY"] = 1] = "GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_TRAY";
      GiftMessageIgnoreConfig2[GiftMessageIgnoreConfig2["GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_PS_M"] = 2] = "GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_PS_M";
      GiftMessageIgnoreConfig2[GiftMessageIgnoreConfig2["GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_TRAY_AND_PS_M"] = 3] = "GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_TRAY_AND_PS_M";
      GiftMessageIgnoreConfig2[GiftMessageIgnoreConfig2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(GiftMessageIgnoreConfig = exports.GiftMessageIgnoreConfig || (exports.GiftMessageIgnoreConfig = {}));
    var HorizontalOnclickTriggerType;
    (function(HorizontalOnclickTriggerType2) {
      HorizontalOnclickTriggerType2[HorizontalOnclickTriggerType2["HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_UNKNOWN"] = 0] = "HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_UNKNOWN";
      HorizontalOnclickTriggerType2[HorizontalOnclickTriggerType2["HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_LEFT"] = 1] = "HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_LEFT";
      HorizontalOnclickTriggerType2[HorizontalOnclickTriggerType2["HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_MIDDLE"] = 2] = "HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_MIDDLE";
      HorizontalOnclickTriggerType2[HorizontalOnclickTriggerType2["HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_RIGHT"] = 3] = "HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_RIGHT";
      HorizontalOnclickTriggerType2[HorizontalOnclickTriggerType2["HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_ALL_AREA"] = 4] = "HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_ALL_AREA";
      HorizontalOnclickTriggerType2[HorizontalOnclickTriggerType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(HorizontalOnclickTriggerType = exports.HorizontalOnclickTriggerType || (exports.HorizontalOnclickTriggerType = {}));
    var ShowType;
    (function(ShowType2) {
      ShowType2[ShowType2["SHOW_TYPE_NORMAL"] = 0] = "SHOW_TYPE_NORMAL";
      ShowType2[ShowType2["SHOW_TYPE_FADE_IN_OUT"] = 1] = "SHOW_TYPE_FADE_IN_OUT";
      ShowType2[ShowType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(ShowType = exports.ShowType || (exports.ShowType = {}));
    var RenderType;
    (function(RenderType2) {
      RenderType2[RenderType2["RENDER_TYPE_NATIVE"] = 0] = "RENDER_TYPE_NATIVE";
      RenderType2[RenderType2["RENDER_TYPE_HYBRID"] = 1] = "RENDER_TYPE_HYBRID";
      RenderType2[RenderType2["RENDER_TYPE_ALPHA"] = 2] = "RENDER_TYPE_ALPHA";
      RenderType2[RenderType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(RenderType = exports.RenderType || (exports.RenderType = {}));
    var IconDisplayType;
    (function(IconDisplayType2) {
      IconDisplayType2[IconDisplayType2["ICON_DISPLAY_TYPE_IMAGE"] = 0] = "ICON_DISPLAY_TYPE_IMAGE";
      IconDisplayType2[IconDisplayType2["ICON_DISPLAY_TYPE_BADGE"] = 1] = "ICON_DISPLAY_TYPE_BADGE";
      IconDisplayType2[IconDisplayType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(IconDisplayType = exports.IconDisplayType || (exports.IconDisplayType = {}));
    var CommentTag;
    (function(CommentTag2) {
      CommentTag2[CommentTag2["COMMENT_TAG_NORMAL"] = 0] = "COMMENT_TAG_NORMAL";
      CommentTag2[CommentTag2["COMMENT_TAG_CANDIDATE"] = 1] = "COMMENT_TAG_CANDIDATE";
      CommentTag2[CommentTag2["COMMENT_TAG_OVERAGE"] = 2] = "COMMENT_TAG_OVERAGE";
      CommentTag2[CommentTag2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(CommentTag = exports.CommentTag || (exports.CommentTag = {}));
    var PerceptionDialogIconType;
    (function(PerceptionDialogIconType2) {
      PerceptionDialogIconType2[PerceptionDialogIconType2["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_NONE"] = 0] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_NONE";
      PerceptionDialogIconType2[PerceptionDialogIconType2["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_WARNING"] = 1] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_WARNING";
      PerceptionDialogIconType2[PerceptionDialogIconType2["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LINK_MIC"] = 2] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LINK_MIC";
      PerceptionDialogIconType2[PerceptionDialogIconType2["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GUEST_LINK_MIC"] = 3] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GUEST_LINK_MIC";
      PerceptionDialogIconType2[PerceptionDialogIconType2["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE"] = 4] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE";
      PerceptionDialogIconType2[PerceptionDialogIconType2["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_TREASURE_BOX"] = 5] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_TREASURE_BOX";
      PerceptionDialogIconType2[PerceptionDialogIconType2["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MUTE"] = 6] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MUTE";
      PerceptionDialogIconType2[PerceptionDialogIconType2["PERCEPTION_DIALOG_ICON_TYPE_ICON_GAMEPAD_ACCESS_REVOKED"] = 7] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_GAMEPAD_ACCESS_REVOKED";
      PerceptionDialogIconType2[PerceptionDialogIconType2["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_SINGLE_ROOM"] = 8] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_SINGLE_ROOM";
      PerceptionDialogIconType2[PerceptionDialogIconType2["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_ALL_ROOM"] = 9] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_ALL_ROOM";
      PerceptionDialogIconType2[PerceptionDialogIconType2["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_GREEN_SCREEN"] = 10] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_GREEN_SCREEN";
      PerceptionDialogIconType2[PerceptionDialogIconType2["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GIFT"] = 11] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GIFT";
      PerceptionDialogIconType2[PerceptionDialogIconType2["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_APPEAL_SUCCESS"] = 12] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_APPEAL_SUCCESS";
      PerceptionDialogIconType2[PerceptionDialogIconType2["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MATCH"] = 13] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MATCH";
      PerceptionDialogIconType2[PerceptionDialogIconType2["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE_GOAL"] = 14] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE_GOAL";
      PerceptionDialogIconType2[PerceptionDialogIconType2["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_SUBSCRIPTION"] = 15] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_SUBSCRIPTION";
      PerceptionDialogIconType2[PerceptionDialogIconType2["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_STAR_COMMENT"] = 16] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_STAR_COMMENT";
      PerceptionDialogIconType2[PerceptionDialogIconType2["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_RANKING"] = 17] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_RANKING";
      PerceptionDialogIconType2[PerceptionDialogIconType2["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_COMMON"] = 18] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_COMMON";
      PerceptionDialogIconType2[PerceptionDialogIconType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(PerceptionDialogIconType = exports.PerceptionDialogIconType || (exports.PerceptionDialogIconType = {}));
    var GoalMessageSource;
    (function(GoalMessageSource2) {
      GoalMessageSource2[GoalMessageSource2["GOAL_MESSAGE_SOURCE_UNKNOWN"] = 0] = "GOAL_MESSAGE_SOURCE_UNKNOWN";
      GoalMessageSource2[GoalMessageSource2["GOAL_MESSAGE_SOURCE_COMMIT"] = 1] = "GOAL_MESSAGE_SOURCE_COMMIT";
      GoalMessageSource2[GoalMessageSource2["GOAL_MESSAGE_SOURCE_PROGRESS_UPDATE"] = 2] = "GOAL_MESSAGE_SOURCE_PROGRESS_UPDATE";
      GoalMessageSource2[GoalMessageSource2["GOAL_MESSAGE_SOURCE_PIN"] = 3] = "GOAL_MESSAGE_SOURCE_PIN";
      GoalMessageSource2[GoalMessageSource2["GOAL_MESSAGE_SOURCE_UNPIN"] = 4] = "GOAL_MESSAGE_SOURCE_UNPIN";
      GoalMessageSource2[GoalMessageSource2["GOAL_MESSAGE_SOURCE_REVIEW_CALLBACK"] = 5] = "GOAL_MESSAGE_SOURCE_REVIEW_CALLBACK";
      GoalMessageSource2[GoalMessageSource2["GOAL_MESSAGE_SOURCE_SUSPEND"] = 6] = "GOAL_MESSAGE_SOURCE_SUSPEND";
      GoalMessageSource2[GoalMessageSource2["GOAL_MESSAGE_SOURCE_CHALLENGE_PROMPT"] = 7] = "GOAL_MESSAGE_SOURCE_CHALLENGE_PROMPT";
      GoalMessageSource2[GoalMessageSource2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(GoalMessageSource = exports.GoalMessageSource || (exports.GoalMessageSource = {}));
    var ExhibitionType;
    (function(ExhibitionType2) {
      ExhibitionType2[ExhibitionType2["EXHIBITION_TYPE_DEFAULT"] = 0] = "EXHIBITION_TYPE_DEFAULT";
      ExhibitionType2[ExhibitionType2["EXHIBITION_TYPE_FOLD"] = 1] = "EXHIBITION_TYPE_FOLD";
      ExhibitionType2[ExhibitionType2["EXHIBITION_TYPE_PUBLIC_SCREEN"] = 2] = "EXHIBITION_TYPE_PUBLIC_SCREEN";
      ExhibitionType2[ExhibitionType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(ExhibitionType = exports.ExhibitionType || (exports.ExhibitionType = {}));
    var GiftSource;
    (function(GiftSource2) {
      GiftSource2[GiftSource2["GIFT_SOURCE_UNKNOWN"] = 0] = "GIFT_SOURCE_UNKNOWN";
      GiftSource2[GiftSource2["GIFT_SOURCE_PLATFORM"] = 1] = "GIFT_SOURCE_PLATFORM";
      GiftSource2[GiftSource2["GIFT_SOURCE_USER_BUY_RANDOM"] = 2] = "GIFT_SOURCE_USER_BUY_RANDOM";
      GiftSource2[GiftSource2["GIFT_SOURCE_USER_BUY_SPECIFIC"] = 3] = "GIFT_SOURCE_USER_BUY_SPECIFIC";
      GiftSource2[GiftSource2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(GiftSource = exports.GiftSource || (exports.GiftSource = {}));
    var MessageDisplayStyle;
    (function(MessageDisplayStyle2) {
      MessageDisplayStyle2[MessageDisplayStyle2["MESSAGE_DISPLAY_STYLE_DEFAULT"] = 0] = "MESSAGE_DISPLAY_STYLE_DEFAULT";
      MessageDisplayStyle2[MessageDisplayStyle2["MESSAGE_DISPLAY_STYLE_POPUP"] = 1] = "MESSAGE_DISPLAY_STYLE_POPUP";
      MessageDisplayStyle2[MessageDisplayStyle2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(MessageDisplayStyle = exports.MessageDisplayStyle || (exports.MessageDisplayStyle = {}));
    var ProfitRankType;
    (function(ProfitRankType2) {
      ProfitRankType2[ProfitRankType2["PROFIT_RANK_TYPE_TYPE_HOURLY_RANK"] = 0] = "PROFIT_RANK_TYPE_TYPE_HOURLY_RANK";
      ProfitRankType2[ProfitRankType2["PROFIT_RANK_TYPE_TYPE_WEEKLY_RANK"] = 1] = "PROFIT_RANK_TYPE_TYPE_WEEKLY_RANK";
      ProfitRankType2[ProfitRankType2["PROFIT_RANK_TYPE_TYPE_HOURLY_STAR_RANK"] = 2] = "PROFIT_RANK_TYPE_TYPE_HOURLY_STAR_RANK";
      ProfitRankType2[ProfitRankType2["PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK_ACTIVITY"] = 3] = "PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK_ACTIVITY";
      ProfitRankType2[ProfitRankType2["PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK"] = 4] = "PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK";
      ProfitRankType2[ProfitRankType2["PROFIT_RANK_TYPE_TYPE_WEEKLY_ROOKIE"] = 5] = "PROFIT_RANK_TYPE_TYPE_WEEKLY_ROOKIE";
      ProfitRankType2[ProfitRankType2["PROFIT_RANK_TYPE_TYPE_E_COMMERCE_WEEKLY"] = 6] = "PROFIT_RANK_TYPE_TYPE_E_COMMERCE_WEEKLY";
      ProfitRankType2[ProfitRankType2["PROFIT_RANK_TYPE_TYPE_E_COMMERCE_DAILY"] = 7] = "PROFIT_RANK_TYPE_TYPE_E_COMMERCE_DAILY";
      ProfitRankType2[ProfitRankType2["PROFIT_RANK_TYPE_TYPE_DAILY_RANK"] = 8] = "PROFIT_RANK_TYPE_TYPE_DAILY_RANK";
      ProfitRankType2[ProfitRankType2["PROFIT_RANK_TYPE_TYPE_FIRST_GIFT_RANK"] = 9] = "PROFIT_RANK_TYPE_TYPE_FIRST_GIFT_RANK";
      ProfitRankType2[ProfitRankType2["PROFIT_RANK_TYPE_TYPE_GAME_RANK"] = 10] = "PROFIT_RANK_TYPE_TYPE_GAME_RANK";
      ProfitRankType2[ProfitRankType2["PROFIT_RANK_TYPE_TYPE_DAILY_GAME"] = 11] = "PROFIT_RANK_TYPE_TYPE_DAILY_GAME";
      ProfitRankType2[ProfitRankType2["PROFIT_RANK_TYPE_TYPE_HALL_OF_FAME_RANK"] = 12] = "PROFIT_RANK_TYPE_TYPE_HALL_OF_FAME_RANK";
      ProfitRankType2[ProfitRankType2["PROFIT_RANK_TYPE_TYPE_RANK_LEAGUE"] = 13] = "PROFIT_RANK_TYPE_TYPE_RANK_LEAGUE";
      ProfitRankType2[ProfitRankType2["PROFIT_RANK_TYPE_DAILY_ROOKIE"] = 14] = "PROFIT_RANK_TYPE_DAILY_ROOKIE";
      ProfitRankType2[ProfitRankType2["PROFIT_RANK_TYPE_TYPE_TEAM_RANK"] = 15] = "PROFIT_RANK_TYPE_TYPE_TEAM_RANK";
      ProfitRankType2[ProfitRankType2["PROFIT_RANK_TYPE_TYPE_CLASS_RANK"] = 16] = "PROFIT_RANK_TYPE_TYPE_CLASS_RANK";
      ProfitRankType2[ProfitRankType2["PROFIT_RANK_TYPE_TYPE_DAILY_GAME_PUB_G"] = 20] = "PROFIT_RANK_TYPE_TYPE_DAILY_GAME_PUB_G";
      ProfitRankType2[ProfitRankType2["PROFIT_RANK_TYPE_TYPE_DAILY_GAME_MLB_B"] = 21] = "PROFIT_RANK_TYPE_TYPE_DAILY_GAME_MLB_B";
      ProfitRankType2[ProfitRankType2["PROFIT_RANK_TYPE_TYPE_DAILY_GAME_FREE_FIRE"] = 22] = "PROFIT_RANK_TYPE_TYPE_DAILY_GAME_FREE_FIRE";
      ProfitRankType2[ProfitRankType2["PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_ONE"] = 23] = "PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_ONE";
      ProfitRankType2[ProfitRankType2["PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_TWO"] = 24] = "PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_TWO";
      ProfitRankType2[ProfitRankType2["PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_THREE"] = 25] = "PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_THREE";
      ProfitRankType2[ProfitRankType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(ProfitRankType = exports.ProfitRankType || (exports.ProfitRankType = {}));
    var UnionAnimationInfoType;
    (function(UnionAnimationInfoType2) {
      UnionAnimationInfoType2[UnionAnimationInfoType2["UNION_ANIMATION_INFO_TYPE_NO_UNION_ANIMATION"] = 0] = "UNION_ANIMATION_INFO_TYPE_NO_UNION_ANIMATION";
      UnionAnimationInfoType2[UnionAnimationInfoType2["UNION_ANIMATION_INFO_TYPE_LOOP"] = 1] = "UNION_ANIMATION_INFO_TYPE_LOOP";
      UnionAnimationInfoType2[UnionAnimationInfoType2["UNION_ANIMATION_INFO_TYPE_LOCK"] = 2] = "UNION_ANIMATION_INFO_TYPE_LOCK";
      UnionAnimationInfoType2[UnionAnimationInfoType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(UnionAnimationInfoType = exports.UnionAnimationInfoType || (exports.UnionAnimationInfoType = {}));
    var DisplayStyle;
    (function(DisplayStyle2) {
      DisplayStyle2[DisplayStyle2["DISPLAY_STYLE_NORMAL"] = 0] = "DISPLAY_STYLE_NORMAL";
      DisplayStyle2[DisplayStyle2["DISPLAY_STYLE_STAY"] = 1] = "DISPLAY_STYLE_STAY";
      DisplayStyle2[DisplayStyle2["DISPLAY_STYLE_CHAT"] = 2] = "DISPLAY_STYLE_CHAT";
      DisplayStyle2[DisplayStyle2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(DisplayStyle = exports.DisplayStyle || (exports.DisplayStyle = {}));
    var HitABStatus;
    (function(HitABStatus2) {
      HitABStatus2[HitABStatus2["HIT_A_B_STATUS_HIT_AB_STATUS_NO_HIT"] = 0] = "HIT_A_B_STATUS_HIT_AB_STATUS_NO_HIT";
      HitABStatus2[HitABStatus2["HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_EXTERNAL_LINK_NEW_TEXT"] = 1] = "HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_EXTERNAL_LINK_NEW_TEXT";
      HitABStatus2[HitABStatus2["HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_RE_POST_NEW_TEXT"] = 2] = "HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_RE_POST_NEW_TEXT";
      HitABStatus2[HitABStatus2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(HitABStatus = exports.HitABStatus || (exports.HitABStatus = {}));
    var PollKind;
    (function(PollKind2) {
      PollKind2[PollKind2["POLL_KIND_NORMAL"] = 0] = "POLL_KIND_NORMAL";
      PollKind2[PollKind2["POLL_KIND_GIFT"] = 1] = "POLL_KIND_GIFT";
      PollKind2[PollKind2["POLL_KIND_CUSTOMIZABLE"] = 2] = "POLL_KIND_CUSTOMIZABLE";
      PollKind2[PollKind2["POLL_KIND_CUSTOMIZABLE_GIFT"] = 3] = "POLL_KIND_CUSTOMIZABLE_GIFT";
      PollKind2[PollKind2["POLL_KIND_QUICK_GIFT"] = 4] = "POLL_KIND_QUICK_GIFT";
      PollKind2[PollKind2["POLL_KIND_EMOTE"] = 5] = "POLL_KIND_EMOTE";
      PollKind2[PollKind2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(PollKind = exports.PollKind || (exports.PollKind = {}));
    var PollTemplateStatus;
    (function(PollTemplateStatus2) {
      PollTemplateStatus2[PollTemplateStatus2["POLL_TEMPLATE_STATUS_TO_BE_REVIEWED"] = 0] = "POLL_TEMPLATE_STATUS_TO_BE_REVIEWED";
      PollTemplateStatus2[PollTemplateStatus2["POLL_TEMPLATE_STATUS_UNDER_REVIEW"] = 1] = "POLL_TEMPLATE_STATUS_UNDER_REVIEW";
      PollTemplateStatus2[PollTemplateStatus2["POLL_TEMPLATE_STATUS_REVIEWED"] = 2] = "POLL_TEMPLATE_STATUS_REVIEWED";
      PollTemplateStatus2[PollTemplateStatus2["POLL_TEMPLATE_STATUS_REFUSED"] = 3] = "POLL_TEMPLATE_STATUS_REFUSED";
      PollTemplateStatus2[PollTemplateStatus2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(PollTemplateStatus = exports.PollTemplateStatus || (exports.PollTemplateStatus = {}));
    var PollAppealStatus;
    (function(PollAppealStatus2) {
      PollAppealStatus2[PollAppealStatus2["POLL_APPEAL_STATUS_UNKNOWN"] = 0] = "POLL_APPEAL_STATUS_UNKNOWN";
      PollAppealStatus2[PollAppealStatus2["POLL_APPEAL_STATUS_PASS"] = 1] = "POLL_APPEAL_STATUS_PASS";
      PollAppealStatus2[PollAppealStatus2["POLL_APPEAL_STATUS_FAIL"] = 2] = "POLL_APPEAL_STATUS_FAIL";
      PollAppealStatus2[PollAppealStatus2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(PollAppealStatus = exports.PollAppealStatus || (exports.PollAppealStatus = {}));
    var RankTestMessageScene;
    (function(RankTestMessageScene2) {
      RankTestMessageScene2[RankTestMessageScene2["RANK_TEST_MESSAGE_SCENE_UNKNOWN"] = 0] = "RANK_TEST_MESSAGE_SCENE_UNKNOWN";
      RankTestMessageScene2[RankTestMessageScene2["RANK_TEST_MESSAGE_SCENE_ONLINE_AUDIENCE_TOP_N_UPDATE_PUBLIC_SCREEN"] = 1] = "RANK_TEST_MESSAGE_SCENE_ONLINE_AUDIENCE_TOP_N_UPDATE_PUBLIC_SCREEN";
      RankTestMessageScene2[RankTestMessageScene2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(RankTestMessageScene = exports.RankTestMessageScene || (exports.RankTestMessageScene = {}));
    var TriggerReason;
    (function(TriggerReason2) {
      TriggerReason2[TriggerReason2["TRIGGER_REASON_UNKNOWN"] = 0] = "TRIGGER_REASON_UNKNOWN";
      TriggerReason2[TriggerReason2["TRIGGER_REASON_SCORE_UPDATE"] = 1] = "TRIGGER_REASON_SCORE_UPDATE";
      TriggerReason2[TriggerReason2["TRIGGER_REASON_BATTLE_END"] = 2] = "TRIGGER_REASON_BATTLE_END";
      TriggerReason2[TriggerReason2["TRIGGER_REASON_OPT_OUT_UPDATE"] = 3] = "TRIGGER_REASON_OPT_OUT_UPDATE";
      TriggerReason2[TriggerReason2["TRIGGER_REASON_KEEP_ALIVE"] = 4] = "TRIGGER_REASON_KEEP_ALIVE";
      TriggerReason2[TriggerReason2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(TriggerReason = exports.TriggerReason || (exports.TriggerReason = {}));
    var Reason;
    (function(Reason2) {
      Reason2[Reason2["REASON_TIME_UP"] = 0] = "REASON_TIME_UP";
      Reason2[Reason2["REASON_CUT_SHORT"] = 1] = "REASON_CUT_SHORT";
      Reason2[Reason2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(Reason = exports.Reason || (exports.Reason = {}));
    var BattleTaskMessageType;
    (function(BattleTaskMessageType2) {
      BattleTaskMessageType2[BattleTaskMessageType2["BATTLE_TASK_MESSAGE_TYPE_START"] = 0] = "BATTLE_TASK_MESSAGE_TYPE_START";
      BattleTaskMessageType2[BattleTaskMessageType2["BATTLE_TASK_MESSAGE_TYPE_TASK_UPDATE"] = 1] = "BATTLE_TASK_MESSAGE_TYPE_TASK_UPDATE";
      BattleTaskMessageType2[BattleTaskMessageType2["BATTLE_TASK_MESSAGE_TYPE_TASK_SETTLE"] = 2] = "BATTLE_TASK_MESSAGE_TYPE_TASK_SETTLE";
      BattleTaskMessageType2[BattleTaskMessageType2["BATTLE_TASK_MESSAGE_TYPE_REWARD_SETTLE"] = 3] = "BATTLE_TASK_MESSAGE_TYPE_REWARD_SETTLE";
      BattleTaskMessageType2[BattleTaskMessageType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(BattleTaskMessageType = exports.BattleTaskMessageType || (exports.BattleTaskMessageType = {}));
    var RewardStatus;
    (function(RewardStatus2) {
      RewardStatus2[RewardStatus2["REWARD_STATUS_SUCCEED"] = 0] = "REWARD_STATUS_SUCCEED";
      RewardStatus2[RewardStatus2["REWARD_STATUS_FAILED"] = 1] = "REWARD_STATUS_FAILED";
      RewardStatus2[RewardStatus2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(RewardStatus = exports.RewardStatus || (exports.RewardStatus = {}));
    var BattleAction;
    (function(BattleAction2) {
      BattleAction2[BattleAction2["BATTLE_ACTION_UNKNOWN"] = 0] = "BATTLE_ACTION_UNKNOWN";
      BattleAction2[BattleAction2["BATTLE_ACTION_INVITE"] = 1] = "BATTLE_ACTION_INVITE";
      BattleAction2[BattleAction2["BATTLE_ACTION_REJECT"] = 2] = "BATTLE_ACTION_REJECT";
      BattleAction2[BattleAction2["BATTLE_ACTION_CANCEL"] = 3] = "BATTLE_ACTION_CANCEL";
      BattleAction2[BattleAction2["BATTLE_ACTION_OPEN"] = 4] = "BATTLE_ACTION_OPEN";
      BattleAction2[BattleAction2["BATTLE_ACTION_FINISH"] = 5] = "BATTLE_ACTION_FINISH";
      BattleAction2[BattleAction2["BATTLE_ACTION_CUT_SHORT"] = 6] = "BATTLE_ACTION_CUT_SHORT";
      BattleAction2[BattleAction2["BATTLE_ACTION_ACCEPT"] = 7] = "BATTLE_ACTION_ACCEPT";
      BattleAction2[BattleAction2["BATTLE_ACTION_QUIT_APPLY"] = 8] = "BATTLE_ACTION_QUIT_APPLY";
      BattleAction2[BattleAction2["BATTLE_ACTION_DECLINE_QUIT"] = 9] = "BATTLE_ACTION_DECLINE_QUIT";
      BattleAction2[BattleAction2["BATTLE_ACTION_DECLINE_OFF_QUIT"] = 10] = "BATTLE_ACTION_DECLINE_OFF_QUIT";
      BattleAction2[BattleAction2["BATTLE_ACTION_LEAVE_LINK_MIC"] = 11] = "BATTLE_ACTION_LEAVE_LINK_MIC";
      BattleAction2[BattleAction2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(BattleAction = exports.BattleAction || (exports.BattleAction = {}));
    var Result;
    (function(Result2) {
      Result2[Result2["RESULT_WIN"] = 0] = "RESULT_WIN";
      Result2[Result2["RESULT_LOSE"] = 1] = "RESULT_LOSE";
      Result2[Result2["RESULT_DRAW"] = 2] = "RESULT_DRAW";
      Result2[Result2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(Result = exports.Result || (exports.Result = {}));
    var GiftPermissionType;
    (function(GiftPermissionType2) {
      GiftPermissionType2[GiftPermissionType2["GIFT_PERMISSION_TYPE_UNKNOWN_TYPE"] = 0] = "GIFT_PERMISSION_TYPE_UNKNOWN_TYPE";
      GiftPermissionType2[GiftPermissionType2["GIFT_PERMISSION_TYPE_NO_GIFT_PERMISSION"] = 1] = "GIFT_PERMISSION_TYPE_NO_GIFT_PERMISSION";
      GiftPermissionType2[GiftPermissionType2["GIFT_PERMISSION_TYPE_ANCHOR_CLOSE"] = 2] = "GIFT_PERMISSION_TYPE_ANCHOR_CLOSE";
      GiftPermissionType2[GiftPermissionType2["GIFT_PERMISSION_TYPE_HAS_GIFT_PERMISSION"] = 3] = "GIFT_PERMISSION_TYPE_HAS_GIFT_PERMISSION";
      GiftPermissionType2[GiftPermissionType2["GIFT_PERMISSION_TYPE_ANCHOR_BANNED"] = 4] = "GIFT_PERMISSION_TYPE_ANCHOR_BANNED";
      GiftPermissionType2[GiftPermissionType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(GiftPermissionType = exports.GiftPermissionType || (exports.GiftPermissionType = {}));
    var BattleABTestType;
    (function(BattleABTestType2) {
      BattleABTestType2[BattleABTestType2["BATTLE_A_B_TEST_TYPE_UNKNOWN_AB_TEST_TYPE"] = 0] = "BATTLE_A_B_TEST_TYPE_UNKNOWN_AB_TEST_TYPE";
      BattleABTestType2[BattleABTestType2["BATTLE_A_B_TEST_TYPE_MEANWHILE_INVITE"] = 1] = "BATTLE_A_B_TEST_TYPE_MEANWHILE_INVITE";
      BattleABTestType2[BattleABTestType2["BATTLE_A_B_TEST_TYPE_SPECIFIED_GIFT"] = 2] = "BATTLE_A_B_TEST_TYPE_SPECIFIED_GIFT";
      BattleABTestType2[BattleABTestType2["BATTLE_A_B_TEST_TYPE_RT_C_MESSAGE_CHANNEL"] = 3] = "BATTLE_A_B_TEST_TYPE_RT_C_MESSAGE_CHANNEL";
      BattleABTestType2[BattleABTestType2["BATTLE_A_B_TEST_TYPE_CONNECTION_TIME_OUT"] = 4] = "BATTLE_A_B_TEST_TYPE_CONNECTION_TIME_OUT";
      BattleABTestType2[BattleABTestType2["BATTLE_A_B_TEST_TYPE_REMATCH_SKIP_TEAMMATE"] = 5] = "BATTLE_A_B_TEST_TYPE_REMATCH_SKIP_TEAMMATE";
      BattleABTestType2[BattleABTestType2["BATTLE_A_B_TEST_TYPE_OPT_INVITEE_4048"] = 6] = "BATTLE_A_B_TEST_TYPE_OPT_INVITEE_4048";
      BattleABTestType2[BattleABTestType2["BATTLE_A_B_TEST_TYPE_BATTLE_AB_TEST_TYPE_TIME_CALIBRATE"] = 7] = "BATTLE_A_B_TEST_TYPE_BATTLE_AB_TEST_TYPE_TIME_CALIBRATE";
      BattleABTestType2[BattleABTestType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(BattleABTestType = exports.BattleABTestType || (exports.BattleABTestType = {}));
    var PlayScene;
    (function(PlayScene2) {
      PlayScene2[PlayScene2["PLAY_SCENE_UNKNOWN"] = 0] = "PLAY_SCENE_UNKNOWN";
      PlayScene2[PlayScene2["PLAY_SCENE_COUNTDOWN_FOR_ALL"] = 1] = "PLAY_SCENE_COUNTDOWN_FOR_ALL";
      PlayScene2[PlayScene2["PLAY_SCENE_COUNTDOWN_FOR_SINGLE"] = 2] = "PLAY_SCENE_COUNTDOWN_FOR_SINGLE";
      PlayScene2[PlayScene2["PLAY_SCENE_LIVE_SHOW"] = 3] = "PLAY_SCENE_LIVE_SHOW";
      PlayScene2[PlayScene2["PLAY_SCENE_AIG_C"] = 4] = "PLAY_SCENE_AIG_C";
      PlayScene2[PlayScene2["PLAY_SCENE_KARAOKE"] = 5] = "PLAY_SCENE_KARAOKE";
      PlayScene2[PlayScene2["PLAY_SCENE_DRAW_GUESS"] = 6] = "PLAY_SCENE_DRAW_GUESS";
      PlayScene2[PlayScene2["PLAY_SCENE_ENLARGE_GRID"] = 7] = "PLAY_SCENE_ENLARGE_GRID";
      PlayScene2[PlayScene2["PLAY_SCENE_GIFT_PRIORITY_LINK"] = 8] = "PLAY_SCENE_GIFT_PRIORITY_LINK";
      PlayScene2[PlayScene2["PLAY_SCENE_GIFT_THRESHOLD_LINK"] = 9] = "PLAY_SCENE_GIFT_THRESHOLD_LINK";
      PlayScene2[PlayScene2["PLAY_SCENE_NOTICE_BOARD"] = 10] = "PLAY_SCENE_NOTICE_BOARD";
      PlayScene2[PlayScene2["PLAY_SCENE_PLAY_BOOK"] = 11] = "PLAY_SCENE_PLAY_BOOK";
      PlayScene2[PlayScene2["PLAY_SCENE_GUEST_SHOWDOWN"] = 12] = "PLAY_SCENE_GUEST_SHOWDOWN";
      PlayScene2[PlayScene2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(PlayScene = exports.PlayScene || (exports.PlayScene = {}));
    var LinkType;
    (function(LinkType2) {
      LinkType2[LinkType2["LINK_TYPE_TYPE_UNKNOWN"] = 0] = "LINK_TYPE_TYPE_UNKNOWN";
      LinkType2[LinkType2["LINK_TYPE_TYPE_VIDEO"] = 1] = "LINK_TYPE_TYPE_VIDEO";
      LinkType2[LinkType2["LINK_TYPE_TYPE_AUDIO"] = 2] = "LINK_TYPE_TYPE_AUDIO";
      LinkType2[LinkType2["LINK_TYPE_TYPE_VIRTUAL"] = 3] = "LINK_TYPE_TYPE_VIRTUAL";
      LinkType2[LinkType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(LinkType = exports.LinkType || (exports.LinkType = {}));
    var LinkSilenceStatus;
    (function(LinkSilenceStatus2) {
      LinkSilenceStatus2[LinkSilenceStatus2["LINK_SILENCE_STATUS_STATUS_UN_SILENCE"] = 0] = "LINK_SILENCE_STATUS_STATUS_UN_SILENCE";
      LinkSilenceStatus2[LinkSilenceStatus2["LINK_SILENCE_STATUS_STATUS_SILENCE_BY_SELF"] = 1] = "LINK_SILENCE_STATUS_STATUS_SILENCE_BY_SELF";
      LinkSilenceStatus2[LinkSilenceStatus2["LINK_SILENCE_STATUS_STATUS_SILENCE_BY_OWNER"] = 2] = "LINK_SILENCE_STATUS_STATUS_SILENCE_BY_OWNER";
      LinkSilenceStatus2[LinkSilenceStatus2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(LinkSilenceStatus = exports.LinkSilenceStatus || (exports.LinkSilenceStatus = {}));
    var LinkmicRoleType;
    (function(LinkmicRoleType2) {
      LinkmicRoleType2[LinkmicRoleType2["LINKMIC_ROLE_TYPE_ROLE_TYPE_UNKOWN"] = 0] = "LINKMIC_ROLE_TYPE_ROLE_TYPE_UNKOWN";
      LinkmicRoleType2[LinkmicRoleType2["LINKMIC_ROLE_TYPE_LEADER"] = 1] = "LINKMIC_ROLE_TYPE_LEADER";
      LinkmicRoleType2[LinkmicRoleType2["LINKMIC_ROLE_TYPE_PLAYER"] = 2] = "LINKMIC_ROLE_TYPE_PLAYER";
      LinkmicRoleType2[LinkmicRoleType2["LINKMIC_ROLE_TYPE_INVITEE"] = 3] = "LINKMIC_ROLE_TYPE_INVITEE";
      LinkmicRoleType2[LinkmicRoleType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(LinkmicRoleType = exports.LinkmicRoleType || (exports.LinkmicRoleType = {}));
    var LinkRoleType;
    (function(LinkRoleType2) {
      LinkRoleType2[LinkRoleType2["LINK_ROLE_TYPE_TYPE_ROLE_TYPE_UNKOWN"] = 0] = "LINK_ROLE_TYPE_TYPE_ROLE_TYPE_UNKOWN";
      LinkRoleType2[LinkRoleType2["LINK_ROLE_TYPE_TYPE_LEADER"] = 1] = "LINK_ROLE_TYPE_TYPE_LEADER";
      LinkRoleType2[LinkRoleType2["LINK_ROLE_TYPE_TYPE_PLAYER"] = 2] = "LINK_ROLE_TYPE_TYPE_PLAYER";
      LinkRoleType2[LinkRoleType2["LINK_ROLE_TYPE_TYPE_INVITEE"] = 3] = "LINK_ROLE_TYPE_TYPE_INVITEE";
      LinkRoleType2[LinkRoleType2["LINK_ROLE_TYPE_TYPE_APPLIER"] = 4] = "LINK_ROLE_TYPE_TYPE_APPLIER";
      LinkRoleType2[LinkRoleType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(LinkRoleType = exports.LinkRoleType || (exports.LinkRoleType = {}));
    var MuteStatus;
    (function(MuteStatus2) {
      MuteStatus2[MuteStatus2["MUTE_STATUS_MUTE"] = 0] = "MUTE_STATUS_MUTE";
      MuteStatus2[MuteStatus2["MUTE_STATUS_UN_MUTE"] = 1] = "MUTE_STATUS_UN_MUTE";
      MuteStatus2[MuteStatus2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(MuteStatus = exports.MuteStatus || (exports.MuteStatus = {}));
    var GuestMicCameraManageOp;
    (function(GuestMicCameraManageOp2) {
      GuestMicCameraManageOp2[GuestMicCameraManageOp2["GUEST_MIC_CAMERA_MANAGE_OP_OPEN_MIC"] = 0] = "GUEST_MIC_CAMERA_MANAGE_OP_OPEN_MIC";
      GuestMicCameraManageOp2[GuestMicCameraManageOp2["GUEST_MIC_CAMERA_MANAGE_OP_OPEN_CAMERA"] = 1] = "GUEST_MIC_CAMERA_MANAGE_OP_OPEN_CAMERA";
      GuestMicCameraManageOp2[GuestMicCameraManageOp2["GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_MIC"] = 2] = "GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_MIC";
      GuestMicCameraManageOp2[GuestMicCameraManageOp2["GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_CAMERA"] = 3] = "GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_CAMERA";
      GuestMicCameraManageOp2[GuestMicCameraManageOp2["GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_MIC_PUNISH"] = 4] = "GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_MIC_PUNISH";
      GuestMicCameraManageOp2[GuestMicCameraManageOp2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(GuestMicCameraManageOp = exports.GuestMicCameraManageOp || (exports.GuestMicCameraManageOp = {}));
    var GuestMicCameraChangeScene;
    (function(GuestMicCameraChangeScene2) {
      GuestMicCameraChangeScene2[GuestMicCameraChangeScene2["GUEST_MIC_CAMERA_CHANGE_SCENE_CHANGE_SCENE_UNKNOWN"] = 0] = "GUEST_MIC_CAMERA_CHANGE_SCENE_CHANGE_SCENE_UNKNOWN";
      GuestMicCameraChangeScene2[GuestMicCameraChangeScene2["GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_ANCHOR_AUTO"] = 1] = "GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_ANCHOR_AUTO";
      GuestMicCameraChangeScene2[GuestMicCameraChangeScene2["GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_SERVER_NORMAL"] = 2] = "GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_SERVER_NORMAL";
      GuestMicCameraChangeScene2[GuestMicCameraChangeScene2["GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_SHOW_END"] = 3] = "GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_SHOW_END";
      GuestMicCameraChangeScene2[GuestMicCameraChangeScene2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(GuestMicCameraChangeScene = exports.GuestMicCameraChangeScene || (exports.GuestMicCameraChangeScene = {}));
    var LinkMicUserAdminType;
    (function(LinkMicUserAdminType2) {
      LinkMicUserAdminType2[LinkMicUserAdminType2["LINK_MIC_USER_ADMIN_TYPE_UNDEFINED_TYPE"] = 0] = "LINK_MIC_USER_ADMIN_TYPE_UNDEFINED_TYPE";
      LinkMicUserAdminType2[LinkMicUserAdminType2["LINK_MIC_USER_ADMIN_TYPE_MANAGER_TYPE"] = 1] = "LINK_MIC_USER_ADMIN_TYPE_MANAGER_TYPE";
      LinkMicUserAdminType2[LinkMicUserAdminType2["LINK_MIC_USER_ADMIN_TYPE_HOST_TYPE"] = 2] = "LINK_MIC_USER_ADMIN_TYPE_HOST_TYPE";
      LinkMicUserAdminType2[LinkMicUserAdminType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(LinkMicUserAdminType = exports.LinkMicUserAdminType || (exports.LinkMicUserAdminType = {}));
    var LinkmicMultiLiveEnum;
    (function(LinkmicMultiLiveEnum2) {
      LinkmicMultiLiveEnum2[LinkmicMultiLiveEnum2["LINKMIC_MULTI_LIVE_ENUM_DEFAULT"] = 0] = "LINKMIC_MULTI_LIVE_ENUM_DEFAULT";
      LinkmicMultiLiveEnum2[LinkmicMultiLiveEnum2["LINKMIC_MULTI_LIVE_ENUM_ANCHOR_USE_NEW_LAYOUT"] = 1] = "LINKMIC_MULTI_LIVE_ENUM_ANCHOR_USE_NEW_LAYOUT";
      LinkmicMultiLiveEnum2[LinkmicMultiLiveEnum2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(LinkmicMultiLiveEnum = exports.LinkmicMultiLiveEnum || (exports.LinkmicMultiLiveEnum = {}));
    var PollEndType;
    (function(PollEndType2) {
      PollEndType2[PollEndType2["POLL_END_TYPE_POLL_END_BY_TIME"] = 0] = "POLL_END_TYPE_POLL_END_BY_TIME";
      PollEndType2[PollEndType2["POLL_END_TYPE_POLL_END_BY_OWNER"] = 1] = "POLL_END_TYPE_POLL_END_BY_OWNER";
      PollEndType2[PollEndType2["POLL_END_TYPE_POLL_END_BY_OTHER"] = 2] = "POLL_END_TYPE_POLL_END_BY_OTHER";
      PollEndType2[PollEndType2["POLL_END_TYPE_POLL_END_BY_ADMIN"] = 3] = "POLL_END_TYPE_POLL_END_BY_ADMIN";
      PollEndType2[PollEndType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(PollEndType = exports.PollEndType || (exports.PollEndType = {}));
    var CohostABTestType;
    (function(CohostABTestType2) {
      CohostABTestType2[CohostABTestType2["COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_UNKNOWN"] = 0] = "COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_UNKNOWN";
      CohostABTestType2[CohostABTestType2["COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_LINK_TIME_OUT_STRATEGY"] = 1] = "COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_LINK_TIME_OUT_STRATEGY";
      CohostABTestType2[CohostABTestType2["COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_COHOST_RESERVATION"] = 2] = "COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_COHOST_RESERVATION";
      CohostABTestType2[CohostABTestType2["COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_QUICK_PAIR_NEW_ARCH_SWITCH"] = 3] = "COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_QUICK_PAIR_NEW_ARCH_SWITCH";
      CohostABTestType2[CohostABTestType2["COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_COHOST_INVITATION_TEXT"] = 4] = "COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_COHOST_INVITATION_TEXT";
      CohostABTestType2[CohostABTestType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(CohostABTestType = exports.CohostABTestType || (exports.CohostABTestType = {}));
    var OptPairStatus;
    (function(OptPairStatus2) {
      OptPairStatus2[OptPairStatus2["OPT_PAIR_STATUS_UNKNOWN"] = 0] = "OPT_PAIR_STATUS_UNKNOWN";
      OptPairStatus2[OptPairStatus2["OPT_PAIR_STATUS_OFFLINE"] = 1] = "OPT_PAIR_STATUS_OFFLINE";
      OptPairStatus2[OptPairStatus2["OPT_PAIR_STATUS_FINISHED"] = 2] = "OPT_PAIR_STATUS_FINISHED";
      OptPairStatus2[OptPairStatus2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(OptPairStatus = exports.OptPairStatus || (exports.OptPairStatus = {}));
    var ContentPositionType;
    (function(ContentPositionType2) {
      ContentPositionType2[ContentPositionType2["CONTENT_POSITION_TYPE_UNKNOWN"] = 0] = "CONTENT_POSITION_TYPE_UNKNOWN";
      ContentPositionType2[ContentPositionType2["CONTENT_POSITION_TYPE_STREAM"] = 1] = "CONTENT_POSITION_TYPE_STREAM";
      ContentPositionType2[ContentPositionType2["CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_PORTRAIT"] = 2] = "CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_PORTRAIT";
      ContentPositionType2[ContentPositionType2["CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_LANDSCAPE"] = 3] = "CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_LANDSCAPE";
      ContentPositionType2[ContentPositionType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(ContentPositionType = exports.ContentPositionType || (exports.ContentPositionType = {}));
    var MultiGuestOutsideRoomInviteSource;
    (function(MultiGuestOutsideRoomInviteSource2) {
      MultiGuestOutsideRoomInviteSource2[MultiGuestOutsideRoomInviteSource2["MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_UNKNOWN"] = 0] = "MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_UNKNOWN";
      MultiGuestOutsideRoomInviteSource2[MultiGuestOutsideRoomInviteSource2["MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_PANEL"] = 1] = "MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_PANEL";
      MultiGuestOutsideRoomInviteSource2[MultiGuestOutsideRoomInviteSource2["MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_CAPSULE"] = 2] = "MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_CAPSULE";
      MultiGuestOutsideRoomInviteSource2[MultiGuestOutsideRoomInviteSource2["MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_EMPTY_POSITION"] = 3] = "MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_EMPTY_POSITION";
      MultiGuestOutsideRoomInviteSource2[MultiGuestOutsideRoomInviteSource2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(MultiGuestOutsideRoomInviteSource = exports.MultiGuestOutsideRoomInviteSource || (exports.MultiGuestOutsideRoomInviteSource = {}));
    var LinkUserType;
    (function(LinkUserType2) {
      LinkUserType2[LinkUserType2["LINK_USER_TYPE_DEFAULT"] = 0] = "LINK_USER_TYPE_DEFAULT";
      LinkUserType2[LinkUserType2["LINK_USER_TYPE_KARAOKE"] = 1] = "LINK_USER_TYPE_KARAOKE";
      LinkUserType2[LinkUserType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(LinkUserType = exports.LinkUserType || (exports.LinkUserType = {}));
    var ContentInviteSource;
    (function(ContentInviteSource2) {
      ContentInviteSource2[ContentInviteSource2["CONTENT_INVITE_SOURCE_INVITE_SOURCE_UNKNOWN"] = 0] = "CONTENT_INVITE_SOURCE_INVITE_SOURCE_UNKNOWN";
      ContentInviteSource2[ContentInviteSource2["CONTENT_INVITE_SOURCE_INVITE_SOURCE_PANEL_GO_LIVE"] = 1] = "CONTENT_INVITE_SOURCE_INVITE_SOURCE_PANEL_GO_LIVE";
      ContentInviteSource2[ContentInviteSource2["CONTENT_INVITE_SOURCE_INVITE_SOURCE_MUTUAL_NOTICE"] = 2] = "CONTENT_INVITE_SOURCE_INVITE_SOURCE_MUTUAL_NOTICE";
      ContentInviteSource2[ContentInviteSource2["CONTENT_INVITE_SOURCE_INVITE_SOURCE_USER_PROFILE"] = 3] = "CONTENT_INVITE_SOURCE_INVITE_SOURCE_USER_PROFILE";
      ContentInviteSource2[ContentInviteSource2["CONTENT_INVITE_SOURCE_INVITE_SOURCE_RESERVE"] = 4] = "CONTENT_INVITE_SOURCE_INVITE_SOURCE_RESERVE";
      ContentInviteSource2[ContentInviteSource2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(ContentInviteSource = exports.ContentInviteSource || (exports.ContentInviteSource = {}));
    var LinkmicShareRevenueSetting;
    (function(LinkmicShareRevenueSetting2) {
      LinkmicShareRevenueSetting2[LinkmicShareRevenueSetting2["LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_NOT_SET"] = 0] = "LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_NOT_SET";
      LinkmicShareRevenueSetting2[LinkmicShareRevenueSetting2["LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_OPEN"] = 1] = "LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_OPEN";
      LinkmicShareRevenueSetting2[LinkmicShareRevenueSetting2["LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_CLOSE"] = 2] = "LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_CLOSE";
      LinkmicShareRevenueSetting2[LinkmicShareRevenueSetting2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(LinkmicShareRevenueSetting = exports.LinkmicShareRevenueSetting || (exports.LinkmicShareRevenueSetting = {}));
    var PosIdentityType;
    (function(PosIdentityType2) {
      PosIdentityType2[PosIdentityType2["POS_IDENTITY_TYPE_IDENTITY_EMPTY_SLOT"] = 0] = "POS_IDENTITY_TYPE_IDENTITY_EMPTY_SLOT";
      PosIdentityType2[PosIdentityType2["POS_IDENTITY_TYPE_IDENTITY_RT_C_USER_ID"] = 1] = "POS_IDENTITY_TYPE_IDENTITY_RT_C_USER_ID";
      PosIdentityType2[PosIdentityType2["POS_IDENTITY_TYPE_IDENTITY_RT_C_STREAM_ID"] = 2] = "POS_IDENTITY_TYPE_IDENTITY_RT_C_STREAM_ID";
      PosIdentityType2[PosIdentityType2["POS_IDENTITY_TYPE_IDENTITY_LIVE_USER_ID"] = 3] = "POS_IDENTITY_TYPE_IDENTITY_LIVE_USER_ID";
      PosIdentityType2[PosIdentityType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(PosIdentityType = exports.PosIdentityType || (exports.PosIdentityType = {}));
    var JoinType;
    (function(JoinType2) {
      JoinType2[JoinType2["JOIN_TYPE_UNKNOWN"] = 0] = "JOIN_TYPE_UNKNOWN";
      JoinType2[JoinType2["JOIN_TYPE_CHANNEL_APPLY"] = 1] = "JOIN_TYPE_CHANNEL_APPLY";
      JoinType2[JoinType2["JOIN_TYPE_CHANNEL_INVITE"] = 2] = "JOIN_TYPE_CHANNEL_INVITE";
      JoinType2[JoinType2["JOIN_TYPE_GROUP_APPLY"] = 100] = "JOIN_TYPE_GROUP_APPLY";
      JoinType2[JoinType2["JOIN_TYPE_GROUP_APPLY_FOLLOW"] = 101] = "JOIN_TYPE_GROUP_APPLY_FOLLOW";
      JoinType2[JoinType2["JOIN_TYPE_GROUP_INVITE"] = 102] = "JOIN_TYPE_GROUP_INVITE";
      JoinType2[JoinType2["JOIN_TYPE_GROUP_INVITE_FOLLOW"] = 103] = "JOIN_TYPE_GROUP_INVITE_FOLLOW";
      JoinType2[JoinType2["JOIN_TYPE_GROUP_OWNER_JOIN"] = 104] = "JOIN_TYPE_GROUP_OWNER_JOIN";
      JoinType2[JoinType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(JoinType = exports.JoinType || (exports.JoinType = {}));
    var CohostLayoutMode;
    (function(CohostLayoutMode2) {
      CohostLayoutMode2[CohostLayoutMode2["COHOST_LAYOUT_MODE_NORMAL"] = 0] = "COHOST_LAYOUT_MODE_NORMAL";
      CohostLayoutMode2[CohostLayoutMode2["COHOST_LAYOUT_MODE_SCREEN_SHARE"] = 1] = "COHOST_LAYOUT_MODE_SCREEN_SHARE";
      CohostLayoutMode2[CohostLayoutMode2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(CohostLayoutMode = exports.CohostLayoutMode || (exports.CohostLayoutMode = {}));
    var TagClassification;
    (function(TagClassification2) {
      TagClassification2[TagClassification2["TAG_CLASSIFICATION_UNKNOWN"] = 0] = "TAG_CLASSIFICATION_UNKNOWN";
      TagClassification2[TagClassification2["TAG_CLASSIFICATION_COHOST_HISTORY"] = 1] = "TAG_CLASSIFICATION_COHOST_HISTORY";
      TagClassification2[TagClassification2["TAG_CLASSIFICATION_FIRST_DEGREE_RELATION"] = 2] = "TAG_CLASSIFICATION_FIRST_DEGREE_RELATION";
      TagClassification2[TagClassification2["TAG_CLASSIFICATION_SECOND_DEGREE_RELATION"] = 3] = "TAG_CLASSIFICATION_SECOND_DEGREE_RELATION";
      TagClassification2[TagClassification2["TAG_CLASSIFICATION_RANK"] = 4] = "TAG_CLASSIFICATION_RANK";
      TagClassification2[TagClassification2["TAG_CLASSIFICATION_SIMILAR_INTERESTS"] = 5] = "TAG_CLASSIFICATION_SIMILAR_INTERESTS";
      TagClassification2[TagClassification2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(TagClassification = exports.TagClassification || (exports.TagClassification = {}));
    var SourceType;
    (function(SourceType2) {
      SourceType2[SourceType2["SOURCE_TYPE_UNKNOWN"] = 0] = "SOURCE_TYPE_UNKNOWN";
      SourceType2[SourceType2["SOURCE_TYPE_FRIEND_LIST"] = 1] = "SOURCE_TYPE_FRIEND_LIST";
      SourceType2[SourceType2["SOURCE_TYPE_RECOMMEND_LIST"] = 2] = "SOURCE_TYPE_RECOMMEND_LIST";
      SourceType2[SourceType2["SOURCE_TYPE_RECENT"] = 3] = "SOURCE_TYPE_RECENT";
      SourceType2[SourceType2["SOURCE_TYPE_OTHER_FOLLOW"] = 4] = "SOURCE_TYPE_OTHER_FOLLOW";
      SourceType2[SourceType2["SOURCE_TYPE_QUICK_PAIR"] = 5] = "SOURCE_TYPE_QUICK_PAIR";
      SourceType2[SourceType2["SOURCE_TYPE_ACTIVITY"] = 6] = "SOURCE_TYPE_ACTIVITY";
      SourceType2[SourceType2["SOURCE_TYPE_QUICK_RECOMMEND"] = 7] = "SOURCE_TYPE_QUICK_RECOMMEND";
      SourceType2[SourceType2["SOURCE_TYPE_OFFICIAL_CHANNEL"] = 8] = "SOURCE_TYPE_OFFICIAL_CHANNEL";
      SourceType2[SourceType2["SOURCE_TYPE_BEST_TEAMMATE"] = 9] = "SOURCE_TYPE_BEST_TEAMMATE";
      SourceType2[SourceType2["SOURCE_TYPE_RESERVATION"] = 10] = "SOURCE_TYPE_RESERVATION";
      SourceType2[SourceType2["SOURCE_TYPE_PAIRING"] = 11] = "SOURCE_TYPE_PAIRING";
      SourceType2[SourceType2["SOURCE_TYPE_PAIRING_ON_RESERVATION"] = 12] = "SOURCE_TYPE_PAIRING_ON_RESERVATION";
      SourceType2[SourceType2["SOURCE_TYPE_TOPIC_QUICK_PAIR"] = 13] = "SOURCE_TYPE_TOPIC_QUICK_PAIR";
      SourceType2[SourceType2["SOURCE_TYPE_TOPIC_QUICK_RECOMMEND"] = 14] = "SOURCE_TYPE_TOPIC_QUICK_RECOMMEND";
      SourceType2[SourceType2["SOURCE_TYPE_ONLINE_FRIEND_CAPSULE"] = 15] = "SOURCE_TYPE_ONLINE_FRIEND_CAPSULE";
      SourceType2[SourceType2["SOURCE_TYPE_WEEKLY_RANK"] = 20] = "SOURCE_TYPE_WEEKLY_RANK";
      SourceType2[SourceType2["SOURCE_TYPE_HOURLY_RANK"] = 21] = "SOURCE_TYPE_HOURLY_RANK";
      SourceType2[SourceType2["SOURCE_TYPE_WEEKLY_RISING"] = 23] = "SOURCE_TYPE_WEEKLY_RISING";
      SourceType2[SourceType2["SOURCE_TYPE_WEEKLY_ROOKIE"] = 24] = "SOURCE_TYPE_WEEKLY_ROOKIE";
      SourceType2[SourceType2["SOURCE_TYPE_CONNECTION_LIST"] = 25] = "SOURCE_TYPE_CONNECTION_LIST";
      SourceType2[SourceType2["SOURCE_TYPE_DAILY_RANK"] = 26] = "SOURCE_TYPE_DAILY_RANK";
      SourceType2[SourceType2["SOURCE_TYPE_DAILY_RANK_HALL_OF_FAME"] = 27] = "SOURCE_TYPE_DAILY_RANK_HALL_OF_FAME";
      SourceType2[SourceType2["SOURCE_TYPE_RESERVATION_BUBBLE"] = 28] = "SOURCE_TYPE_RESERVATION_BUBBLE";
      SourceType2[SourceType2["SOURCE_TYPE_PAIRING_BUBBLE"] = 29] = "SOURCE_TYPE_PAIRING_BUBBLE";
      SourceType2[SourceType2["SOURCE_TYPE_LEAGUE_PHASE_ONE"] = 30] = "SOURCE_TYPE_LEAGUE_PHASE_ONE";
      SourceType2[SourceType2["SOURCE_TYPE_LEAGUE_PHASE_TWO"] = 31] = "SOURCE_TYPE_LEAGUE_PHASE_TWO";
      SourceType2[SourceType2["SOURCE_TYPE_LEAGUE_PHASE_THREE"] = 32] = "SOURCE_TYPE_LEAGUE_PHASE_THREE";
      SourceType2[SourceType2["SOURCE_TYPE_DAILY_ROOKIE"] = 33] = "SOURCE_TYPE_DAILY_ROOKIE";
      SourceType2[SourceType2["SOURCE_TYPE_MAY_KNOW_LIST"] = 34] = "SOURCE_TYPE_MAY_KNOW_LIST";
      SourceType2[SourceType2["SOURCE_TYPE_BANNER"] = 35] = "SOURCE_TYPE_BANNER";
      SourceType2[SourceType2["SOURCE_TYPE_FANS_TEAM_RANK"] = 36] = "SOURCE_TYPE_FANS_TEAM_RANK";
      SourceType2[SourceType2["SOURCE_TYPE_SEARCH"] = 37] = "SOURCE_TYPE_SEARCH";
      SourceType2[SourceType2["SOURCE_TYPE_E_OY_RANK_LIST"] = 38] = "SOURCE_TYPE_E_OY_RANK_LIST";
      SourceType2[SourceType2["SOURCE_TYPE_LEAGUE_CAMPAIGN_RANK"] = 39] = "SOURCE_TYPE_LEAGUE_CAMPAIGN_RANK";
      SourceType2[SourceType2["SOURCE_TYPE_CREATOR_CLASS_RANK"] = 40] = "SOURCE_TYPE_CREATOR_CLASS_RANK";
      SourceType2[SourceType2["SOURCE_TYPE_HISTORY"] = 41] = "SOURCE_TYPE_HISTORY";
      SourceType2[SourceType2["SOURCE_TYPE_QUICK_RECOMMEND_DURING_COHOST"] = 43] = "SOURCE_TYPE_QUICK_RECOMMEND_DURING_COHOST";
      SourceType2[SourceType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(SourceType = exports.SourceType || (exports.SourceType = {}));
    var BattleType;
    (function(BattleType2) {
      BattleType2[BattleType2["BATTLE_TYPE_UNKNOWN_BATTLE_TYPE"] = 0] = "BATTLE_TYPE_UNKNOWN_BATTLE_TYPE";
      BattleType2[BattleType2["BATTLE_TYPE_NORMAL_BATTLE"] = 1] = "BATTLE_TYPE_NORMAL_BATTLE";
      BattleType2[BattleType2["BATTLE_TYPE_TEAM_BATTLE"] = 2] = "BATTLE_TYPE_TEAM_BATTLE";
      BattleType2[BattleType2["BATTLE_TYPE_INDIVIDUAL_BATTLE"] = 3] = "BATTLE_TYPE_INDIVIDUAL_BATTLE";
      BattleType2[BattleType2["BATTLE_TYPE_1_V_N"] = 4] = "BATTLE_TYPE_1_V_N";
      BattleType2[BattleType2["BATTLE_TYPE_TAKE_THE_STAGE"] = 51] = "BATTLE_TYPE_TAKE_THE_STAGE";
      BattleType2[BattleType2["BATTLE_TYPE_GROUP_SHOW"] = 52] = "BATTLE_TYPE_GROUP_SHOW";
      BattleType2[BattleType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(BattleType = exports.BattleType || (exports.BattleType = {}));
    var BattleInviteType;
    (function(BattleInviteType2) {
      BattleInviteType2[BattleInviteType2["BATTLE_INVITE_TYPE_NORMAL"] = 0] = "BATTLE_INVITE_TYPE_NORMAL";
      BattleInviteType2[BattleInviteType2["BATTLE_INVITE_TYPE_AGAIN"] = 1] = "BATTLE_INVITE_TYPE_AGAIN";
      BattleInviteType2[BattleInviteType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(BattleInviteType = exports.BattleInviteType || (exports.BattleInviteType = {}));
    var CommonMessageData_IMDispatchStrategy;
    (function(CommonMessageData_IMDispatchStrategy2) {
      CommonMessageData_IMDispatchStrategy2[CommonMessageData_IMDispatchStrategy2["IM_DISPATCH_STRATEGY_DEFAULT"] = 0] = "IM_DISPATCH_STRATEGY_DEFAULT";
      CommonMessageData_IMDispatchStrategy2[CommonMessageData_IMDispatchStrategy2["IM_DISPATCH_STRATEGY_BYPASS_DISPATCH_QUEUE"] = 1] = "IM_DISPATCH_STRATEGY_BYPASS_DISPATCH_QUEUE";
      CommonMessageData_IMDispatchStrategy2[CommonMessageData_IMDispatchStrategy2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(CommonMessageData_IMDispatchStrategy = exports.CommonMessageData_IMDispatchStrategy || (exports.CommonMessageData_IMDispatchStrategy = {}));
    var Text_ShowType;
    (function(Text_ShowType2) {
      Text_ShowType2[Text_ShowType2["SHOW_TYPE_NORMAL"] = 0] = "SHOW_TYPE_NORMAL";
      Text_ShowType2[Text_ShowType2["SHOW_TYPE_FADE_IN_OUT"] = 1] = "SHOW_TYPE_FADE_IN_OUT";
      Text_ShowType2[Text_ShowType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(Text_ShowType = exports.Text_ShowType || (exports.Text_ShowType = {}));
    var BadgeStruct_BadgeDisplayType;
    (function(BadgeStruct_BadgeDisplayType2) {
      BadgeStruct_BadgeDisplayType2[BadgeStruct_BadgeDisplayType2["BADGEDISPLAYTYPE_UNKNOWN"] = 0] = "BADGEDISPLAYTYPE_UNKNOWN";
      BadgeStruct_BadgeDisplayType2[BadgeStruct_BadgeDisplayType2["BADGEDISPLAYTYPE_IMAGE"] = 1] = "BADGEDISPLAYTYPE_IMAGE";
      BadgeStruct_BadgeDisplayType2[BadgeStruct_BadgeDisplayType2["BADGEDISPLAYTYPE_TEXT"] = 2] = "BADGEDISPLAYTYPE_TEXT";
      BadgeStruct_BadgeDisplayType2[BadgeStruct_BadgeDisplayType2["BADGEDISPLAYTYPE_STRING"] = 3] = "BADGEDISPLAYTYPE_STRING";
      BadgeStruct_BadgeDisplayType2[BadgeStruct_BadgeDisplayType2["BADGEDISPLAYTYPE_COMBINE"] = 4] = "BADGEDISPLAYTYPE_COMBINE";
      BadgeStruct_BadgeDisplayType2[BadgeStruct_BadgeDisplayType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(BadgeStruct_BadgeDisplayType = exports.BadgeStruct_BadgeDisplayType || (exports.BadgeStruct_BadgeDisplayType = {}));
    var BadgeStruct_BadgePriorityType;
    (function(BadgeStruct_BadgePriorityType2) {
      BadgeStruct_BadgePriorityType2[BadgeStruct_BadgePriorityType2["BADGE_PRIORITY_TYPE_UNKNOWN"] = 0] = "BADGE_PRIORITY_TYPE_UNKNOWN";
      BadgeStruct_BadgePriorityType2[BadgeStruct_BadgePriorityType2["BADGE_PRIORITY_TYPE_STRONG_RELATION"] = 10] = "BADGE_PRIORITY_TYPE_STRONG_RELATION";
      BadgeStruct_BadgePriorityType2[BadgeStruct_BadgePriorityType2["BADGE_PRIORITY_TYPE_PLATFORM"] = 20] = "BADGE_PRIORITY_TYPE_PLATFORM";
      BadgeStruct_BadgePriorityType2[BadgeStruct_BadgePriorityType2["BADGE_PRIORITY_TYPE_RELATION"] = 30] = "BADGE_PRIORITY_TYPE_RELATION";
      BadgeStruct_BadgePriorityType2[BadgeStruct_BadgePriorityType2["BADGE_PRIORITY_TYPE_ACTIVITY"] = 40] = "BADGE_PRIORITY_TYPE_ACTIVITY";
      BadgeStruct_BadgePriorityType2[BadgeStruct_BadgePriorityType2["BADGE_PRIORITY_TYPE_RANK_LIST"] = 50] = "BADGE_PRIORITY_TYPE_RANK_LIST";
      BadgeStruct_BadgePriorityType2[BadgeStruct_BadgePriorityType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(BadgeStruct_BadgePriorityType = exports.BadgeStruct_BadgePriorityType || (exports.BadgeStruct_BadgePriorityType = {}));
    var BadgeStruct_BadgeSceneType;
    (function(BadgeStruct_BadgeSceneType2) {
      BadgeStruct_BadgeSceneType2[BadgeStruct_BadgeSceneType2["BADGE_SCENE_TYPE_UNKNOWN"] = 0] = "BADGE_SCENE_TYPE_UNKNOWN";
      BadgeStruct_BadgeSceneType2[BadgeStruct_BadgeSceneType2["BADGE_SCENE_TYPE_ADMIN"] = 1] = "BADGE_SCENE_TYPE_ADMIN";
      BadgeStruct_BadgeSceneType2[BadgeStruct_BadgeSceneType2["BADGE_SCENE_TYPE_FIRST_RECHARGE"] = 2] = "BADGE_SCENE_TYPE_FIRST_RECHARGE";
      BadgeStruct_BadgeSceneType2[BadgeStruct_BadgeSceneType2["BADGE_SCENE_TYPE_FRIENDS"] = 3] = "BADGE_SCENE_TYPE_FRIENDS";
      BadgeStruct_BadgeSceneType2[BadgeStruct_BadgeSceneType2["BADGE_SCENE_TYPE_SUBSCRIBER"] = 4] = "BADGE_SCENE_TYPE_SUBSCRIBER";
      BadgeStruct_BadgeSceneType2[BadgeStruct_BadgeSceneType2["BADGE_SCENE_TYPE_ACTIVITY"] = 5] = "BADGE_SCENE_TYPE_ACTIVITY";
      BadgeStruct_BadgeSceneType2[BadgeStruct_BadgeSceneType2["BADGE_SCENE_TYPE_RANK_LIST"] = 6] = "BADGE_SCENE_TYPE_RANK_LIST";
      BadgeStruct_BadgeSceneType2[BadgeStruct_BadgeSceneType2["BADGE_SCENE_TYPE_NEW_SUBSCRIBER"] = 7] = "BADGE_SCENE_TYPE_NEW_SUBSCRIBER";
      BadgeStruct_BadgeSceneType2[BadgeStruct_BadgeSceneType2["BADGE_SCENE_TYPE_USER_GRADE"] = 8] = "BADGE_SCENE_TYPE_USER_GRADE";
      BadgeStruct_BadgeSceneType2[BadgeStruct_BadgeSceneType2["BADGE_SCENE_TYPE_STATE_CONTROLLED_MEDIA"] = 9] = "BADGE_SCENE_TYPE_STATE_CONTROLLED_MEDIA";
      BadgeStruct_BadgeSceneType2[BadgeStruct_BadgeSceneType2["BADGE_SCENE_TYPE_FANS"] = 10] = "BADGE_SCENE_TYPE_FANS";
      BadgeStruct_BadgeSceneType2[BadgeStruct_BadgeSceneType2["BADGE_SCENE_TYPE_LIVE_PRO"] = 11] = "BADGE_SCENE_TYPE_LIVE_PRO";
      BadgeStruct_BadgeSceneType2[BadgeStruct_BadgeSceneType2["BADGE_SCENE_TYPE_ANCHOR"] = 12] = "BADGE_SCENE_TYPE_ANCHOR";
      BadgeStruct_BadgeSceneType2[BadgeStruct_BadgeSceneType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(BadgeStruct_BadgeSceneType = exports.BadgeStruct_BadgeSceneType || (exports.BadgeStruct_BadgeSceneType = {}));
    var BadgeStruct_DisplayStatus;
    (function(BadgeStruct_DisplayStatus2) {
      BadgeStruct_DisplayStatus2[BadgeStruct_DisplayStatus2["DISPLAY_STATUS_NORMAL"] = 0] = "DISPLAY_STATUS_NORMAL";
      BadgeStruct_DisplayStatus2[BadgeStruct_DisplayStatus2["DISPLAY_STATUS_SHADOW"] = 1] = "DISPLAY_STATUS_SHADOW";
      BadgeStruct_DisplayStatus2[BadgeStruct_DisplayStatus2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(BadgeStruct_DisplayStatus = exports.BadgeStruct_DisplayStatus || (exports.BadgeStruct_DisplayStatus = {}));
    var BadgeStruct_BadgeExhibitionType;
    (function(BadgeStruct_BadgeExhibitionType2) {
      BadgeStruct_BadgeExhibitionType2[BadgeStruct_BadgeExhibitionType2["BADGE_EXHIBITION_TYPE_BADGE"] = 0] = "BADGE_EXHIBITION_TYPE_BADGE";
      BadgeStruct_BadgeExhibitionType2[BadgeStruct_BadgeExhibitionType2["BADGE_EXHIBITION_TYPE_IDENTITY_LABEL"] = 1] = "BADGE_EXHIBITION_TYPE_IDENTITY_LABEL";
      BadgeStruct_BadgeExhibitionType2[BadgeStruct_BadgeExhibitionType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(BadgeStruct_BadgeExhibitionType = exports.BadgeStruct_BadgeExhibitionType || (exports.BadgeStruct_BadgeExhibitionType = {}));
    var BadgeStruct_Position;
    (function(BadgeStruct_Position2) {
      BadgeStruct_Position2[BadgeStruct_Position2["POSITIONUNKNOWN"] = 0] = "POSITIONUNKNOWN";
      BadgeStruct_Position2[BadgeStruct_Position2["POSITIONLEFT"] = 1] = "POSITIONLEFT";
      BadgeStruct_Position2[BadgeStruct_Position2["POSITIONRIGHT"] = 2] = "POSITIONRIGHT";
      BadgeStruct_Position2[BadgeStruct_Position2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(BadgeStruct_Position = exports.BadgeStruct_Position || (exports.BadgeStruct_Position = {}));
    var BadgeStruct_HorizontalPaddingRule;
    (function(BadgeStruct_HorizontalPaddingRule2) {
      BadgeStruct_HorizontalPaddingRule2[BadgeStruct_HorizontalPaddingRule2["HORIZONTAL_PADDING_RULE_USE_MIDDLE_AND_WIDTH"] = 0] = "HORIZONTAL_PADDING_RULE_USE_MIDDLE_AND_WIDTH";
      BadgeStruct_HorizontalPaddingRule2[BadgeStruct_HorizontalPaddingRule2["HORIZONTAL_PADDING_RULE_USE_LEFT_AND_MIDDLE_AND_RIGHT"] = 1] = "HORIZONTAL_PADDING_RULE_USE_LEFT_AND_MIDDLE_AND_RIGHT";
      BadgeStruct_HorizontalPaddingRule2[BadgeStruct_HorizontalPaddingRule2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(BadgeStruct_HorizontalPaddingRule = exports.BadgeStruct_HorizontalPaddingRule || (exports.BadgeStruct_HorizontalPaddingRule = {}));
    var BadgeStruct_VerticalPaddingRule;
    (function(BadgeStruct_VerticalPaddingRule2) {
      BadgeStruct_VerticalPaddingRule2[BadgeStruct_VerticalPaddingRule2["VERTICAL_PADDING_RULE_USE_DEFAULT"] = 0] = "VERTICAL_PADDING_RULE_USE_DEFAULT";
      BadgeStruct_VerticalPaddingRule2[BadgeStruct_VerticalPaddingRule2["VERTICAL_PADDING_RULE_USE_TOP_AND_BOTTOM"] = 1] = "VERTICAL_PADDING_RULE_USE_TOP_AND_BOTTOM";
      BadgeStruct_VerticalPaddingRule2[BadgeStruct_VerticalPaddingRule2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(BadgeStruct_VerticalPaddingRule = exports.BadgeStruct_VerticalPaddingRule || (exports.BadgeStruct_VerticalPaddingRule = {}));
    var User_LiveEventInfo_EventPayMethod;
    (function(User_LiveEventInfo_EventPayMethod2) {
      User_LiveEventInfo_EventPayMethod2[User_LiveEventInfo_EventPayMethod2["EVENTPAYMETHODINVALID"] = 0] = "EVENTPAYMETHODINVALID";
      User_LiveEventInfo_EventPayMethod2[User_LiveEventInfo_EventPayMethod2["EVENTPAYMETHODCOINS"] = 1] = "EVENTPAYMETHODCOINS";
      User_LiveEventInfo_EventPayMethod2[User_LiveEventInfo_EventPayMethod2["EVENTPAYMETHODCASH"] = 2] = "EVENTPAYMETHODCASH";
      User_LiveEventInfo_EventPayMethod2[User_LiveEventInfo_EventPayMethod2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(User_LiveEventInfo_EventPayMethod = exports.User_LiveEventInfo_EventPayMethod || (exports.User_LiveEventInfo_EventPayMethod = {}));
    var User_EcommerceEntrance_CreatorType;
    (function(User_EcommerceEntrance_CreatorType2) {
      User_EcommerceEntrance_CreatorType2[User_EcommerceEntrance_CreatorType2["UNDEFINED"] = 0] = "UNDEFINED";
      User_EcommerceEntrance_CreatorType2[User_EcommerceEntrance_CreatorType2["OFFICIAL"] = 1] = "OFFICIAL";
      User_EcommerceEntrance_CreatorType2[User_EcommerceEntrance_CreatorType2["MARKET"] = 2] = "MARKET";
      User_EcommerceEntrance_CreatorType2[User_EcommerceEntrance_CreatorType2["NORMAL"] = 3] = "NORMAL";
      User_EcommerceEntrance_CreatorType2[User_EcommerceEntrance_CreatorType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(User_EcommerceEntrance_CreatorType = exports.User_EcommerceEntrance_CreatorType || (exports.User_EcommerceEntrance_CreatorType = {}));
    var User_EcommerceEntrance_EntranceType;
    (function(User_EcommerceEntrance_EntranceType2) {
      User_EcommerceEntrance_EntranceType2[User_EcommerceEntrance_EntranceType2["PROFILE"] = 0] = "PROFILE";
      User_EcommerceEntrance_EntranceType2[User_EcommerceEntrance_EntranceType2["SHOWCASE"] = 1] = "SHOWCASE";
      User_EcommerceEntrance_EntranceType2[User_EcommerceEntrance_EntranceType2["SHOP"] = 2] = "SHOP";
      User_EcommerceEntrance_EntranceType2[User_EcommerceEntrance_EntranceType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(User_EcommerceEntrance_EntranceType = exports.User_EcommerceEntrance_EntranceType || (exports.User_EcommerceEntrance_EntranceType = {}));
    var User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType;
    (function(User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType2) {
      User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType2[User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType2["NONE"] = 0] = "NONE";
      User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType2[User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType2["OFFICIAL"] = 1] = "OFFICIAL";
      User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType2[User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType2["AUTHORIZED"] = 2] = "AUTHORIZED";
      User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType2[User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType2["STORE_BRAND_LABEL_TYPE_BLUE_V"] = 3] = "STORE_BRAND_LABEL_TYPE_BLUE_V";
      User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType2[User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType2["STORE_BRAND_LABEL_TYPE_TOP_CHOICE"] = 4] = "STORE_BRAND_LABEL_TYPE_TOP_CHOICE";
      User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType2[User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType = exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType || (exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType = {}));
    var User_FansClub_PreferntialType;
    (function(User_FansClub_PreferntialType2) {
      User_FansClub_PreferntialType2[User_FansClub_PreferntialType2["PRESONALPROFILE"] = 0] = "PRESONALPROFILE";
      User_FansClub_PreferntialType2[User_FansClub_PreferntialType2["OTHERROOM"] = 1] = "OTHERROOM";
      User_FansClub_PreferntialType2[User_FansClub_PreferntialType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(User_FansClub_PreferntialType = exports.User_FansClub_PreferntialType || (exports.User_FansClub_PreferntialType = {}));
    var User_FansClub_FansClubData_BadgeIcon;
    (function(User_FansClub_FansClubData_BadgeIcon2) {
      User_FansClub_FansClubData_BadgeIcon2[User_FansClub_FansClubData_BadgeIcon2["UNKNOWN"] = 0] = "UNKNOWN";
      User_FansClub_FansClubData_BadgeIcon2[User_FansClub_FansClubData_BadgeIcon2["ICON"] = 1] = "ICON";
      User_FansClub_FansClubData_BadgeIcon2[User_FansClub_FansClubData_BadgeIcon2["SMALLICON"] = 2] = "SMALLICON";
      User_FansClub_FansClubData_BadgeIcon2[User_FansClub_FansClubData_BadgeIcon2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(User_FansClub_FansClubData_BadgeIcon = exports.User_FansClub_FansClubData_BadgeIcon || (exports.User_FansClub_FansClubData_BadgeIcon = {}));
    var User_FansClub_FansClubData_UserFansClubStatus;
    (function(User_FansClub_FansClubData_UserFansClubStatus2) {
      User_FansClub_FansClubData_UserFansClubStatus2[User_FansClub_FansClubData_UserFansClubStatus2["NOTJOINED"] = 0] = "NOTJOINED";
      User_FansClub_FansClubData_UserFansClubStatus2[User_FansClub_FansClubData_UserFansClubStatus2["ACTIVE"] = 1] = "ACTIVE";
      User_FansClub_FansClubData_UserFansClubStatus2[User_FansClub_FansClubData_UserFansClubStatus2["INACTIVE"] = 2] = "INACTIVE";
      User_FansClub_FansClubData_UserFansClubStatus2[User_FansClub_FansClubData_UserFansClubStatus2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(User_FansClub_FansClubData_UserFansClubStatus = exports.User_FansClub_FansClubData_UserFansClubStatus || (exports.User_FansClub_FansClubData_UserFansClubStatus = {}));
    var Emote_AuditInfo_AuditTaskType;
    (function(Emote_AuditInfo_AuditTaskType2) {
      Emote_AuditInfo_AuditTaskType2[Emote_AuditInfo_AuditTaskType2["AUDIT_TASK_TYPE_DEFAULT"] = 0] = "AUDIT_TASK_TYPE_DEFAULT";
      Emote_AuditInfo_AuditTaskType2[Emote_AuditInfo_AuditTaskType2["AUDIT_TASK_TYPE_APPEAL"] = 1] = "AUDIT_TASK_TYPE_APPEAL";
      Emote_AuditInfo_AuditTaskType2[Emote_AuditInfo_AuditTaskType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(Emote_AuditInfo_AuditTaskType = exports.Emote_AuditInfo_AuditTaskType || (exports.Emote_AuditInfo_AuditTaskType = {}));
    var WebcastChatMessage_CommentTag;
    (function(WebcastChatMessage_CommentTag2) {
      WebcastChatMessage_CommentTag2[WebcastChatMessage_CommentTag2["COMMENT_TAG_NORMAL"] = 0] = "COMMENT_TAG_NORMAL";
      WebcastChatMessage_CommentTag2[WebcastChatMessage_CommentTag2["COMMENT_TAG_CANDIDATE"] = 1] = "COMMENT_TAG_CANDIDATE";
      WebcastChatMessage_CommentTag2[WebcastChatMessage_CommentTag2["COMMENT_TAG_OVERAGE"] = 2] = "COMMENT_TAG_OVERAGE";
      WebcastChatMessage_CommentTag2[WebcastChatMessage_CommentTag2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(WebcastChatMessage_CommentTag = exports.WebcastChatMessage_CommentTag || (exports.WebcastChatMessage_CommentTag = {}));
    var EmoteUploadInfo_UserEmoteUploadSource;
    (function(EmoteUploadInfo_UserEmoteUploadSource2) {
      EmoteUploadInfo_UserEmoteUploadSource2[EmoteUploadInfo_UserEmoteUploadSource2["USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_ANCHOR"] = 0] = "USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_ANCHOR";
      EmoteUploadInfo_UserEmoteUploadSource2[EmoteUploadInfo_UserEmoteUploadSource2["USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_SUBSCRIBER"] = 1] = "USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_SUBSCRIBER";
      EmoteUploadInfo_UserEmoteUploadSource2[EmoteUploadInfo_UserEmoteUploadSource2["USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_MODERATOR"] = 2] = "USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_MODERATOR";
      EmoteUploadInfo_UserEmoteUploadSource2[EmoteUploadInfo_UserEmoteUploadSource2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(EmoteUploadInfo_UserEmoteUploadSource = exports.EmoteUploadInfo_UserEmoteUploadSource || (exports.EmoteUploadInfo_UserEmoteUploadSource = {}));
    var WebcastMemberMessage_DisplayStyle;
    (function(WebcastMemberMessage_DisplayStyle2) {
      WebcastMemberMessage_DisplayStyle2[WebcastMemberMessage_DisplayStyle2["DISPLAY_STYLE_NORMAL"] = 0] = "DISPLAY_STYLE_NORMAL";
      WebcastMemberMessage_DisplayStyle2[WebcastMemberMessage_DisplayStyle2["DISPLAY_STYLE_STAY"] = 1] = "DISPLAY_STYLE_STAY";
      WebcastMemberMessage_DisplayStyle2[WebcastMemberMessage_DisplayStyle2["DISPLAY_STYLE_CHAT"] = 2] = "DISPLAY_STYLE_CHAT";
      WebcastMemberMessage_DisplayStyle2[WebcastMemberMessage_DisplayStyle2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(WebcastMemberMessage_DisplayStyle = exports.WebcastMemberMessage_DisplayStyle || (exports.WebcastMemberMessage_DisplayStyle = {}));
    var WebcastMemberMessage_HitABStatus;
    (function(WebcastMemberMessage_HitABStatus2) {
      WebcastMemberMessage_HitABStatus2[WebcastMemberMessage_HitABStatus2["HIT_A_B_STATUS_HIT_AB_STATUS_NO_HIT"] = 0] = "HIT_A_B_STATUS_HIT_AB_STATUS_NO_HIT";
      WebcastMemberMessage_HitABStatus2[WebcastMemberMessage_HitABStatus2["HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_EXTERNAL_LINK_NEW_TEXT"] = 1] = "HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_EXTERNAL_LINK_NEW_TEXT";
      WebcastMemberMessage_HitABStatus2[WebcastMemberMessage_HitABStatus2["HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_RE_POST_NEW_TEXT"] = 2] = "HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_RE_POST_NEW_TEXT";
      WebcastMemberMessage_HitABStatus2[WebcastMemberMessage_HitABStatus2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(WebcastMemberMessage_HitABStatus = exports.WebcastMemberMessage_HitABStatus || (exports.WebcastMemberMessage_HitABStatus = {}));
    var WebcastBarrageMessage_BarrageType;
    (function(WebcastBarrageMessage_BarrageType2) {
      WebcastBarrageMessage_BarrageType2[WebcastBarrageMessage_BarrageType2["BARRAGE_TYPE_UNKNOWN"] = 0] = "BARRAGE_TYPE_UNKNOWN";
      WebcastBarrageMessage_BarrageType2[WebcastBarrageMessage_BarrageType2["BARRAGE_TYPE_E_COM_ORDERING"] = 1] = "BARRAGE_TYPE_E_COM_ORDERING";
      WebcastBarrageMessage_BarrageType2[WebcastBarrageMessage_BarrageType2["BARRAGE_TYPE_E_COM_BUYING"] = 2] = "BARRAGE_TYPE_E_COM_BUYING";
      WebcastBarrageMessage_BarrageType2[WebcastBarrageMessage_BarrageType2["BARRAGE_TYPE_NORMAL"] = 3] = "BARRAGE_TYPE_NORMAL";
      WebcastBarrageMessage_BarrageType2[WebcastBarrageMessage_BarrageType2["BARRAGE_TYPE_SUBSCRIBE"] = 4] = "BARRAGE_TYPE_SUBSCRIBE";
      WebcastBarrageMessage_BarrageType2[WebcastBarrageMessage_BarrageType2["BARRAGE_TYPE_EVENT_VIEW"] = 5] = "BARRAGE_TYPE_EVENT_VIEW";
      WebcastBarrageMessage_BarrageType2[WebcastBarrageMessage_BarrageType2["BARRAGE_TYPE_EVENT_REGISTERED"] = 6] = "BARRAGE_TYPE_EVENT_REGISTERED";
      WebcastBarrageMessage_BarrageType2[WebcastBarrageMessage_BarrageType2["BARRAGE_TYPE_SUBSCRIBE_GIFT"] = 7] = "BARRAGE_TYPE_SUBSCRIBE_GIFT";
      WebcastBarrageMessage_BarrageType2[WebcastBarrageMessage_BarrageType2["BARRAGE_TYPE_USER_UPGRADE"] = 8] = "BARRAGE_TYPE_USER_UPGRADE";
      WebcastBarrageMessage_BarrageType2[WebcastBarrageMessage_BarrageType2["BARRAGE_TYPE_GRADE_USER_ENTRANCE_NOTIFICATION"] = 9] = "BARRAGE_TYPE_GRADE_USER_ENTRANCE_NOTIFICATION";
      WebcastBarrageMessage_BarrageType2[WebcastBarrageMessage_BarrageType2["BARRAGE_TYPE_FANS_LEVEL_UPGRADE"] = 10] = "BARRAGE_TYPE_FANS_LEVEL_UPGRADE";
      WebcastBarrageMessage_BarrageType2[WebcastBarrageMessage_BarrageType2["BARRAGE_TYPE_FANS_LEVEL_ENTRANCE"] = 11] = "BARRAGE_TYPE_FANS_LEVEL_ENTRANCE";
      WebcastBarrageMessage_BarrageType2[WebcastBarrageMessage_BarrageType2["BARRAGE_TYPE_GAME_PARTNERSHIP"] = 12] = "BARRAGE_TYPE_GAME_PARTNERSHIP";
      WebcastBarrageMessage_BarrageType2[WebcastBarrageMessage_BarrageType2["BARRAGE_TYPE_GIFT_GALLERY"] = 13] = "BARRAGE_TYPE_GIFT_GALLERY";
      WebcastBarrageMessage_BarrageType2[WebcastBarrageMessage_BarrageType2["BARRAGE_TYPE_E_COM_BOUGHT"] = 14] = "BARRAGE_TYPE_E_COM_BOUGHT";
      WebcastBarrageMessage_BarrageType2[WebcastBarrageMessage_BarrageType2["BARRAGE_TYPE_COMMON_BARRAGE"] = 100] = "BARRAGE_TYPE_COMMON_BARRAGE";
      WebcastBarrageMessage_BarrageType2[WebcastBarrageMessage_BarrageType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(WebcastBarrageMessage_BarrageType = exports.WebcastBarrageMessage_BarrageType || (exports.WebcastBarrageMessage_BarrageType = {}));
    var WebcastBarrageMessage_ShowType;
    (function(WebcastBarrageMessage_ShowType2) {
      WebcastBarrageMessage_ShowType2[WebcastBarrageMessage_ShowType2["SHOW_TYPE_NORMAL"] = 0] = "SHOW_TYPE_NORMAL";
      WebcastBarrageMessage_ShowType2[WebcastBarrageMessage_ShowType2["SHOW_TYPE_FADE_IN_OUT"] = 1] = "SHOW_TYPE_FADE_IN_OUT";
      WebcastBarrageMessage_ShowType2[WebcastBarrageMessage_ShowType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(WebcastBarrageMessage_ShowType = exports.WebcastBarrageMessage_ShowType || (exports.WebcastBarrageMessage_ShowType = {}));
    var WebcastBarrageMessage_RenderType;
    (function(WebcastBarrageMessage_RenderType2) {
      WebcastBarrageMessage_RenderType2[WebcastBarrageMessage_RenderType2["RENDER_TYPE_NATIVE"] = 0] = "RENDER_TYPE_NATIVE";
      WebcastBarrageMessage_RenderType2[WebcastBarrageMessage_RenderType2["RENDER_TYPE_HYBRID"] = 1] = "RENDER_TYPE_HYBRID";
      WebcastBarrageMessage_RenderType2[WebcastBarrageMessage_RenderType2["RENDER_TYPE_ALPHA"] = 2] = "RENDER_TYPE_ALPHA";
      WebcastBarrageMessage_RenderType2[WebcastBarrageMessage_RenderType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(WebcastBarrageMessage_RenderType = exports.WebcastBarrageMessage_RenderType || (exports.WebcastBarrageMessage_RenderType = {}));
    var WebcastBarrageMessage_IconDisplayType;
    (function(WebcastBarrageMessage_IconDisplayType2) {
      WebcastBarrageMessage_IconDisplayType2[WebcastBarrageMessage_IconDisplayType2["ICON_DISPLAY_TYPE_IMAGE"] = 0] = "ICON_DISPLAY_TYPE_IMAGE";
      WebcastBarrageMessage_IconDisplayType2[WebcastBarrageMessage_IconDisplayType2["ICON_DISPLAY_TYPE_BADGE"] = 1] = "ICON_DISPLAY_TYPE_BADGE";
      WebcastBarrageMessage_IconDisplayType2[WebcastBarrageMessage_IconDisplayType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(WebcastBarrageMessage_IconDisplayType = exports.WebcastBarrageMessage_IconDisplayType || (exports.WebcastBarrageMessage_IconDisplayType = {}));
    var WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result;
    (function(WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result2) {
      WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result2[WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result2["RESULT_SUCCEED"] = 0] = "RESULT_SUCCEED";
      WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result2[WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result2["RESULT_FAILED"] = 1] = "RESULT_FAILED";
      WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result2[WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result2["RESULT_BOTH_SUCCEED"] = 2] = "RESULT_BOTH_SUCCEED";
      WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result2[WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    })(WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result = exports.WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result || (exports.WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result = {}));
    function createBaseCommonMessageData() {
      return {
        method: "",
        msgId: "0",
        roomId: "0",
        createTime: "0",
        monitor: 0,
        isShowMsg: false,
        describe: "",
        displayText: void 0,
        foldType: "0",
        anchorFoldType: "0",
        priorityScore: "0",
        logId: "",
        msgProcessFilterK: "",
        msgProcessFilterV: "",
        fromIdc: "",
        toIdc: "",
        filterMsgTagsList: [],
        sei: void 0,
        dependRootId: void 0,
        dependId: void 0,
        anchorPriorityScore: "0",
        roomMessageHeatLevel: "0",
        foldTypeForWeb: "0",
        anchorFoldTypeForWeb: "0",
        clientSendTime: "0",
        dispatchStrategy: 0
      };
    }
    exports.CommonMessageData = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.method !== "") {
          writer.uint32(10).string(message.method);
        }
        if (message.msgId !== "0") {
          writer.uint32(16).int64(message.msgId);
        }
        if (message.roomId !== "0") {
          writer.uint32(24).int64(message.roomId);
        }
        if (message.createTime !== "0") {
          writer.uint32(32).int64(message.createTime);
        }
        if (message.monitor !== 0) {
          writer.uint32(40).int32(message.monitor);
        }
        if (message.isShowMsg !== false) {
          writer.uint32(48).bool(message.isShowMsg);
        }
        if (message.describe !== "") {
          writer.uint32(58).string(message.describe);
        }
        if (message.displayText !== void 0) {
          exports.Text.encode(message.displayText, writer.uint32(66).fork()).join();
        }
        if (message.foldType !== "0") {
          writer.uint32(72).int64(message.foldType);
        }
        if (message.anchorFoldType !== "0") {
          writer.uint32(80).int64(message.anchorFoldType);
        }
        if (message.priorityScore !== "0") {
          writer.uint32(88).int64(message.priorityScore);
        }
        if (message.logId !== "") {
          writer.uint32(98).string(message.logId);
        }
        if (message.msgProcessFilterK !== "") {
          writer.uint32(106).string(message.msgProcessFilterK);
        }
        if (message.msgProcessFilterV !== "") {
          writer.uint32(114).string(message.msgProcessFilterV);
        }
        if (message.fromIdc !== "") {
          writer.uint32(122).string(message.fromIdc);
        }
        if (message.toIdc !== "") {
          writer.uint32(130).string(message.toIdc);
        }
        for (const v of message.filterMsgTagsList) {
          writer.uint32(138).string(v);
        }
        if (message.sei !== void 0) {
          exports.CommonMessageData_LiveMessageSEI.encode(message.sei, writer.uint32(146).fork()).join();
        }
        if (message.dependRootId !== void 0) {
          exports.CommonMessageData_LiveMessageID.encode(message.dependRootId, writer.uint32(154).fork()).join();
        }
        if (message.dependId !== void 0) {
          exports.CommonMessageData_LiveMessageID.encode(message.dependId, writer.uint32(162).fork()).join();
        }
        if (message.anchorPriorityScore !== "0") {
          writer.uint32(168).int64(message.anchorPriorityScore);
        }
        if (message.roomMessageHeatLevel !== "0") {
          writer.uint32(176).int64(message.roomMessageHeatLevel);
        }
        if (message.foldTypeForWeb !== "0") {
          writer.uint32(184).int64(message.foldTypeForWeb);
        }
        if (message.anchorFoldTypeForWeb !== "0") {
          writer.uint32(192).int64(message.anchorFoldTypeForWeb);
        }
        if (message.clientSendTime !== "0") {
          writer.uint32(200).int64(message.clientSendTime);
        }
        if (message.dispatchStrategy !== 0) {
          writer.uint32(208).int32(message.dispatchStrategy);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseCommonMessageData();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.method = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.msgId = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.roomId = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.createTime = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.monitor = reader.int32();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.isShowMsg = reader.bool();
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.describe = reader.string();
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.displayText = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.foldType = reader.int64().toString();
              continue;
            }
            case 10: {
              if (tag !== 80) {
                break;
              }
              message.anchorFoldType = reader.int64().toString();
              continue;
            }
            case 11: {
              if (tag !== 88) {
                break;
              }
              message.priorityScore = reader.int64().toString();
              continue;
            }
            case 12: {
              if (tag !== 98) {
                break;
              }
              message.logId = reader.string();
              continue;
            }
            case 13: {
              if (tag !== 106) {
                break;
              }
              message.msgProcessFilterK = reader.string();
              continue;
            }
            case 14: {
              if (tag !== 114) {
                break;
              }
              message.msgProcessFilterV = reader.string();
              continue;
            }
            case 15: {
              if (tag !== 122) {
                break;
              }
              message.fromIdc = reader.string();
              continue;
            }
            case 16: {
              if (tag !== 130) {
                break;
              }
              message.toIdc = reader.string();
              continue;
            }
            case 17: {
              if (tag !== 138) {
                break;
              }
              message.filterMsgTagsList.push(reader.string());
              continue;
            }
            case 18: {
              if (tag !== 146) {
                break;
              }
              message.sei = exports.CommonMessageData_LiveMessageSEI.decode(reader, reader.uint32());
              continue;
            }
            case 19: {
              if (tag !== 154) {
                break;
              }
              message.dependRootId = exports.CommonMessageData_LiveMessageID.decode(reader, reader.uint32());
              continue;
            }
            case 20: {
              if (tag !== 162) {
                break;
              }
              message.dependId = exports.CommonMessageData_LiveMessageID.decode(reader, reader.uint32());
              continue;
            }
            case 21: {
              if (tag !== 168) {
                break;
              }
              message.anchorPriorityScore = reader.int64().toString();
              continue;
            }
            case 22: {
              if (tag !== 176) {
                break;
              }
              message.roomMessageHeatLevel = reader.int64().toString();
              continue;
            }
            case 23: {
              if (tag !== 184) {
                break;
              }
              message.foldTypeForWeb = reader.int64().toString();
              continue;
            }
            case 24: {
              if (tag !== 192) {
                break;
              }
              message.anchorFoldTypeForWeb = reader.int64().toString();
              continue;
            }
            case 25: {
              if (tag !== 200) {
                break;
              }
              message.clientSendTime = reader.int64().toString();
              continue;
            }
            case 26: {
              if (tag !== 208) {
                break;
              }
              message.dispatchStrategy = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseCommonMessageData_LiveMessageSEI() {
      return { uniqueId: void 0, timestamp: "0" };
    }
    exports.CommonMessageData_LiveMessageSEI = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.uniqueId !== void 0) {
          exports.CommonMessageData_LiveMessageID.encode(message.uniqueId, writer.uint32(10).fork()).join();
        }
        if (message.timestamp !== "0") {
          writer.uint32(16).int64(message.timestamp);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseCommonMessageData_LiveMessageSEI();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.uniqueId = exports.CommonMessageData_LiveMessageID.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.timestamp = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseCommonMessageData_LiveMessageID() {
      return { primaryId: "", messageScene: "" };
    }
    exports.CommonMessageData_LiveMessageID = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.primaryId !== "") {
          writer.uint32(10).string(message.primaryId);
        }
        if (message.messageScene !== "") {
          writer.uint32(18).string(message.messageScene);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseCommonMessageData_LiveMessageID();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.primaryId = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.messageScene = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseText() {
      return { displayType: "", defaultPattern: "", defaultFormat: void 0, piecesList: [] };
    }
    exports.Text = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.displayType !== "") {
          writer.uint32(10).string(message.displayType);
        }
        if (message.defaultPattern !== "") {
          writer.uint32(18).string(message.defaultPattern);
        }
        if (message.defaultFormat !== void 0) {
          exports.Text_TextFormat.encode(message.defaultFormat, writer.uint32(26).fork()).join();
        }
        for (const v of message.piecesList) {
          exports.Text_TextPiece.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseText();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.displayType = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.defaultPattern = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.defaultFormat = exports.Text_TextFormat.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.piecesList.push(exports.Text_TextPiece.decode(reader, reader.uint32()));
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseText_TextPiece() {
      return {
        type: 0,
        format: void 0,
        stringValue: "",
        userValue: void 0,
        giftValue: void 0,
        patternRefValue: void 0
      };
    }
    exports.Text_TextPiece = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== 0) {
          writer.uint32(8).int32(message.type);
        }
        if (message.format !== void 0) {
          exports.Text_TextFormat.encode(message.format, writer.uint32(18).fork()).join();
        }
        if (message.stringValue !== "") {
          writer.uint32(90).string(message.stringValue);
        }
        if (message.userValue !== void 0) {
          exports.Text_TextPieceUser.encode(message.userValue, writer.uint32(170).fork()).join();
        }
        if (message.giftValue !== void 0) {
          exports.Text_TextPieceGift.encode(message.giftValue, writer.uint32(178).fork()).join();
        }
        if (message.patternRefValue !== void 0) {
          exports.Text_TextPiecePatternRef.encode(message.patternRefValue, writer.uint32(194).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseText_TextPiece();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.type = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.format = exports.Text_TextFormat.decode(reader, reader.uint32());
              continue;
            }
            case 11: {
              if (tag !== 90) {
                break;
              }
              message.stringValue = reader.string();
              continue;
            }
            case 21: {
              if (tag !== 170) {
                break;
              }
              message.userValue = exports.Text_TextPieceUser.decode(reader, reader.uint32());
              continue;
            }
            case 22: {
              if (tag !== 178) {
                break;
              }
              message.giftValue = exports.Text_TextPieceGift.decode(reader, reader.uint32());
              continue;
            }
            case 24: {
              if (tag !== 194) {
                break;
              }
              message.patternRefValue = exports.Text_TextPiecePatternRef.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseText_TextFormat() {
      return {
        color: "",
        bold: false,
        italic: false,
        weight: 0,
        italicAngle: 0,
        fontSize: 0,
        useHeighLightColor: false,
        useRemoteClor: false
      };
    }
    exports.Text_TextFormat = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.color !== "") {
          writer.uint32(10).string(message.color);
        }
        if (message.bold !== false) {
          writer.uint32(16).bool(message.bold);
        }
        if (message.italic !== false) {
          writer.uint32(24).bool(message.italic);
        }
        if (message.weight !== 0) {
          writer.uint32(32).int32(message.weight);
        }
        if (message.italicAngle !== 0) {
          writer.uint32(40).int32(message.italicAngle);
        }
        if (message.fontSize !== 0) {
          writer.uint32(48).int32(message.fontSize);
        }
        if (message.useHeighLightColor !== false) {
          writer.uint32(56).bool(message.useHeighLightColor);
        }
        if (message.useRemoteClor !== false) {
          writer.uint32(64).bool(message.useRemoteClor);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseText_TextFormat();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.color = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.bold = reader.bool();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.italic = reader.bool();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.weight = reader.int32();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.italicAngle = reader.int32();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.fontSize = reader.int32();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.useHeighLightColor = reader.bool();
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.useRemoteClor = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseText_TextPieceGift() {
      return { giftId: 0, nameRef: void 0, showType: 0, colorId: "0" };
    }
    exports.Text_TextPieceGift = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.giftId !== 0) {
          writer.uint32(8).int32(message.giftId);
        }
        if (message.nameRef !== void 0) {
          exports.Text_PatternRef.encode(message.nameRef, writer.uint32(18).fork()).join();
        }
        if (message.showType !== 0) {
          writer.uint32(24).int32(message.showType);
        }
        if (message.colorId !== "0") {
          writer.uint32(32).int64(message.colorId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseText_TextPieceGift();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.giftId = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.nameRef = exports.Text_PatternRef.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.showType = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.colorId = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseText_TextPiecePatternRef() {
      return { key: "", defaultPattern: "" };
    }
    exports.Text_TextPiecePatternRef = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
          writer.uint32(10).string(message.key);
        }
        if (message.defaultPattern !== "") {
          writer.uint32(18).string(message.defaultPattern);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseText_TextPiecePatternRef();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.key = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.defaultPattern = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseText_TextPieceUser() {
      return { user: void 0, withColon: false };
    }
    exports.Text_TextPieceUser = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.user !== void 0) {
          exports.User.encode(message.user, writer.uint32(10).fork()).join();
        }
        if (message.withColon !== false) {
          writer.uint32(16).bool(message.withColon);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseText_TextPieceUser();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.user = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.withColon = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseText_PatternRef() {
      return { key: "", defaultPattern: "" };
    }
    exports.Text_PatternRef = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
          writer.uint32(10).string(message.key);
        }
        if (message.defaultPattern !== "") {
          writer.uint32(18).string(message.defaultPattern);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseText_PatternRef();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.key = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.defaultPattern = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseImage() {
      return {
        url: [],
        mUri: "",
        height: 0,
        width: 0,
        avgColor: "",
        imageType: 0,
        schema: "",
        content: void 0,
        isAnimated: false
      };
    }
    exports.Image = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.url) {
          writer.uint32(10).string(v);
        }
        if (message.mUri !== "") {
          writer.uint32(18).string(message.mUri);
        }
        if (message.height !== 0) {
          writer.uint32(24).int32(message.height);
        }
        if (message.width !== 0) {
          writer.uint32(32).int32(message.width);
        }
        if (message.avgColor !== "") {
          writer.uint32(42).string(message.avgColor);
        }
        if (message.imageType !== 0) {
          writer.uint32(48).int32(message.imageType);
        }
        if (message.schema !== "") {
          writer.uint32(58).string(message.schema);
        }
        if (message.content !== void 0) {
          exports.Image_Content.encode(message.content, writer.uint32(66).fork()).join();
        }
        if (message.isAnimated !== false) {
          writer.uint32(72).bool(message.isAnimated);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseImage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.url.push(reader.string());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.mUri = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.height = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.width = reader.int32();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.avgColor = reader.string();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.imageType = reader.int32();
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.schema = reader.string();
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.content = exports.Image_Content.decode(reader, reader.uint32());
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.isAnimated = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseImage_Content() {
      return { name: "", fontColor: "", level: "0" };
    }
    exports.Image_Content = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
          writer.uint32(10).string(message.name);
        }
        if (message.fontColor !== "") {
          writer.uint32(18).string(message.fontColor);
        }
        if (message.level !== "0") {
          writer.uint32(24).int64(message.level);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseImage_Content();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.name = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.fontColor = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.level = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBadgeStruct() {
      return {
        badgeDisplayType: 0,
        badgePriorityType: 0,
        badgeScene: 0,
        position: 0,
        displayStatus: 0,
        greyedByClient: "0",
        exhibitionType: 0,
        schemaUrl: "",
        display: false,
        logExtra: void 0,
        image: void 0,
        text: void 0,
        str: void 0,
        combine: void 0,
        isCustomized: false
      };
    }
    exports.BadgeStruct = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.badgeDisplayType !== 0) {
          writer.uint32(8).int32(message.badgeDisplayType);
        }
        if (message.badgePriorityType !== 0) {
          writer.uint32(16).int32(message.badgePriorityType);
        }
        if (message.badgeScene !== 0) {
          writer.uint32(24).int32(message.badgeScene);
        }
        if (message.position !== 0) {
          writer.uint32(32).int32(message.position);
        }
        if (message.displayStatus !== 0) {
          writer.uint32(40).int32(message.displayStatus);
        }
        if (message.greyedByClient !== "0") {
          writer.uint32(48).int64(message.greyedByClient);
        }
        if (message.exhibitionType !== 0) {
          writer.uint32(56).int32(message.exhibitionType);
        }
        if (message.schemaUrl !== "") {
          writer.uint32(82).string(message.schemaUrl);
        }
        if (message.display !== false) {
          writer.uint32(88).bool(message.display);
        }
        if (message.logExtra !== void 0) {
          exports.PrivilegeLogExtra.encode(message.logExtra, writer.uint32(98).fork()).join();
        }
        if (message.image !== void 0) {
          exports.BadgeStruct_ImageBadge.encode(message.image, writer.uint32(162).fork()).join();
        }
        if (message.text !== void 0) {
          exports.BadgeStruct_TextBadge.encode(message.text, writer.uint32(170).fork()).join();
        }
        if (message.str !== void 0) {
          exports.BadgeStruct_StringBadge.encode(message.str, writer.uint32(178).fork()).join();
        }
        if (message.combine !== void 0) {
          exports.BadgeStruct_CombineBadge.encode(message.combine, writer.uint32(186).fork()).join();
        }
        if (message.isCustomized !== false) {
          writer.uint32(192).bool(message.isCustomized);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBadgeStruct();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.badgeDisplayType = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.badgePriorityType = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.badgeScene = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.position = reader.int32();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.displayStatus = reader.int32();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.greyedByClient = reader.int64().toString();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.exhibitionType = reader.int32();
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              message.schemaUrl = reader.string();
              continue;
            }
            case 11: {
              if (tag !== 88) {
                break;
              }
              message.display = reader.bool();
              continue;
            }
            case 12: {
              if (tag !== 98) {
                break;
              }
              message.logExtra = exports.PrivilegeLogExtra.decode(reader, reader.uint32());
              continue;
            }
            case 20: {
              if (tag !== 162) {
                break;
              }
              message.image = exports.BadgeStruct_ImageBadge.decode(reader, reader.uint32());
              continue;
            }
            case 21: {
              if (tag !== 170) {
                break;
              }
              message.text = exports.BadgeStruct_TextBadge.decode(reader, reader.uint32());
              continue;
            }
            case 22: {
              if (tag !== 178) {
                break;
              }
              message.str = exports.BadgeStruct_StringBadge.decode(reader, reader.uint32());
              continue;
            }
            case 23: {
              if (tag !== 186) {
                break;
              }
              message.combine = exports.BadgeStruct_CombineBadge.decode(reader, reader.uint32());
              continue;
            }
            case 24: {
              if (tag !== 192) {
                break;
              }
              message.isCustomized = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBadgeStruct_CombineBadge() {
      return {
        badgeDisplayType: 0,
        icon: void 0,
        text: void 0,
        str: "",
        padding: void 0,
        fontStyle: void 0,
        profileCardPanel: void 0,
        background: void 0,
        backgroundDarkMode: void 0,
        iconAutoMirrored: false,
        bgAutoMirrored: false,
        publicScreenShowStyle: 0,
        personalCardShowStyle: 0,
        rankListOnlineAudienceShowStyle: 0,
        multiGuestShowStyle: 0,
        arrowConfig: void 0,
        paddingNewFont: void 0
      };
    }
    exports.BadgeStruct_CombineBadge = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.badgeDisplayType !== 0) {
          writer.uint32(8).int32(message.badgeDisplayType);
        }
        if (message.icon !== void 0) {
          exports.Image.encode(message.icon, writer.uint32(18).fork()).join();
        }
        if (message.text !== void 0) {
          exports.BadgeStruct_TextBadge.encode(message.text, writer.uint32(26).fork()).join();
        }
        if (message.str !== "") {
          writer.uint32(34).string(message.str);
        }
        if (message.padding !== void 0) {
          exports.BadgeStruct_PaddingInfo.encode(message.padding, writer.uint32(42).fork()).join();
        }
        if (message.fontStyle !== void 0) {
          exports.FontStyle.encode(message.fontStyle, writer.uint32(50).fork()).join();
        }
        if (message.profileCardPanel !== void 0) {
          exports.BadgeStruct_ProfileCardPanel.encode(message.profileCardPanel, writer.uint32(58).fork()).join();
        }
        if (message.background !== void 0) {
          exports.BadgeStruct_CombineBadgeBackground.encode(message.background, writer.uint32(90).fork()).join();
        }
        if (message.backgroundDarkMode !== void 0) {
          exports.BadgeStruct_CombineBadgeBackground.encode(message.backgroundDarkMode, writer.uint32(98).fork()).join();
        }
        if (message.iconAutoMirrored !== false) {
          writer.uint32(104).bool(message.iconAutoMirrored);
        }
        if (message.bgAutoMirrored !== false) {
          writer.uint32(112).bool(message.bgAutoMirrored);
        }
        if (message.publicScreenShowStyle !== 0) {
          writer.uint32(120).int32(message.publicScreenShowStyle);
        }
        if (message.personalCardShowStyle !== 0) {
          writer.uint32(128).int32(message.personalCardShowStyle);
        }
        if (message.rankListOnlineAudienceShowStyle !== 0) {
          writer.uint32(136).int32(message.rankListOnlineAudienceShowStyle);
        }
        if (message.multiGuestShowStyle !== 0) {
          writer.uint32(144).int32(message.multiGuestShowStyle);
        }
        if (message.arrowConfig !== void 0) {
          exports.BadgeStruct_ArrowConfig.encode(message.arrowConfig, writer.uint32(154).fork()).join();
        }
        if (message.paddingNewFont !== void 0) {
          exports.BadgeStruct_PaddingInfo.encode(message.paddingNewFont, writer.uint32(162).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBadgeStruct_CombineBadge();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.badgeDisplayType = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.icon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.text = exports.BadgeStruct_TextBadge.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.str = reader.string();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.padding = exports.BadgeStruct_PaddingInfo.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.fontStyle = exports.FontStyle.decode(reader, reader.uint32());
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.profileCardPanel = exports.BadgeStruct_ProfileCardPanel.decode(reader, reader.uint32());
              continue;
            }
            case 11: {
              if (tag !== 90) {
                break;
              }
              message.background = exports.BadgeStruct_CombineBadgeBackground.decode(reader, reader.uint32());
              continue;
            }
            case 12: {
              if (tag !== 98) {
                break;
              }
              message.backgroundDarkMode = exports.BadgeStruct_CombineBadgeBackground.decode(reader, reader.uint32());
              continue;
            }
            case 13: {
              if (tag !== 104) {
                break;
              }
              message.iconAutoMirrored = reader.bool();
              continue;
            }
            case 14: {
              if (tag !== 112) {
                break;
              }
              message.bgAutoMirrored = reader.bool();
              continue;
            }
            case 15: {
              if (tag !== 120) {
                break;
              }
              message.publicScreenShowStyle = reader.int32();
              continue;
            }
            case 16: {
              if (tag !== 128) {
                break;
              }
              message.personalCardShowStyle = reader.int32();
              continue;
            }
            case 17: {
              if (tag !== 136) {
                break;
              }
              message.rankListOnlineAudienceShowStyle = reader.int32();
              continue;
            }
            case 18: {
              if (tag !== 144) {
                break;
              }
              message.multiGuestShowStyle = reader.int32();
              continue;
            }
            case 19: {
              if (tag !== 154) {
                break;
              }
              message.arrowConfig = exports.BadgeStruct_ArrowConfig.decode(reader, reader.uint32());
              continue;
            }
            case 20: {
              if (tag !== 162) {
                break;
              }
              message.paddingNewFont = exports.BadgeStruct_PaddingInfo.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBadgeStruct_ArrowConfig() {
      return { icon: void 0 };
    }
    exports.BadgeStruct_ArrowConfig = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.icon !== void 0) {
          exports.Image.encode(message.icon, writer.uint32(10).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBadgeStruct_ArrowConfig();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.icon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBadgeStruct_ProfileContent() {
      return { useContent: false, iconList: [], numberConfig: void 0 };
    }
    exports.BadgeStruct_ProfileContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.useContent !== false) {
          writer.uint32(8).bool(message.useContent);
        }
        for (const v of message.iconList) {
          exports.BadgeStruct_IconConfig.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.numberConfig !== void 0) {
          exports.BadgeStruct_NumberConfig.encode(message.numberConfig, writer.uint32(26).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBadgeStruct_ProfileContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.useContent = reader.bool();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.iconList.push(exports.BadgeStruct_IconConfig.decode(reader, reader.uint32()));
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.numberConfig = exports.BadgeStruct_NumberConfig.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBadgeStruct_ProjectionConfig() {
      return { useProjection: false, icon: void 0 };
    }
    exports.BadgeStruct_ProjectionConfig = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.useProjection !== false) {
          writer.uint32(8).bool(message.useProjection);
        }
        if (message.icon !== void 0) {
          exports.Image.encode(message.icon, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBadgeStruct_ProjectionConfig();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.useProjection = reader.bool();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.icon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBadgeStruct_NumberConfig() {
      return { number: "0", fontStyle: void 0, background: void 0 };
    }
    exports.BadgeStruct_NumberConfig = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.number !== "0") {
          writer.uint32(8).int64(message.number);
        }
        if (message.fontStyle !== void 0) {
          exports.FontStyle.encode(message.fontStyle, writer.uint32(18).fork()).join();
        }
        if (message.background !== void 0) {
          exports.BadgeStruct_CombineBadgeBackground.encode(message.background, writer.uint32(26).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBadgeStruct_NumberConfig();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.number = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.fontStyle = exports.FontStyle.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.background = exports.BadgeStruct_CombineBadgeBackground.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBadgeStruct_ProfileCardPanel() {
      return { useNewProfileCardStyle: false, projectionConfig: void 0, profileContent: void 0 };
    }
    exports.BadgeStruct_ProfileCardPanel = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.useNewProfileCardStyle !== false) {
          writer.uint32(8).bool(message.useNewProfileCardStyle);
        }
        if (message.projectionConfig !== void 0) {
          exports.BadgeStruct_ProjectionConfig.encode(message.projectionConfig, writer.uint32(26).fork()).join();
        }
        if (message.profileContent !== void 0) {
          exports.BadgeStruct_ProfileContent.encode(message.profileContent, writer.uint32(34).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBadgeStruct_ProfileCardPanel();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.useNewProfileCardStyle = reader.bool();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.projectionConfig = exports.BadgeStruct_ProjectionConfig.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.profileContent = exports.BadgeStruct_ProfileContent.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBadgeStruct_CombineBadgeBackground() {
      return { image: void 0, backgroundColorCode: "", borderColorCode: "" };
    }
    exports.BadgeStruct_CombineBadgeBackground = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.image !== void 0) {
          exports.Image.encode(message.image, writer.uint32(10).fork()).join();
        }
        if (message.backgroundColorCode !== "") {
          writer.uint32(18).string(message.backgroundColorCode);
        }
        if (message.borderColorCode !== "") {
          writer.uint32(26).string(message.borderColorCode);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBadgeStruct_CombineBadgeBackground();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.image = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.backgroundColorCode = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.borderColorCode = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBadgeStruct_ImageBadge() {
      return { badgeDisplayType: 0, image: void 0 };
    }
    exports.BadgeStruct_ImageBadge = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.badgeDisplayType !== 0) {
          writer.uint32(8).int32(message.badgeDisplayType);
        }
        if (message.image !== void 0) {
          exports.Image.encode(message.image, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBadgeStruct_ImageBadge();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.badgeDisplayType = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.image = exports.Image.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBadgeStruct_TextBadge() {
      return { badgeDisplayType: 0, key: "", defaultPattern: "", pieces: [] };
    }
    exports.BadgeStruct_TextBadge = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.badgeDisplayType !== 0) {
          writer.uint32(8).int32(message.badgeDisplayType);
        }
        if (message.key !== "") {
          writer.uint32(18).string(message.key);
        }
        if (message.defaultPattern !== "") {
          writer.uint32(26).string(message.defaultPattern);
        }
        for (const v of message.pieces) {
          writer.uint32(34).string(v);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBadgeStruct_TextBadge();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.badgeDisplayType = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.key = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.defaultPattern = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.pieces.push(reader.string());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBadgeStruct_IconConfig() {
      return { icon: void 0, background: void 0 };
    }
    exports.BadgeStruct_IconConfig = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.icon !== void 0) {
          exports.Image.encode(message.icon, writer.uint32(10).fork()).join();
        }
        if (message.background !== void 0) {
          exports.BadgeStruct_CombineBadgeBackground.encode(message.background, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBadgeStruct_IconConfig();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.icon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.background = exports.BadgeStruct_CombineBadgeBackground.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBadgeStruct_StringBadge() {
      return { badgeDisplayType: 0, str: "" };
    }
    exports.BadgeStruct_StringBadge = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.badgeDisplayType !== 0) {
          writer.uint32(8).int32(message.badgeDisplayType);
        }
        if (message.str !== "") {
          writer.uint32(18).string(message.str);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBadgeStruct_StringBadge();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.badgeDisplayType = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.str = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBadgeStruct_PaddingInfo() {
      return {
        useSpecific: false,
        middlePadding: 0,
        badgeWidth: 0,
        leftPadding: 0,
        rightPadding: 0,
        iconTopPadding: 0,
        iconBottomPadding: 0,
        horizontalPaddingRule: 0,
        verticalPaddingRule: 0
      };
    }
    exports.BadgeStruct_PaddingInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.useSpecific !== false) {
          writer.uint32(8).bool(message.useSpecific);
        }
        if (message.middlePadding !== 0) {
          writer.uint32(16).int32(message.middlePadding);
        }
        if (message.badgeWidth !== 0) {
          writer.uint32(24).int32(message.badgeWidth);
        }
        if (message.leftPadding !== 0) {
          writer.uint32(32).int32(message.leftPadding);
        }
        if (message.rightPadding !== 0) {
          writer.uint32(40).int32(message.rightPadding);
        }
        if (message.iconTopPadding !== 0) {
          writer.uint32(48).int32(message.iconTopPadding);
        }
        if (message.iconBottomPadding !== 0) {
          writer.uint32(56).int32(message.iconBottomPadding);
        }
        if (message.horizontalPaddingRule !== 0) {
          writer.uint32(64).int32(message.horizontalPaddingRule);
        }
        if (message.verticalPaddingRule !== 0) {
          writer.uint32(72).int32(message.verticalPaddingRule);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBadgeStruct_PaddingInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.useSpecific = reader.bool();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.middlePadding = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.badgeWidth = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.leftPadding = reader.int32();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.rightPadding = reader.int32();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.iconTopPadding = reader.int32();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.iconBottomPadding = reader.int32();
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.horizontalPaddingRule = reader.int32();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.verticalPaddingRule = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseGift() {
      return {
        giftImage: void 0,
        describe: "",
        duration: 0,
        id: "0",
        forLinkMic: false,
        combo: false,
        giftType: 0,
        diamondCount: 0,
        isDisplayedOnPanel: false,
        primaryEffectId: "0",
        giftLabelIcon: void 0,
        giftName: "",
        icon: void 0,
        goldEffect: "",
        previewImage: void 0,
        giftPanelBanner: void 0,
        isBroadcastGift: false,
        isEffectBefview: false,
        isRandomGift: false,
        isBoxGift: false,
        canPutInGiftBox: false,
        giftBoxInfo: void 0
      };
    }
    exports.Gift = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.giftImage !== void 0) {
          exports.Image.encode(message.giftImage, writer.uint32(10).fork()).join();
        }
        if (message.describe !== "") {
          writer.uint32(18).string(message.describe);
        }
        if (message.duration !== 0) {
          writer.uint32(32).int32(message.duration);
        }
        if (message.id !== "0") {
          writer.uint32(40).int64(message.id);
        }
        if (message.forLinkMic !== false) {
          writer.uint32(56).bool(message.forLinkMic);
        }
        if (message.combo !== false) {
          writer.uint32(80).bool(message.combo);
        }
        if (message.giftType !== 0) {
          writer.uint32(88).int32(message.giftType);
        }
        if (message.diamondCount !== 0) {
          writer.uint32(96).int32(message.diamondCount);
        }
        if (message.isDisplayedOnPanel !== false) {
          writer.uint32(104).bool(message.isDisplayedOnPanel);
        }
        if (message.primaryEffectId !== "0") {
          writer.uint32(112).int64(message.primaryEffectId);
        }
        if (message.giftLabelIcon !== void 0) {
          exports.Image.encode(message.giftLabelIcon, writer.uint32(122).fork()).join();
        }
        if (message.giftName !== "") {
          writer.uint32(130).string(message.giftName);
        }
        if (message.icon !== void 0) {
          exports.Image.encode(message.icon, writer.uint32(170).fork()).join();
        }
        if (message.goldEffect !== "") {
          writer.uint32(194).string(message.goldEffect);
        }
        if (message.previewImage !== void 0) {
          exports.Image.encode(message.previewImage, writer.uint32(378).fork()).join();
        }
        if (message.giftPanelBanner !== void 0) {
          exports.Gift_GiftPanelBanner.encode(message.giftPanelBanner, writer.uint32(386).fork()).join();
        }
        if (message.isBroadcastGift !== false) {
          writer.uint32(392).bool(message.isBroadcastGift);
        }
        if (message.isEffectBefview !== false) {
          writer.uint32(400).bool(message.isEffectBefview);
        }
        if (message.isRandomGift !== false) {
          writer.uint32(408).bool(message.isRandomGift);
        }
        if (message.isBoxGift !== false) {
          writer.uint32(416).bool(message.isBoxGift);
        }
        if (message.canPutInGiftBox !== false) {
          writer.uint32(424).bool(message.canPutInGiftBox);
        }
        if (message.giftBoxInfo !== void 0) {
          exports.Gift_GiftBoxInfo.encode(message.giftBoxInfo, writer.uint32(434).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseGift();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.giftImage = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.describe = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.duration = reader.int32();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.id = reader.int64().toString();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.forLinkMic = reader.bool();
              continue;
            }
            case 10: {
              if (tag !== 80) {
                break;
              }
              message.combo = reader.bool();
              continue;
            }
            case 11: {
              if (tag !== 88) {
                break;
              }
              message.giftType = reader.int32();
              continue;
            }
            case 12: {
              if (tag !== 96) {
                break;
              }
              message.diamondCount = reader.int32();
              continue;
            }
            case 13: {
              if (tag !== 104) {
                break;
              }
              message.isDisplayedOnPanel = reader.bool();
              continue;
            }
            case 14: {
              if (tag !== 112) {
                break;
              }
              message.primaryEffectId = reader.int64().toString();
              continue;
            }
            case 15: {
              if (tag !== 122) {
                break;
              }
              message.giftLabelIcon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 16: {
              if (tag !== 130) {
                break;
              }
              message.giftName = reader.string();
              continue;
            }
            case 21: {
              if (tag !== 170) {
                break;
              }
              message.icon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 24: {
              if (tag !== 194) {
                break;
              }
              message.goldEffect = reader.string();
              continue;
            }
            case 47: {
              if (tag !== 378) {
                break;
              }
              message.previewImage = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 48: {
              if (tag !== 386) {
                break;
              }
              message.giftPanelBanner = exports.Gift_GiftPanelBanner.decode(reader, reader.uint32());
              continue;
            }
            case 49: {
              if (tag !== 392) {
                break;
              }
              message.isBroadcastGift = reader.bool();
              continue;
            }
            case 50: {
              if (tag !== 400) {
                break;
              }
              message.isEffectBefview = reader.bool();
              continue;
            }
            case 51: {
              if (tag !== 408) {
                break;
              }
              message.isRandomGift = reader.bool();
              continue;
            }
            case 52: {
              if (tag !== 416) {
                break;
              }
              message.isBoxGift = reader.bool();
              continue;
            }
            case 53: {
              if (tag !== 424) {
                break;
              }
              message.canPutInGiftBox = reader.bool();
              continue;
            }
            case 54: {
              if (tag !== 434) {
                break;
              }
              message.giftBoxInfo = exports.Gift_GiftBoxInfo.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseGift_GiftPanelBanner() {
      return {
        displayText: void 0,
        leftIcon: void 0,
        schemaUrl: "",
        bgColors: [],
        bannerLynxUrl: "",
        bannerPriority: 0,
        bannerLynxExtra: "",
        bgImage: void 0
      };
    }
    exports.Gift_GiftPanelBanner = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.displayText !== void 0) {
          exports.Text.encode(message.displayText, writer.uint32(10).fork()).join();
        }
        if (message.leftIcon !== void 0) {
          exports.Image.encode(message.leftIcon, writer.uint32(18).fork()).join();
        }
        if (message.schemaUrl !== "") {
          writer.uint32(26).string(message.schemaUrl);
        }
        for (const v of message.bgColors) {
          writer.uint32(42).string(v);
        }
        if (message.bannerLynxUrl !== "") {
          writer.uint32(50).string(message.bannerLynxUrl);
        }
        if (message.bannerPriority !== 0) {
          writer.uint32(56).int32(message.bannerPriority);
        }
        if (message.bannerLynxExtra !== "") {
          writer.uint32(66).string(message.bannerLynxExtra);
        }
        if (message.bgImage !== void 0) {
          exports.Image.encode(message.bgImage, writer.uint32(74).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseGift_GiftPanelBanner();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.displayText = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.leftIcon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.schemaUrl = reader.string();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.bgColors.push(reader.string());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.bannerLynxUrl = reader.string();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.bannerPriority = reader.int32();
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.bannerLynxExtra = reader.string();
              continue;
            }
            case 9: {
              if (tag !== 74) {
                break;
              }
              message.bgImage = exports.Image.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseGift_BatchGiftInfo() {
      return { canBatchSend: false, availableCounts: [] };
    }
    exports.Gift_BatchGiftInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.canBatchSend !== false) {
          writer.uint32(8).bool(message.canBatchSend);
        }
        writer.uint32(18).fork();
        for (const v of message.availableCounts) {
          writer.int64(v);
        }
        writer.join();
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseGift_BatchGiftInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.canBatchSend = reader.bool();
              continue;
            }
            case 2: {
              if (tag === 16) {
                message.availableCounts.push(reader.int64().toString());
                continue;
              }
              if (tag === 18) {
                const end2 = reader.uint32() + reader.pos;
                while (reader.pos < end2) {
                  message.availableCounts.push(reader.int64().toString());
                }
                continue;
              }
              break;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseGift_CrossScreenEffectInfo() {
      return { singleActionEffectIds: {}, actionEffectIds: {}, reactionEffectIds: {} };
    }
    exports.Gift_CrossScreenEffectInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        Object.entries(message.singleActionEffectIds).forEach(([key, value]) => {
          exports.Gift_CrossScreenEffectInfo_SingleActionEffectIdsEntry.encode({ key, value }, writer.uint32(10).fork()).join();
        });
        Object.entries(message.actionEffectIds).forEach(([key, value]) => {
          exports.Gift_CrossScreenEffectInfo_ActionEffectIdsEntry.encode({ key, value }, writer.uint32(18).fork()).join();
        });
        Object.entries(message.reactionEffectIds).forEach(([key, value]) => {
          exports.Gift_CrossScreenEffectInfo_ReactionEffectIdsEntry.encode({ key, value }, writer.uint32(26).fork()).join();
        });
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseGift_CrossScreenEffectInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              const entry1 = exports.Gift_CrossScreenEffectInfo_SingleActionEffectIdsEntry.decode(reader, reader.uint32());
              if (entry1.value !== void 0) {
                message.singleActionEffectIds[entry1.key] = entry1.value;
              }
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              const entry2 = exports.Gift_CrossScreenEffectInfo_ActionEffectIdsEntry.decode(reader, reader.uint32());
              if (entry2.value !== void 0) {
                message.actionEffectIds[entry2.key] = entry2.value;
              }
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              const entry3 = exports.Gift_CrossScreenEffectInfo_ReactionEffectIdsEntry.decode(reader, reader.uint32());
              if (entry3.value !== void 0) {
                message.reactionEffectIds[entry3.key] = entry3.value;
              }
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseGift_CrossScreenEffectInfo_SingleActionEffectIdsEntry() {
      return { key: "0", value: 0 };
    }
    exports.Gift_CrossScreenEffectInfo_SingleActionEffectIdsEntry = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "0") {
          writer.uint32(8).int64(message.key);
        }
        if (message.value !== 0) {
          writer.uint32(16).int32(message.value);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseGift_CrossScreenEffectInfo_SingleActionEffectIdsEntry();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.key = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.value = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseGift_CrossScreenEffectInfo_ActionEffectIdsEntry() {
      return { key: "0", value: 0 };
    }
    exports.Gift_CrossScreenEffectInfo_ActionEffectIdsEntry = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "0") {
          writer.uint32(8).int64(message.key);
        }
        if (message.value !== 0) {
          writer.uint32(16).int32(message.value);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseGift_CrossScreenEffectInfo_ActionEffectIdsEntry();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.key = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.value = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseGift_CrossScreenEffectInfo_ReactionEffectIdsEntry() {
      return { key: "0", value: 0 };
    }
    exports.Gift_CrossScreenEffectInfo_ReactionEffectIdsEntry = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "0") {
          writer.uint32(8).int64(message.key);
        }
        if (message.value !== 0) {
          writer.uint32(16).int32(message.value);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseGift_CrossScreenEffectInfo_ReactionEffectIdsEntry();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.key = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.value = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseGift_GiftSponsorInfo() {
      return { sponsorId: "0", sponsorCount: "0", currentCount: "0", leftCountToSponsor: "0", canSponsor: false };
    }
    exports.Gift_GiftSponsorInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sponsorId !== "0") {
          writer.uint32(8).int64(message.sponsorId);
        }
        if (message.sponsorCount !== "0") {
          writer.uint32(16).int64(message.sponsorCount);
        }
        if (message.currentCount !== "0") {
          writer.uint32(24).int64(message.currentCount);
        }
        if (message.leftCountToSponsor !== "0") {
          writer.uint32(32).int64(message.leftCountToSponsor);
        }
        if (message.canSponsor !== false) {
          writer.uint32(40).bool(message.canSponsor);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseGift_GiftSponsorInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.sponsorId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.sponsorCount = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.currentCount = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.leftCountToSponsor = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.canSponsor = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseGift_UGGiftStructInfo() {
      return { isUgGift: false, ugPointsCost: "0" };
    }
    exports.Gift_UGGiftStructInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isUgGift !== false) {
          writer.uint32(8).bool(message.isUgGift);
        }
        if (message.ugPointsCost !== "0") {
          writer.uint32(16).int64(message.ugPointsCost);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseGift_UGGiftStructInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.isUgGift = reader.bool();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.ugPointsCost = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseGift_GiftSkin() {
      return { giftSkinId: "0", giftSkinName: "", staticImage: void 0, animatedImage: void 0 };
    }
    exports.Gift_GiftSkin = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.giftSkinId !== "0") {
          writer.uint32(8).int64(message.giftSkinId);
        }
        if (message.giftSkinName !== "") {
          writer.uint32(18).string(message.giftSkinName);
        }
        if (message.staticImage !== void 0) {
          exports.Image.encode(message.staticImage, writer.uint32(26).fork()).join();
        }
        if (message.animatedImage !== void 0) {
          exports.Image.encode(message.animatedImage, writer.uint32(34).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseGift_GiftSkin();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.giftSkinId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.giftSkinName = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.staticImage = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.animatedImage = exports.Image.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseGift_GiftText() {
      return { giftTextId: "0", giftTextName: "" };
    }
    exports.Gift_GiftText = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.giftTextId !== "0") {
          writer.uint32(8).int64(message.giftTextId);
        }
        if (message.giftTextName !== "") {
          writer.uint32(18).string(message.giftTextName);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseGift_GiftText();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.giftTextId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.giftTextName = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseGift_GiftSkinToGiftTextsInfo() {
      return { giftSkinId: "0", giftTextIds: [] };
    }
    exports.Gift_GiftSkinToGiftTextsInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.giftSkinId !== "0") {
          writer.uint32(8).int64(message.giftSkinId);
        }
        writer.uint32(18).fork();
        for (const v of message.giftTextIds) {
          writer.int64(v);
        }
        writer.join();
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseGift_GiftSkinToGiftTextsInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.giftSkinId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag === 16) {
                message.giftTextIds.push(reader.int64().toString());
                continue;
              }
              if (tag === 18) {
                const end2 = reader.uint32() + reader.pos;
                while (reader.pos < end2) {
                  message.giftTextIds.push(reader.int64().toString());
                }
                continue;
              }
              break;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseGift_GiftBoxInfo() {
      return { capacity: "0", isPrimaryBox: false, schemeUrl: "" };
    }
    exports.Gift_GiftBoxInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.capacity !== "0") {
          writer.uint32(8).int64(message.capacity);
        }
        if (message.isPrimaryBox !== false) {
          writer.uint32(16).bool(message.isPrimaryBox);
        }
        if (message.schemeUrl !== "") {
          writer.uint32(26).string(message.schemeUrl);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseGift_GiftBoxInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.capacity = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.isPrimaryBox = reader.bool();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.schemeUrl = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUser() {
      return {
        userId: "0",
        nickname: "",
        bioDescription: "",
        profilePicture: void 0,
        profilePictureMedium: void 0,
        profilePictureLarge: void 0,
        verified: false,
        status: 0,
        createTime: "0",
        modifyTime: "0",
        secret: 0,
        shareQrcodeUri: "",
        badgeImageList: [],
        followInfo: void 0,
        userHonor: void 0,
        fansClub: void 0,
        border: void 0,
        specialId: "",
        avatarBorder: void 0,
        medal: void 0,
        userBadges: [],
        newUserBadges: [],
        topVipNo: 0,
        userAttr: void 0,
        ownRoom: void 0,
        payScore: "0",
        fanTicketCount: "0",
        anchorInfo: void 0,
        linkMicStats: 0,
        uniqueId: "",
        enableShowCommerceSale: false,
        withFusionShopEntry: false,
        payScores: "0",
        anchorLevel: void 0,
        verifiedContent: "",
        authorInfo: void 0,
        topFans: [],
        secUid: "",
        userRole: 0,
        rewardInfo: void 0,
        personalCard: void 0,
        authenticationInfo: void 0,
        mediaBadgeImageList: [],
        commerceWebcastConfigIds: [],
        borders: [],
        comboBadgeInfo: void 0,
        subscribeInfo: void 0,
        badges: [],
        mintTypeLabel: [],
        fansClubInfo: void 0,
        allowFindByContacts: false,
        allowOthersDownloadVideo: false,
        allowOthersDownloadWhenSharingVideo: false,
        allowShareShowProfile: false,
        allowShowInGossip: false,
        allowShowMyAction: false,
        allowStrangeComment: false,
        allowUnfollowerComment: false,
        allowUseLinkmic: false,
        avatarJpg: void 0,
        backgroundImgUrl: "",
        blockStatus: 0,
        commentRestrict: 0,
        constellation: "",
        disableIchat: 0,
        enableIchatImg: "0",
        exp: 0,
        foldStrangerChat: false,
        followStatus: "0",
        ichatRestrictType: 0,
        idStr: "",
        isFollower: false,
        isFollowing: false,
        needProfileGuide: false,
        pushCommentStatus: false,
        pushDigg: false,
        pushFollow: false,
        pushFriendAction: false,
        pushIchat: false,
        pushStatus: false,
        pushVideoPost: false,
        pushVideoRecommend: false,
        verifiedReason: "",
        enableCarManagementPermission: false,
        upcomingEventList: [],
        scmLabel: "",
        ecommerceEntrance: void 0,
        isBlock: false,
        isSubscribe: false,
        isAnchorMarked: false
      };
    }
    exports.User = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
          writer.uint32(8).int64(message.userId);
        }
        if (message.nickname !== "") {
          writer.uint32(26).string(message.nickname);
        }
        if (message.bioDescription !== "") {
          writer.uint32(42).string(message.bioDescription);
        }
        if (message.profilePicture !== void 0) {
          exports.Image.encode(message.profilePicture, writer.uint32(74).fork()).join();
        }
        if (message.profilePictureMedium !== void 0) {
          exports.Image.encode(message.profilePictureMedium, writer.uint32(82).fork()).join();
        }
        if (message.profilePictureLarge !== void 0) {
          exports.Image.encode(message.profilePictureLarge, writer.uint32(90).fork()).join();
        }
        if (message.verified !== false) {
          writer.uint32(96).bool(message.verified);
        }
        if (message.status !== 0) {
          writer.uint32(120).int32(message.status);
        }
        if (message.createTime !== "0") {
          writer.uint32(128).int64(message.createTime);
        }
        if (message.modifyTime !== "0") {
          writer.uint32(136).int64(message.modifyTime);
        }
        if (message.secret !== 0) {
          writer.uint32(144).int32(message.secret);
        }
        if (message.shareQrcodeUri !== "") {
          writer.uint32(154).string(message.shareQrcodeUri);
        }
        for (const v of message.badgeImageList) {
          exports.Image.encode(v, writer.uint32(170).fork()).join();
        }
        if (message.followInfo !== void 0) {
          exports.User_FollowInfo.encode(message.followInfo, writer.uint32(178).fork()).join();
        }
        if (message.userHonor !== void 0) {
          exports.UserHonor.encode(message.userHonor, writer.uint32(186).fork()).join();
        }
        if (message.fansClub !== void 0) {
          exports.FansClubMember.encode(message.fansClub, writer.uint32(194).fork()).join();
        }
        if (message.border !== void 0) {
          exports.BorderInfo.encode(message.border, writer.uint32(202).fork()).join();
        }
        if (message.specialId !== "") {
          writer.uint32(210).string(message.specialId);
        }
        if (message.avatarBorder !== void 0) {
          exports.Image.encode(message.avatarBorder, writer.uint32(218).fork()).join();
        }
        if (message.medal !== void 0) {
          exports.Image.encode(message.medal, writer.uint32(226).fork()).join();
        }
        for (const v of message.userBadges) {
          exports.Image.encode(v, writer.uint32(234).fork()).join();
        }
        for (const v of message.newUserBadges) {
          exports.Image.encode(v, writer.uint32(242).fork()).join();
        }
        if (message.topVipNo !== 0) {
          writer.uint32(248).int32(message.topVipNo);
        }
        if (message.userAttr !== void 0) {
          exports.User_UserAttr.encode(message.userAttr, writer.uint32(258).fork()).join();
        }
        if (message.ownRoom !== void 0) {
          exports.User_OwnRoom.encode(message.ownRoom, writer.uint32(266).fork()).join();
        }
        if (message.payScore !== "0") {
          writer.uint32(272).int64(message.payScore);
        }
        if (message.fanTicketCount !== "0") {
          writer.uint32(280).int64(message.fanTicketCount);
        }
        if (message.anchorInfo !== void 0) {
          exports.User_AnchorLevel.encode(message.anchorInfo, writer.uint32(290).fork()).join();
        }
        if (message.linkMicStats !== 0) {
          writer.uint32(296).int32(message.linkMicStats);
        }
        if (message.uniqueId !== "") {
          writer.uint32(306).string(message.uniqueId);
        }
        if (message.enableShowCommerceSale !== false) {
          writer.uint32(312).bool(message.enableShowCommerceSale);
        }
        if (message.withFusionShopEntry !== false) {
          writer.uint32(320).bool(message.withFusionShopEntry);
        }
        if (message.payScores !== "0") {
          writer.uint32(328).int64(message.payScores);
        }
        if (message.anchorLevel !== void 0) {
          exports.User_AnchorLevel.encode(message.anchorLevel, writer.uint32(338).fork()).join();
        }
        if (message.verifiedContent !== "") {
          writer.uint32(346).string(message.verifiedContent);
        }
        if (message.authorInfo !== void 0) {
          exports.Author.encode(message.authorInfo, writer.uint32(354).fork()).join();
        }
        for (const v of message.topFans) {
          exports.User.encode(v, writer.uint32(362).fork()).join();
        }
        if (message.secUid !== "") {
          writer.uint32(370).string(message.secUid);
        }
        if (message.userRole !== 0) {
          writer.uint32(376).int32(message.userRole);
        }
        if (message.rewardInfo !== void 0) {
          exports.User_ActivityInfo.encode(message.rewardInfo, writer.uint32(394).fork()).join();
        }
        if (message.personalCard !== void 0) {
          exports.Image.encode(message.personalCard, writer.uint32(418).fork()).join();
        }
        if (message.authenticationInfo !== void 0) {
          exports.User_AuthenticationInfo.encode(message.authenticationInfo, writer.uint32(426).fork()).join();
        }
        for (const v of message.mediaBadgeImageList) {
          exports.Image.encode(v, writer.uint32(458).fork()).join();
        }
        writer.uint32(482).fork();
        for (const v of message.commerceWebcastConfigIds) {
          writer.int64(v);
        }
        writer.join();
        for (const v of message.borders) {
          exports.BorderInfo.encode(v, writer.uint32(490).fork()).join();
        }
        if (message.comboBadgeInfo !== void 0) {
          exports.User_ComboBadgeInfo.encode(message.comboBadgeInfo, writer.uint32(498).fork()).join();
        }
        if (message.subscribeInfo !== void 0) {
          exports.User_SubscribeInfo.encode(message.subscribeInfo, writer.uint32(506).fork()).join();
        }
        for (const v of message.badges) {
          exports.BadgeStruct.encode(v, writer.uint32(514).fork()).join();
        }
        writer.uint32(522).fork();
        for (const v of message.mintTypeLabel) {
          writer.int64(v);
        }
        writer.join();
        if (message.fansClubInfo !== void 0) {
          exports.User_FansClubInfo.encode(message.fansClubInfo, writer.uint32(530).fork()).join();
        }
        if (message.allowFindByContacts !== false) {
          writer.uint32(8016).bool(message.allowFindByContacts);
        }
        if (message.allowOthersDownloadVideo !== false) {
          writer.uint32(8024).bool(message.allowOthersDownloadVideo);
        }
        if (message.allowOthersDownloadWhenSharingVideo !== false) {
          writer.uint32(8032).bool(message.allowOthersDownloadWhenSharingVideo);
        }
        if (message.allowShareShowProfile !== false) {
          writer.uint32(8040).bool(message.allowShareShowProfile);
        }
        if (message.allowShowInGossip !== false) {
          writer.uint32(8048).bool(message.allowShowInGossip);
        }
        if (message.allowShowMyAction !== false) {
          writer.uint32(8056).bool(message.allowShowMyAction);
        }
        if (message.allowStrangeComment !== false) {
          writer.uint32(8064).bool(message.allowStrangeComment);
        }
        if (message.allowUnfollowerComment !== false) {
          writer.uint32(8072).bool(message.allowUnfollowerComment);
        }
        if (message.allowUseLinkmic !== false) {
          writer.uint32(8080).bool(message.allowUseLinkmic);
        }
        if (message.avatarJpg !== void 0) {
          exports.Image.encode(message.avatarJpg, writer.uint32(8098).fork()).join();
        }
        if (message.backgroundImgUrl !== "") {
          writer.uint32(8106).string(message.backgroundImgUrl);
        }
        if (message.blockStatus !== 0) {
          writer.uint32(8128).int32(message.blockStatus);
        }
        if (message.commentRestrict !== 0) {
          writer.uint32(8136).int32(message.commentRestrict);
        }
        if (message.constellation !== "") {
          writer.uint32(8146).string(message.constellation);
        }
        if (message.disableIchat !== 0) {
          writer.uint32(8152).int32(message.disableIchat);
        }
        if (message.enableIchatImg !== "0") {
          writer.uint32(8160).int64(message.enableIchatImg);
        }
        if (message.exp !== 0) {
          writer.uint32(8168).int32(message.exp);
        }
        if (message.foldStrangerChat !== false) {
          writer.uint32(8184).bool(message.foldStrangerChat);
        }
        if (message.followStatus !== "0") {
          writer.uint32(8192).int64(message.followStatus);
        }
        if (message.ichatRestrictType !== 0) {
          writer.uint32(8216).int32(message.ichatRestrictType);
        }
        if (message.idStr !== "") {
          writer.uint32(8226).string(message.idStr);
        }
        if (message.isFollower !== false) {
          writer.uint32(8232).bool(message.isFollower);
        }
        if (message.isFollowing !== false) {
          writer.uint32(8240).bool(message.isFollowing);
        }
        if (message.needProfileGuide !== false) {
          writer.uint32(8248).bool(message.needProfileGuide);
        }
        if (message.pushCommentStatus !== false) {
          writer.uint32(8264).bool(message.pushCommentStatus);
        }
        if (message.pushDigg !== false) {
          writer.uint32(8272).bool(message.pushDigg);
        }
        if (message.pushFollow !== false) {
          writer.uint32(8280).bool(message.pushFollow);
        }
        if (message.pushFriendAction !== false) {
          writer.uint32(8288).bool(message.pushFriendAction);
        }
        if (message.pushIchat !== false) {
          writer.uint32(8296).bool(message.pushIchat);
        }
        if (message.pushStatus !== false) {
          writer.uint32(8304).bool(message.pushStatus);
        }
        if (message.pushVideoPost !== false) {
          writer.uint32(8312).bool(message.pushVideoPost);
        }
        if (message.pushVideoRecommend !== false) {
          writer.uint32(8320).bool(message.pushVideoRecommend);
        }
        if (message.verifiedReason !== "") {
          writer.uint32(8346).string(message.verifiedReason);
        }
        if (message.enableCarManagementPermission !== false) {
          writer.uint32(8352).bool(message.enableCarManagementPermission);
        }
        for (const v of message.upcomingEventList) {
          exports.User_LiveEventInfo.encode(v, writer.uint32(8362).fork()).join();
        }
        if (message.scmLabel !== "") {
          writer.uint32(8370).string(message.scmLabel);
        }
        if (message.ecommerceEntrance !== void 0) {
          exports.User_EcommerceEntrance.encode(message.ecommerceEntrance, writer.uint32(8378).fork()).join();
        }
        if (message.isBlock !== false) {
          writer.uint32(8384).bool(message.isBlock);
        }
        if (message.isSubscribe !== false) {
          writer.uint32(8720).bool(message.isSubscribe);
        }
        if (message.isAnchorMarked !== false) {
          writer.uint32(8728).bool(message.isAnchorMarked);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUser();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.userId = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.nickname = reader.string();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.bioDescription = reader.string();
              continue;
            }
            case 9: {
              if (tag !== 74) {
                break;
              }
              message.profilePicture = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              message.profilePictureMedium = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 11: {
              if (tag !== 90) {
                break;
              }
              message.profilePictureLarge = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 12: {
              if (tag !== 96) {
                break;
              }
              message.verified = reader.bool();
              continue;
            }
            case 15: {
              if (tag !== 120) {
                break;
              }
              message.status = reader.int32();
              continue;
            }
            case 16: {
              if (tag !== 128) {
                break;
              }
              message.createTime = reader.int64().toString();
              continue;
            }
            case 17: {
              if (tag !== 136) {
                break;
              }
              message.modifyTime = reader.int64().toString();
              continue;
            }
            case 18: {
              if (tag !== 144) {
                break;
              }
              message.secret = reader.int32();
              continue;
            }
            case 19: {
              if (tag !== 154) {
                break;
              }
              message.shareQrcodeUri = reader.string();
              continue;
            }
            case 21: {
              if (tag !== 170) {
                break;
              }
              message.badgeImageList.push(exports.Image.decode(reader, reader.uint32()));
              continue;
            }
            case 22: {
              if (tag !== 178) {
                break;
              }
              message.followInfo = exports.User_FollowInfo.decode(reader, reader.uint32());
              continue;
            }
            case 23: {
              if (tag !== 186) {
                break;
              }
              message.userHonor = exports.UserHonor.decode(reader, reader.uint32());
              continue;
            }
            case 24: {
              if (tag !== 194) {
                break;
              }
              message.fansClub = exports.FansClubMember.decode(reader, reader.uint32());
              continue;
            }
            case 25: {
              if (tag !== 202) {
                break;
              }
              message.border = exports.BorderInfo.decode(reader, reader.uint32());
              continue;
            }
            case 26: {
              if (tag !== 210) {
                break;
              }
              message.specialId = reader.string();
              continue;
            }
            case 27: {
              if (tag !== 218) {
                break;
              }
              message.avatarBorder = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 28: {
              if (tag !== 226) {
                break;
              }
              message.medal = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 29: {
              if (tag !== 234) {
                break;
              }
              message.userBadges.push(exports.Image.decode(reader, reader.uint32()));
              continue;
            }
            case 30: {
              if (tag !== 242) {
                break;
              }
              message.newUserBadges.push(exports.Image.decode(reader, reader.uint32()));
              continue;
            }
            case 31: {
              if (tag !== 248) {
                break;
              }
              message.topVipNo = reader.int32();
              continue;
            }
            case 32: {
              if (tag !== 258) {
                break;
              }
              message.userAttr = exports.User_UserAttr.decode(reader, reader.uint32());
              continue;
            }
            case 33: {
              if (tag !== 266) {
                break;
              }
              message.ownRoom = exports.User_OwnRoom.decode(reader, reader.uint32());
              continue;
            }
            case 34: {
              if (tag !== 272) {
                break;
              }
              message.payScore = reader.int64().toString();
              continue;
            }
            case 35: {
              if (tag !== 280) {
                break;
              }
              message.fanTicketCount = reader.int64().toString();
              continue;
            }
            case 36: {
              if (tag !== 290) {
                break;
              }
              message.anchorInfo = exports.User_AnchorLevel.decode(reader, reader.uint32());
              continue;
            }
            case 37: {
              if (tag !== 296) {
                break;
              }
              message.linkMicStats = reader.int32();
              continue;
            }
            case 38: {
              if (tag !== 306) {
                break;
              }
              message.uniqueId = reader.string();
              continue;
            }
            case 39: {
              if (tag !== 312) {
                break;
              }
              message.enableShowCommerceSale = reader.bool();
              continue;
            }
            case 40: {
              if (tag !== 320) {
                break;
              }
              message.withFusionShopEntry = reader.bool();
              continue;
            }
            case 41: {
              if (tag !== 328) {
                break;
              }
              message.payScores = reader.int64().toString();
              continue;
            }
            case 42: {
              if (tag !== 338) {
                break;
              }
              message.anchorLevel = exports.User_AnchorLevel.decode(reader, reader.uint32());
              continue;
            }
            case 43: {
              if (tag !== 346) {
                break;
              }
              message.verifiedContent = reader.string();
              continue;
            }
            case 44: {
              if (tag !== 354) {
                break;
              }
              message.authorInfo = exports.Author.decode(reader, reader.uint32());
              continue;
            }
            case 45: {
              if (tag !== 362) {
                break;
              }
              message.topFans.push(exports.User.decode(reader, reader.uint32()));
              continue;
            }
            case 46: {
              if (tag !== 370) {
                break;
              }
              message.secUid = reader.string();
              continue;
            }
            case 47: {
              if (tag !== 376) {
                break;
              }
              message.userRole = reader.int32();
              continue;
            }
            case 49: {
              if (tag !== 394) {
                break;
              }
              message.rewardInfo = exports.User_ActivityInfo.decode(reader, reader.uint32());
              continue;
            }
            case 52: {
              if (tag !== 418) {
                break;
              }
              message.personalCard = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 53: {
              if (tag !== 426) {
                break;
              }
              message.authenticationInfo = exports.User_AuthenticationInfo.decode(reader, reader.uint32());
              continue;
            }
            case 57: {
              if (tag !== 458) {
                break;
              }
              message.mediaBadgeImageList.push(exports.Image.decode(reader, reader.uint32()));
              continue;
            }
            case 60: {
              if (tag === 480) {
                message.commerceWebcastConfigIds.push(reader.int64().toString());
                continue;
              }
              if (tag === 482) {
                const end2 = reader.uint32() + reader.pos;
                while (reader.pos < end2) {
                  message.commerceWebcastConfigIds.push(reader.int64().toString());
                }
                continue;
              }
              break;
            }
            case 61: {
              if (tag !== 490) {
                break;
              }
              message.borders.push(exports.BorderInfo.decode(reader, reader.uint32()));
              continue;
            }
            case 62: {
              if (tag !== 498) {
                break;
              }
              message.comboBadgeInfo = exports.User_ComboBadgeInfo.decode(reader, reader.uint32());
              continue;
            }
            case 63: {
              if (tag !== 506) {
                break;
              }
              message.subscribeInfo = exports.User_SubscribeInfo.decode(reader, reader.uint32());
              continue;
            }
            case 64: {
              if (tag !== 514) {
                break;
              }
              message.badges.push(exports.BadgeStruct.decode(reader, reader.uint32()));
              continue;
            }
            case 65: {
              if (tag === 520) {
                message.mintTypeLabel.push(reader.int64().toString());
                continue;
              }
              if (tag === 522) {
                const end2 = reader.uint32() + reader.pos;
                while (reader.pos < end2) {
                  message.mintTypeLabel.push(reader.int64().toString());
                }
                continue;
              }
              break;
            }
            case 66: {
              if (tag !== 530) {
                break;
              }
              message.fansClubInfo = exports.User_FansClubInfo.decode(reader, reader.uint32());
              continue;
            }
            case 1002: {
              if (tag !== 8016) {
                break;
              }
              message.allowFindByContacts = reader.bool();
              continue;
            }
            case 1003: {
              if (tag !== 8024) {
                break;
              }
              message.allowOthersDownloadVideo = reader.bool();
              continue;
            }
            case 1004: {
              if (tag !== 8032) {
                break;
              }
              message.allowOthersDownloadWhenSharingVideo = reader.bool();
              continue;
            }
            case 1005: {
              if (tag !== 8040) {
                break;
              }
              message.allowShareShowProfile = reader.bool();
              continue;
            }
            case 1006: {
              if (tag !== 8048) {
                break;
              }
              message.allowShowInGossip = reader.bool();
              continue;
            }
            case 1007: {
              if (tag !== 8056) {
                break;
              }
              message.allowShowMyAction = reader.bool();
              continue;
            }
            case 1008: {
              if (tag !== 8064) {
                break;
              }
              message.allowStrangeComment = reader.bool();
              continue;
            }
            case 1009: {
              if (tag !== 8072) {
                break;
              }
              message.allowUnfollowerComment = reader.bool();
              continue;
            }
            case 1010: {
              if (tag !== 8080) {
                break;
              }
              message.allowUseLinkmic = reader.bool();
              continue;
            }
            case 1012: {
              if (tag !== 8098) {
                break;
              }
              message.avatarJpg = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 1013: {
              if (tag !== 8106) {
                break;
              }
              message.backgroundImgUrl = reader.string();
              continue;
            }
            case 1016: {
              if (tag !== 8128) {
                break;
              }
              message.blockStatus = reader.int32();
              continue;
            }
            case 1017: {
              if (tag !== 8136) {
                break;
              }
              message.commentRestrict = reader.int32();
              continue;
            }
            case 1018: {
              if (tag !== 8146) {
                break;
              }
              message.constellation = reader.string();
              continue;
            }
            case 1019: {
              if (tag !== 8152) {
                break;
              }
              message.disableIchat = reader.int32();
              continue;
            }
            case 1020: {
              if (tag !== 8160) {
                break;
              }
              message.enableIchatImg = reader.int64().toString();
              continue;
            }
            case 1021: {
              if (tag !== 8168) {
                break;
              }
              message.exp = reader.int32();
              continue;
            }
            case 1023: {
              if (tag !== 8184) {
                break;
              }
              message.foldStrangerChat = reader.bool();
              continue;
            }
            case 1024: {
              if (tag !== 8192) {
                break;
              }
              message.followStatus = reader.int64().toString();
              continue;
            }
            case 1027: {
              if (tag !== 8216) {
                break;
              }
              message.ichatRestrictType = reader.int32();
              continue;
            }
            case 1028: {
              if (tag !== 8226) {
                break;
              }
              message.idStr = reader.string();
              continue;
            }
            case 1029: {
              if (tag !== 8232) {
                break;
              }
              message.isFollower = reader.bool();
              continue;
            }
            case 1030: {
              if (tag !== 8240) {
                break;
              }
              message.isFollowing = reader.bool();
              continue;
            }
            case 1031: {
              if (tag !== 8248) {
                break;
              }
              message.needProfileGuide = reader.bool();
              continue;
            }
            case 1033: {
              if (tag !== 8264) {
                break;
              }
              message.pushCommentStatus = reader.bool();
              continue;
            }
            case 1034: {
              if (tag !== 8272) {
                break;
              }
              message.pushDigg = reader.bool();
              continue;
            }
            case 1035: {
              if (tag !== 8280) {
                break;
              }
              message.pushFollow = reader.bool();
              continue;
            }
            case 1036: {
              if (tag !== 8288) {
                break;
              }
              message.pushFriendAction = reader.bool();
              continue;
            }
            case 1037: {
              if (tag !== 8296) {
                break;
              }
              message.pushIchat = reader.bool();
              continue;
            }
            case 1038: {
              if (tag !== 8304) {
                break;
              }
              message.pushStatus = reader.bool();
              continue;
            }
            case 1039: {
              if (tag !== 8312) {
                break;
              }
              message.pushVideoPost = reader.bool();
              continue;
            }
            case 1040: {
              if (tag !== 8320) {
                break;
              }
              message.pushVideoRecommend = reader.bool();
              continue;
            }
            case 1043: {
              if (tag !== 8346) {
                break;
              }
              message.verifiedReason = reader.string();
              continue;
            }
            case 1044: {
              if (tag !== 8352) {
                break;
              }
              message.enableCarManagementPermission = reader.bool();
              continue;
            }
            case 1045: {
              if (tag !== 8362) {
                break;
              }
              message.upcomingEventList.push(exports.User_LiveEventInfo.decode(reader, reader.uint32()));
              continue;
            }
            case 1046: {
              if (tag !== 8370) {
                break;
              }
              message.scmLabel = reader.string();
              continue;
            }
            case 1047: {
              if (tag !== 8378) {
                break;
              }
              message.ecommerceEntrance = exports.User_EcommerceEntrance.decode(reader, reader.uint32());
              continue;
            }
            case 1048: {
              if (tag !== 8384) {
                break;
              }
              message.isBlock = reader.bool();
              continue;
            }
            case 1090: {
              if (tag !== 8720) {
                break;
              }
              message.isSubscribe = reader.bool();
              continue;
            }
            case 1091: {
              if (tag !== 8728) {
                break;
              }
              message.isAnchorMarked = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUser_LiveEventInfo() {
      return {
        eventId: "0",
        startTime: "0",
        duration: "0",
        title: "",
        description: "",
        hasSubscribed: false,
        isPaidEvent: false,
        ticketAmount: "0",
        payMethod: "0"
      };
    }
    exports.User_LiveEventInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== "0") {
          writer.uint32(8).int64(message.eventId);
        }
        if (message.startTime !== "0") {
          writer.uint32(16).int64(message.startTime);
        }
        if (message.duration !== "0") {
          writer.uint32(24).int64(message.duration);
        }
        if (message.title !== "") {
          writer.uint32(34).string(message.title);
        }
        if (message.description !== "") {
          writer.uint32(42).string(message.description);
        }
        if (message.hasSubscribed !== false) {
          writer.uint32(48).bool(message.hasSubscribed);
        }
        if (message.isPaidEvent !== false) {
          writer.uint32(56).bool(message.isPaidEvent);
        }
        if (message.ticketAmount !== "0") {
          writer.uint32(64).int64(message.ticketAmount);
        }
        if (message.payMethod !== "0") {
          writer.uint32(72).int64(message.payMethod);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUser_LiveEventInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.eventId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.startTime = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.duration = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.title = reader.string();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.description = reader.string();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.hasSubscribed = reader.bool();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.isPaidEvent = reader.bool();
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.ticketAmount = reader.int64().toString();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.payMethod = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUser_LiveEventInfo_WalletPackage() {
      return { iapId: "", usdPriceShow: "" };
    }
    exports.User_LiveEventInfo_WalletPackage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.iapId !== "") {
          writer.uint32(10).string(message.iapId);
        }
        if (message.usdPriceShow !== "") {
          writer.uint32(18).string(message.usdPriceShow);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUser_LiveEventInfo_WalletPackage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.iapId = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.usdPriceShow = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUser_ActivityInfo() {
      return { badge: void 0, storytag: void 0 };
    }
    exports.User_ActivityInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.badge !== void 0) {
          exports.Image.encode(message.badge, writer.uint32(10).fork()).join();
        }
        if (message.storytag !== void 0) {
          exports.Image.encode(message.storytag, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUser_ActivityInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.badge = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.storytag = exports.Image.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUser_AnchorLevel() {
      return {
        level: "0",
        experience: "0",
        lowestExperienceThisLevel: "0",
        highestExperienceThisLevel: "0",
        taskStartExperience: "0",
        taskStartTime: "0",
        taskDecreaseExperience: "0",
        taskTargetExperience: "0",
        taskEndTime: "0",
        profileDialogBg: void 0,
        profileDialogBgBack: void 0,
        stageLevel: void 0,
        smallIcon: void 0
      };
    }
    exports.User_AnchorLevel = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.level !== "0") {
          writer.uint32(8).int64(message.level);
        }
        if (message.experience !== "0") {
          writer.uint32(16).int64(message.experience);
        }
        if (message.lowestExperienceThisLevel !== "0") {
          writer.uint32(24).int64(message.lowestExperienceThisLevel);
        }
        if (message.highestExperienceThisLevel !== "0") {
          writer.uint32(32).int64(message.highestExperienceThisLevel);
        }
        if (message.taskStartExperience !== "0") {
          writer.uint32(40).int64(message.taskStartExperience);
        }
        if (message.taskStartTime !== "0") {
          writer.uint32(48).int64(message.taskStartTime);
        }
        if (message.taskDecreaseExperience !== "0") {
          writer.uint32(56).int64(message.taskDecreaseExperience);
        }
        if (message.taskTargetExperience !== "0") {
          writer.uint32(64).int64(message.taskTargetExperience);
        }
        if (message.taskEndTime !== "0") {
          writer.uint32(72).int64(message.taskEndTime);
        }
        if (message.profileDialogBg !== void 0) {
          exports.Image.encode(message.profileDialogBg, writer.uint32(82).fork()).join();
        }
        if (message.profileDialogBgBack !== void 0) {
          exports.Image.encode(message.profileDialogBgBack, writer.uint32(90).fork()).join();
        }
        if (message.stageLevel !== void 0) {
          exports.Image.encode(message.stageLevel, writer.uint32(98).fork()).join();
        }
        if (message.smallIcon !== void 0) {
          exports.Image.encode(message.smallIcon, writer.uint32(106).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUser_AnchorLevel();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.level = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.experience = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.lowestExperienceThisLevel = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.highestExperienceThisLevel = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.taskStartExperience = reader.int64().toString();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.taskStartTime = reader.int64().toString();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.taskDecreaseExperience = reader.int64().toString();
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.taskTargetExperience = reader.int64().toString();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.taskEndTime = reader.int64().toString();
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              message.profileDialogBg = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 11: {
              if (tag !== 90) {
                break;
              }
              message.profileDialogBgBack = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 12: {
              if (tag !== 98) {
                break;
              }
              message.stageLevel = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 13: {
              if (tag !== 106) {
                break;
              }
              message.smallIcon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUser_AuthenticationInfo() {
      return { customVerify: "", enterpriseVerifyReason: "", authenticationBadge: void 0 };
    }
    exports.User_AuthenticationInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customVerify !== "") {
          writer.uint32(10).string(message.customVerify);
        }
        if (message.enterpriseVerifyReason !== "") {
          writer.uint32(18).string(message.enterpriseVerifyReason);
        }
        if (message.authenticationBadge !== void 0) {
          exports.Image.encode(message.authenticationBadge, writer.uint32(26).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUser_AuthenticationInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.customVerify = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.enterpriseVerifyReason = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.authenticationBadge = exports.Image.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUser_AuthorStats() {
      return {
        videoTotalCount: "0",
        videoTotalPlayCount: "0",
        videoTotalShareCount: "0",
        videoTotalSeriesCount: "0",
        varietyShowPlayCount: "0",
        videoTotalFavoriteCount: "0"
      };
    }
    exports.User_AuthorStats = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.videoTotalCount !== "0") {
          writer.uint32(8).int64(message.videoTotalCount);
        }
        if (message.videoTotalPlayCount !== "0") {
          writer.uint32(16).int64(message.videoTotalPlayCount);
        }
        if (message.videoTotalShareCount !== "0") {
          writer.uint32(24).int64(message.videoTotalShareCount);
        }
        if (message.videoTotalSeriesCount !== "0") {
          writer.uint32(32).int64(message.videoTotalSeriesCount);
        }
        if (message.varietyShowPlayCount !== "0") {
          writer.uint32(40).int64(message.varietyShowPlayCount);
        }
        if (message.videoTotalFavoriteCount !== "0") {
          writer.uint32(48).int64(message.videoTotalFavoriteCount);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUser_AuthorStats();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.videoTotalCount = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.videoTotalPlayCount = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.videoTotalShareCount = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.videoTotalSeriesCount = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.varietyShowPlayCount = reader.int64().toString();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.videoTotalFavoriteCount = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUser_Border() {
      return {
        icon: void 0,
        level: "0",
        source: "",
        profileDecorationRibbon: void 0,
        avatarBackgroundColor: "",
        avatarBackgroundBorderColor: ""
      };
    }
    exports.User_Border = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.icon !== void 0) {
          exports.Image.encode(message.icon, writer.uint32(10).fork()).join();
        }
        if (message.level !== "0") {
          writer.uint32(16).int64(message.level);
        }
        if (message.source !== "") {
          writer.uint32(26).string(message.source);
        }
        if (message.profileDecorationRibbon !== void 0) {
          exports.Image.encode(message.profileDecorationRibbon, writer.uint32(34).fork()).join();
        }
        if (message.avatarBackgroundColor !== "") {
          writer.uint32(58).string(message.avatarBackgroundColor);
        }
        if (message.avatarBackgroundBorderColor !== "") {
          writer.uint32(66).string(message.avatarBackgroundBorderColor);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUser_Border();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.icon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.level = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.source = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.profileDecorationRibbon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.avatarBackgroundColor = reader.string();
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.avatarBackgroundBorderColor = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUser_ComboBadgeInfo() {
      return { icon: void 0, comboCount: "0" };
    }
    exports.User_ComboBadgeInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.icon !== void 0) {
          exports.Image.encode(message.icon, writer.uint32(10).fork()).join();
        }
        if (message.comboCount !== "0") {
          writer.uint32(16).int64(message.comboCount);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUser_ComboBadgeInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.icon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.comboCount = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUser_EcommerceEntrance() {
      return { entranceType: 0, creatorType: 0, schema: "", shopEntranceInfo: void 0, showcaseEntranceInfo: void 0 };
    }
    exports.User_EcommerceEntrance = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.entranceType !== 0) {
          writer.uint32(8).int32(message.entranceType);
        }
        if (message.creatorType !== 0) {
          writer.uint32(16).int32(message.creatorType);
        }
        if (message.schema !== "") {
          writer.uint32(26).string(message.schema);
        }
        if (message.shopEntranceInfo !== void 0) {
          exports.User_EcommerceEntrance_ShopEntranceInfo.encode(message.shopEntranceInfo, writer.uint32(34).fork()).join();
        }
        if (message.showcaseEntranceInfo !== void 0) {
          exports.User_EcommerceEntrance_ShowcaseEntranceInfo.encode(message.showcaseEntranceInfo, writer.uint32(42).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUser_EcommerceEntrance();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.entranceType = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.creatorType = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.schema = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.shopEntranceInfo = exports.User_EcommerceEntrance_ShopEntranceInfo.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.showcaseEntranceInfo = exports.User_EcommerceEntrance_ShowcaseEntranceInfo.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUser_EcommerceEntrance_ShopEntranceInfo() {
      return {
        shopId: "",
        shopName: "",
        shopRating: "",
        storeLabel: void 0,
        formatSoldCount: "",
        soldCount: "0",
        expRatePercentile: 0,
        expRateTopDisplay: "",
        rateDisplayStyle: 0,
        showRateNotApplicable: false
      };
    }
    exports.User_EcommerceEntrance_ShopEntranceInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.shopId !== "") {
          writer.uint32(10).string(message.shopId);
        }
        if (message.shopName !== "") {
          writer.uint32(18).string(message.shopName);
        }
        if (message.shopRating !== "") {
          writer.uint32(26).string(message.shopRating);
        }
        if (message.storeLabel !== void 0) {
          exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel.encode(message.storeLabel, writer.uint32(34).fork()).join();
        }
        if (message.formatSoldCount !== "") {
          writer.uint32(42).string(message.formatSoldCount);
        }
        if (message.soldCount !== "0") {
          writer.uint32(48).int64(message.soldCount);
        }
        if (message.expRatePercentile !== 0) {
          writer.uint32(56).int32(message.expRatePercentile);
        }
        if (message.expRateTopDisplay !== "") {
          writer.uint32(66).string(message.expRateTopDisplay);
        }
        if (message.rateDisplayStyle !== 0) {
          writer.uint32(72).int32(message.rateDisplayStyle);
        }
        if (message.showRateNotApplicable !== false) {
          writer.uint32(80).bool(message.showRateNotApplicable);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUser_EcommerceEntrance_ShopEntranceInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.shopId = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.shopName = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.shopRating = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.storeLabel = exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.formatSoldCount = reader.string();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.soldCount = reader.int64().toString();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.expRatePercentile = reader.int32();
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.expRateTopDisplay = reader.string();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.rateDisplayStyle = reader.int32();
              continue;
            }
            case 10: {
              if (tag !== 80) {
                break;
              }
              message.showRateNotApplicable = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUser_EcommerceEntrance_ShopEntranceInfo_StoreLabel() {
      return { officialLabel: void 0, isBytemall: false };
    }
    exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.officialLabel !== void 0) {
          exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel.encode(message.officialLabel, writer.uint32(10).fork()).join();
        }
        if (message.isBytemall !== false) {
          writer.uint32(16).bool(message.isBytemall);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUser_EcommerceEntrance_ShopEntranceInfo_StoreLabel();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.officialLabel = exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.isBytemall = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUser_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel() {
      return { labelImageLight: void 0, labelImageDark: void 0, labelType: "0", labelTypeStr: "" };
    }
    exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.labelImageLight !== void 0) {
          exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage.encode(message.labelImageLight, writer.uint32(10).fork()).join();
        }
        if (message.labelImageDark !== void 0) {
          exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage.encode(message.labelImageDark, writer.uint32(18).fork()).join();
        }
        if (message.labelType !== "0") {
          writer.uint32(24).int64(message.labelType);
        }
        if (message.labelTypeStr !== "") {
          writer.uint32(34).string(message.labelTypeStr);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUser_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.labelImageLight = exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.labelImageDark = exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.labelType = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.labelTypeStr = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUser_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage() {
      return { height: 0, width: 0, minetype: "", thumbUri: "", thumbUriList: [], uri: "", urlList: [], color: "" };
    }
    exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.height !== 0) {
          writer.uint32(8).int32(message.height);
        }
        if (message.width !== 0) {
          writer.uint32(16).int32(message.width);
        }
        if (message.minetype !== "") {
          writer.uint32(26).string(message.minetype);
        }
        if (message.thumbUri !== "") {
          writer.uint32(34).string(message.thumbUri);
        }
        for (const v of message.thumbUriList) {
          writer.uint32(42).string(v);
        }
        if (message.uri !== "") {
          writer.uint32(50).string(message.uri);
        }
        for (const v of message.urlList) {
          writer.uint32(58).string(v);
        }
        if (message.color !== "") {
          writer.uint32(66).string(message.color);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUser_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.height = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.width = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.minetype = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.thumbUri = reader.string();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.thumbUriList.push(reader.string());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.uri = reader.string();
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.urlList.push(reader.string());
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.color = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUser_EcommerceEntrance_ShowcaseEntranceInfo() {
      return { formatSoldCount: "", soldCount: "0" };
    }
    exports.User_EcommerceEntrance_ShowcaseEntranceInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.formatSoldCount !== "") {
          writer.uint32(10).string(message.formatSoldCount);
        }
        if (message.soldCount !== "0") {
          writer.uint32(16).int64(message.soldCount);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUser_EcommerceEntrance_ShowcaseEntranceInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.formatSoldCount = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.soldCount = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUser_FansClub() {
      return { data: void 0 };
    }
    exports.User_FansClub = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.data !== void 0) {
          exports.User_FansClub_FansClubData.encode(message.data, writer.uint32(10).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUser_FansClub();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.data = exports.User_FansClub_FansClubData.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUser_FansClub_FansClubData() {
      return { clubName: "", level: 0, userFansClubStatus: 0, availableGiftIdsList: [], anchorId: "0" };
    }
    exports.User_FansClub_FansClubData = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.clubName !== "") {
          writer.uint32(10).string(message.clubName);
        }
        if (message.level !== 0) {
          writer.uint32(16).int32(message.level);
        }
        if (message.userFansClubStatus !== 0) {
          writer.uint32(24).int32(message.userFansClubStatus);
        }
        writer.uint32(42).fork();
        for (const v of message.availableGiftIdsList) {
          writer.int64(v);
        }
        writer.join();
        if (message.anchorId !== "0") {
          writer.uint32(48).int64(message.anchorId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUser_FansClub_FansClubData();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.clubName = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.level = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.userFansClubStatus = reader.int32();
              continue;
            }
            case 5: {
              if (tag === 40) {
                message.availableGiftIdsList.push(reader.int64().toString());
                continue;
              }
              if (tag === 42) {
                const end2 = reader.uint32() + reader.pos;
                while (reader.pos < end2) {
                  message.availableGiftIdsList.push(reader.int64().toString());
                }
                continue;
              }
              break;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.anchorId = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUser_FansClubInfo() {
      return { isSleeping: false, fansLevel: "0", fansScore: "0", badge: void 0, fansCount: "0", fansClubName: "" };
    }
    exports.User_FansClubInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isSleeping !== false) {
          writer.uint32(8).bool(message.isSleeping);
        }
        if (message.fansLevel !== "0") {
          writer.uint32(16).int64(message.fansLevel);
        }
        if (message.fansScore !== "0") {
          writer.uint32(24).int64(message.fansScore);
        }
        if (message.badge !== void 0) {
          exports.Image.encode(message.badge, writer.uint32(34).fork()).join();
        }
        if (message.fansCount !== "0") {
          writer.uint32(40).int64(message.fansCount);
        }
        if (message.fansClubName !== "") {
          writer.uint32(50).string(message.fansClubName);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUser_FansClubInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.isSleeping = reader.bool();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.fansLevel = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.fansScore = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.badge = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.fansCount = reader.int64().toString();
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.fansClubName = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUser_FollowInfo() {
      return { followingCount: "0", followerCount: "0", followStatus: "0", pushStatus: "0" };
    }
    exports.User_FollowInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.followingCount !== "0") {
          writer.uint32(8).int64(message.followingCount);
        }
        if (message.followerCount !== "0") {
          writer.uint32(16).int64(message.followerCount);
        }
        if (message.followStatus !== "0") {
          writer.uint32(24).int64(message.followStatus);
        }
        if (message.pushStatus !== "0") {
          writer.uint32(32).int64(message.pushStatus);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUser_FollowInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.followingCount = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.followerCount = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.followStatus = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.pushStatus = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUser_OwnRoom() {
      return { roomIdsList: [], roomIdsStrList: [] };
    }
    exports.User_OwnRoom = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.roomIdsList) {
          writer.int64(v);
        }
        writer.join();
        for (const v of message.roomIdsStrList) {
          writer.uint32(18).string(v);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUser_OwnRoom();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag === 8) {
                message.roomIdsList.push(reader.int64().toString());
                continue;
              }
              if (tag === 10) {
                const end2 = reader.uint32() + reader.pos;
                while (reader.pos < end2) {
                  message.roomIdsList.push(reader.int64().toString());
                }
                continue;
              }
              break;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.roomIdsStrList.push(reader.string());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUser_PayGrade() {
      return {
        diamondIcon: void 0,
        name: "",
        icon: void 0,
        nextName: "",
        level: "0",
        nextIcon: void 0,
        gradeDescribe: "",
        gradeIconList: [],
        screenChatType: "0",
        imIcon: void 0,
        imIconWithLevel: void 0,
        liveIcon: void 0,
        newImIconWithLevel: void 0,
        newLiveIcon: void 0,
        upgradeNeedConsume: "0",
        nextPrivileges: "",
        background: void 0,
        backgroundBack: void 0,
        score: "0",
        gradeBanner: "",
        profileDialogBg: void 0,
        profileDialogBgBack: void 0
      };
    }
    exports.User_PayGrade = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.diamondIcon !== void 0) {
          exports.Image.encode(message.diamondIcon, writer.uint32(18).fork()).join();
        }
        if (message.name !== "") {
          writer.uint32(26).string(message.name);
        }
        if (message.icon !== void 0) {
          exports.Image.encode(message.icon, writer.uint32(34).fork()).join();
        }
        if (message.nextName !== "") {
          writer.uint32(42).string(message.nextName);
        }
        if (message.level !== "0") {
          writer.uint32(48).int64(message.level);
        }
        if (message.nextIcon !== void 0) {
          exports.Image.encode(message.nextIcon, writer.uint32(58).fork()).join();
        }
        if (message.gradeDescribe !== "") {
          writer.uint32(106).string(message.gradeDescribe);
        }
        for (const v of message.gradeIconList) {
          exports.GradeIcon.encode(v, writer.uint32(114).fork()).join();
        }
        if (message.screenChatType !== "0") {
          writer.uint32(120).int64(message.screenChatType);
        }
        if (message.imIcon !== void 0) {
          exports.Image.encode(message.imIcon, writer.uint32(130).fork()).join();
        }
        if (message.imIconWithLevel !== void 0) {
          exports.Image.encode(message.imIconWithLevel, writer.uint32(138).fork()).join();
        }
        if (message.liveIcon !== void 0) {
          exports.Image.encode(message.liveIcon, writer.uint32(146).fork()).join();
        }
        if (message.newImIconWithLevel !== void 0) {
          exports.Image.encode(message.newImIconWithLevel, writer.uint32(154).fork()).join();
        }
        if (message.newLiveIcon !== void 0) {
          exports.Image.encode(message.newLiveIcon, writer.uint32(162).fork()).join();
        }
        if (message.upgradeNeedConsume !== "0") {
          writer.uint32(168).int64(message.upgradeNeedConsume);
        }
        if (message.nextPrivileges !== "") {
          writer.uint32(178).string(message.nextPrivileges);
        }
        if (message.background !== void 0) {
          exports.Image.encode(message.background, writer.uint32(186).fork()).join();
        }
        if (message.backgroundBack !== void 0) {
          exports.Image.encode(message.backgroundBack, writer.uint32(194).fork()).join();
        }
        if (message.score !== "0") {
          writer.uint32(200).int64(message.score);
        }
        if (message.gradeBanner !== "") {
          writer.uint32(8010).string(message.gradeBanner);
        }
        if (message.profileDialogBg !== void 0) {
          exports.Image.encode(message.profileDialogBg, writer.uint32(8018).fork()).join();
        }
        if (message.profileDialogBgBack !== void 0) {
          exports.Image.encode(message.profileDialogBgBack, writer.uint32(8026).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUser_PayGrade();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.diamondIcon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.name = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.icon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.nextName = reader.string();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.level = reader.int64().toString();
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.nextIcon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 13: {
              if (tag !== 106) {
                break;
              }
              message.gradeDescribe = reader.string();
              continue;
            }
            case 14: {
              if (tag !== 114) {
                break;
              }
              message.gradeIconList.push(exports.GradeIcon.decode(reader, reader.uint32()));
              continue;
            }
            case 15: {
              if (tag !== 120) {
                break;
              }
              message.screenChatType = reader.int64().toString();
              continue;
            }
            case 16: {
              if (tag !== 130) {
                break;
              }
              message.imIcon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 17: {
              if (tag !== 138) {
                break;
              }
              message.imIconWithLevel = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 18: {
              if (tag !== 146) {
                break;
              }
              message.liveIcon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 19: {
              if (tag !== 154) {
                break;
              }
              message.newImIconWithLevel = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 20: {
              if (tag !== 162) {
                break;
              }
              message.newLiveIcon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 21: {
              if (tag !== 168) {
                break;
              }
              message.upgradeNeedConsume = reader.int64().toString();
              continue;
            }
            case 22: {
              if (tag !== 178) {
                break;
              }
              message.nextPrivileges = reader.string();
              continue;
            }
            case 23: {
              if (tag !== 186) {
                break;
              }
              message.background = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 24: {
              if (tag !== 194) {
                break;
              }
              message.backgroundBack = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 25: {
              if (tag !== 200) {
                break;
              }
              message.score = reader.int64().toString();
              continue;
            }
            case 1001: {
              if (tag !== 8010) {
                break;
              }
              message.gradeBanner = reader.string();
              continue;
            }
            case 1002: {
              if (tag !== 8018) {
                break;
              }
              message.profileDialogBg = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 1003: {
              if (tag !== 8026) {
                break;
              }
              message.profileDialogBgBack = exports.Image.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUser_SubscribeBadge() {
      return { originImg: void 0, previewImg: void 0 };
    }
    exports.User_SubscribeBadge = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.originImg !== void 0) {
          exports.Image.encode(message.originImg, writer.uint32(26).fork()).join();
        }
        if (message.previewImg !== void 0) {
          exports.Image.encode(message.previewImg, writer.uint32(34).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUser_SubscribeBadge();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.originImg = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.previewImg = exports.Image.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUser_SubscribeInfo() {
      return {
        qualification: false,
        isSubscribe: false,
        badge: void 0,
        enableSubscription: false,
        subscriberCount: "0",
        isInGracePeriod: false,
        isSubscribedToAnchor: false,
        userGiftSubAuth: false,
        anchorGiftSubAuth: false
      };
    }
    exports.User_SubscribeInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.qualification !== false) {
          writer.uint32(8).bool(message.qualification);
        }
        if (message.isSubscribe !== false) {
          writer.uint32(16).bool(message.isSubscribe);
        }
        if (message.badge !== void 0) {
          exports.User_SubscribeBadge.encode(message.badge, writer.uint32(26).fork()).join();
        }
        if (message.enableSubscription !== false) {
          writer.uint32(32).bool(message.enableSubscription);
        }
        if (message.subscriberCount !== "0") {
          writer.uint32(40).int64(message.subscriberCount);
        }
        if (message.isInGracePeriod !== false) {
          writer.uint32(48).bool(message.isInGracePeriod);
        }
        if (message.isSubscribedToAnchor !== false) {
          writer.uint32(56).bool(message.isSubscribedToAnchor);
        }
        if (message.userGiftSubAuth !== false) {
          writer.uint32(72).bool(message.userGiftSubAuth);
        }
        if (message.anchorGiftSubAuth !== false) {
          writer.uint32(80).bool(message.anchorGiftSubAuth);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUser_SubscribeInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.qualification = reader.bool();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.isSubscribe = reader.bool();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.badge = exports.User_SubscribeBadge.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.enableSubscription = reader.bool();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.subscriberCount = reader.int64().toString();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.isInGracePeriod = reader.bool();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.isSubscribedToAnchor = reader.bool();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.userGiftSubAuth = reader.bool();
              continue;
            }
            case 10: {
              if (tag !== 80) {
                break;
              }
              message.anchorGiftSubAuth = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUser_UserAttr() {
      return { isMuted: false, isAdmin: false, isSuperAdmin: false, muteDuration: "0" };
    }
    exports.User_UserAttr = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isMuted !== false) {
          writer.uint32(8).bool(message.isMuted);
        }
        if (message.isAdmin !== false) {
          writer.uint32(16).bool(message.isAdmin);
        }
        if (message.isSuperAdmin !== false) {
          writer.uint32(24).bool(message.isSuperAdmin);
        }
        if (message.muteDuration !== "0") {
          writer.uint32(32).int64(message.muteDuration);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUser_UserAttr();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.isMuted = reader.bool();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.isAdmin = reader.bool();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.isSuperAdmin = reader.bool();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.muteDuration = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUser_UserStats() {
      return {
        id: "0",
        idStr: "",
        followingCount: "0",
        followerCount: "0",
        recordCount: "0",
        totalDuration: "0",
        dailyFanTicketCount: "0",
        dailyIncome: "0",
        itemCount: "0",
        favoriteItemCount: "0",
        diamondConsumedCount: "0",
        tuwenItemCount: "0"
      };
    }
    exports.User_UserStats = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "0") {
          writer.uint32(8).int64(message.id);
        }
        if (message.idStr !== "") {
          writer.uint32(18).string(message.idStr);
        }
        if (message.followingCount !== "0") {
          writer.uint32(24).int64(message.followingCount);
        }
        if (message.followerCount !== "0") {
          writer.uint32(32).int64(message.followerCount);
        }
        if (message.recordCount !== "0") {
          writer.uint32(40).int64(message.recordCount);
        }
        if (message.totalDuration !== "0") {
          writer.uint32(48).int64(message.totalDuration);
        }
        if (message.dailyFanTicketCount !== "0") {
          writer.uint32(56).int64(message.dailyFanTicketCount);
        }
        if (message.dailyIncome !== "0") {
          writer.uint32(64).int64(message.dailyIncome);
        }
        if (message.itemCount !== "0") {
          writer.uint32(72).int64(message.itemCount);
        }
        if (message.favoriteItemCount !== "0") {
          writer.uint32(80).int64(message.favoriteItemCount);
        }
        if (message.diamondConsumedCount !== "0") {
          writer.uint32(96).int64(message.diamondConsumedCount);
        }
        if (message.tuwenItemCount !== "0") {
          writer.uint32(104).int64(message.tuwenItemCount);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUser_UserStats();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.id = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.idStr = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.followingCount = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.followerCount = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.recordCount = reader.int64().toString();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.totalDuration = reader.int64().toString();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.dailyFanTicketCount = reader.int64().toString();
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.dailyIncome = reader.int64().toString();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.itemCount = reader.int64().toString();
              continue;
            }
            case 10: {
              if (tag !== 80) {
                break;
              }
              message.favoriteItemCount = reader.int64().toString();
              continue;
            }
            case 12: {
              if (tag !== 96) {
                break;
              }
              message.diamondConsumedCount = reader.int64().toString();
              continue;
            }
            case 13: {
              if (tag !== 104) {
                break;
              }
              message.tuwenItemCount = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseEmote() {
      return {
        emoteId: "",
        image: void 0,
        auditStatus: 0,
        uuid: "",
        emoteType: 0,
        contentSource: 0,
        emotePrivateType: 0,
        packageId: "",
        auditInfo: void 0,
        rewardCondition: 0,
        emoteUploadInfo: void 0,
        createTime: "0",
        emoteScene: 0
      };
    }
    exports.Emote = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.emoteId !== "") {
          writer.uint32(10).string(message.emoteId);
        }
        if (message.image !== void 0) {
          exports.Image.encode(message.image, writer.uint32(18).fork()).join();
        }
        if (message.auditStatus !== 0) {
          writer.uint32(24).int32(message.auditStatus);
        }
        if (message.uuid !== "") {
          writer.uint32(34).string(message.uuid);
        }
        if (message.emoteType !== 0) {
          writer.uint32(40).int32(message.emoteType);
        }
        if (message.contentSource !== 0) {
          writer.uint32(48).int32(message.contentSource);
        }
        if (message.emotePrivateType !== 0) {
          writer.uint32(56).int32(message.emotePrivateType);
        }
        if (message.packageId !== "") {
          writer.uint32(66).string(message.packageId);
        }
        if (message.auditInfo !== void 0) {
          exports.Emote_AuditInfo.encode(message.auditInfo, writer.uint32(74).fork()).join();
        }
        if (message.rewardCondition !== 0) {
          writer.uint32(80).int32(message.rewardCondition);
        }
        if (message.emoteUploadInfo !== void 0) {
          exports.Emote_EmoteUploadInfo.encode(message.emoteUploadInfo, writer.uint32(90).fork()).join();
        }
        if (message.createTime !== "0") {
          writer.uint32(96).int64(message.createTime);
        }
        if (message.emoteScene !== 0) {
          writer.uint32(104).int32(message.emoteScene);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseEmote();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.emoteId = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.image = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.auditStatus = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.uuid = reader.string();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.emoteType = reader.int32();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.contentSource = reader.int32();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.emotePrivateType = reader.int32();
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.packageId = reader.string();
              continue;
            }
            case 9: {
              if (tag !== 74) {
                break;
              }
              message.auditInfo = exports.Emote_AuditInfo.decode(reader, reader.uint32());
              continue;
            }
            case 10: {
              if (tag !== 80) {
                break;
              }
              message.rewardCondition = reader.int32();
              continue;
            }
            case 11: {
              if (tag !== 90) {
                break;
              }
              message.emoteUploadInfo = exports.Emote_EmoteUploadInfo.decode(reader, reader.uint32());
              continue;
            }
            case 12: {
              if (tag !== 96) {
                break;
              }
              message.createTime = reader.int64().toString();
              continue;
            }
            case 13: {
              if (tag !== 104) {
                break;
              }
              message.emoteScene = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseEmote_AuditInfo() {
      return { violationId: "0", taskType: 0 };
    }
    exports.Emote_AuditInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.violationId !== "0") {
          writer.uint32(8).int64(message.violationId);
        }
        if (message.taskType !== 0) {
          writer.uint32(16).int32(message.taskType);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseEmote_AuditInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.violationId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.taskType = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseEmote_EmoteUploadInfo() {
      return { userId: "0", emoteUploadSource: 0, userInfo: void 0, userIdStr: "" };
    }
    exports.Emote_EmoteUploadInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
          writer.uint32(8).int64(message.userId);
        }
        if (message.emoteUploadSource !== 0) {
          writer.uint32(16).int32(message.emoteUploadSource);
        }
        if (message.userInfo !== void 0) {
          exports.User.encode(message.userInfo, writer.uint32(26).fork()).join();
        }
        if (message.userIdStr !== "") {
          writer.uint32(34).string(message.userIdStr);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseEmote_EmoteUploadInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.userId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.emoteUploadSource = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.userInfo = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.userIdStr = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBasePunishEventInfo() {
      return {
        punishType: "",
        punishReason: "",
        punishId: "",
        violationUid: "0",
        punishTypeId: 0,
        duration: "0",
        punishPerceptionCode: "",
        violationUidStr: "",
        showReason: ""
      };
    }
    exports.PunishEventInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.punishType !== "") {
          writer.uint32(10).string(message.punishType);
        }
        if (message.punishReason !== "") {
          writer.uint32(18).string(message.punishReason);
        }
        if (message.punishId !== "") {
          writer.uint32(26).string(message.punishId);
        }
        if (message.violationUid !== "0") {
          writer.uint32(32).int64(message.violationUid);
        }
        if (message.punishTypeId !== 0) {
          writer.uint32(40).int32(message.punishTypeId);
        }
        if (message.duration !== "0") {
          writer.uint32(48).int64(message.duration);
        }
        if (message.punishPerceptionCode !== "") {
          writer.uint32(58).string(message.punishPerceptionCode);
        }
        if (message.violationUidStr !== "") {
          writer.uint32(74).string(message.violationUidStr);
        }
        if (message.showReason !== "") {
          writer.uint32(82).string(message.showReason);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBasePunishEventInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.punishType = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.punishReason = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.punishId = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.violationUid = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.punishTypeId = reader.int32();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.duration = reader.int64().toString();
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.punishPerceptionCode = reader.string();
              continue;
            }
            case 9: {
              if (tag !== 74) {
                break;
              }
              message.violationUidStr = reader.string();
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              message.showReason = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseMsgFilter() {
      return { isGifter: false, isSubscribedToAnchor: false };
    }
    exports.MsgFilter = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isGifter !== false) {
          writer.uint32(8).bool(message.isGifter);
        }
        if (message.isSubscribedToAnchor !== false) {
          writer.uint32(16).bool(message.isSubscribedToAnchor);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseMsgFilter();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.isGifter = reader.bool();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.isSubscribedToAnchor = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUserIdentity() {
      return {
        isGiftGiverOfAnchor: false,
        isSubscriberOfAnchor: false,
        isMutualFollowingWithAnchor: false,
        isFollowerOfAnchor: false,
        isModeratorOfAnchor: false,
        isAnchor: false
      };
    }
    exports.UserIdentity = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isGiftGiverOfAnchor !== false) {
          writer.uint32(8).bool(message.isGiftGiverOfAnchor);
        }
        if (message.isSubscriberOfAnchor !== false) {
          writer.uint32(16).bool(message.isSubscriberOfAnchor);
        }
        if (message.isMutualFollowingWithAnchor !== false) {
          writer.uint32(24).bool(message.isMutualFollowingWithAnchor);
        }
        if (message.isFollowerOfAnchor !== false) {
          writer.uint32(32).bool(message.isFollowerOfAnchor);
        }
        if (message.isModeratorOfAnchor !== false) {
          writer.uint32(40).bool(message.isModeratorOfAnchor);
        }
        if (message.isAnchor !== false) {
          writer.uint32(48).bool(message.isAnchor);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUserIdentity();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.isGiftGiverOfAnchor = reader.bool();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.isSubscriberOfAnchor = reader.bool();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.isMutualFollowingWithAnchor = reader.bool();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.isFollowerOfAnchor = reader.bool();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.isModeratorOfAnchor = reader.bool();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.isAnchor = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLiveStreamGoal() {
      return {
        id: "0",
        type: 0,
        status: 0,
        subGoals: [],
        description: "",
        auditStatus: 0,
        cycleType: 0,
        startTime: "0",
        expireTime: "0",
        realFinishTime: "0",
        contributors: [],
        contributorsLength: 0,
        idStr: "",
        auditDescription: "",
        stats: void 0,
        goalExtraInfo: "",
        mode: 0,
        auditInfo: void 0,
        challengeType: "",
        isUneditable: false
      };
    }
    exports.LiveStreamGoal = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "0") {
          writer.uint32(8).int64(message.id);
        }
        if (message.type !== 0) {
          writer.uint32(16).int32(message.type);
        }
        if (message.status !== 0) {
          writer.uint32(24).int32(message.status);
        }
        for (const v of message.subGoals) {
          exports.LiveStreamGoal_LiveStreamSubGoal.encode(v, writer.uint32(34).fork()).join();
        }
        if (message.description !== "") {
          writer.uint32(42).string(message.description);
        }
        if (message.auditStatus !== 0) {
          writer.uint32(48).int32(message.auditStatus);
        }
        if (message.cycleType !== 0) {
          writer.uint32(56).int32(message.cycleType);
        }
        if (message.startTime !== "0") {
          writer.uint32(64).int64(message.startTime);
        }
        if (message.expireTime !== "0") {
          writer.uint32(72).int64(message.expireTime);
        }
        if (message.realFinishTime !== "0") {
          writer.uint32(80).int64(message.realFinishTime);
        }
        for (const v of message.contributors) {
          exports.LiveStreamGoal_LiveStreamGoalContributor.encode(v, writer.uint32(90).fork()).join();
        }
        if (message.contributorsLength !== 0) {
          writer.uint32(96).int32(message.contributorsLength);
        }
        if (message.idStr !== "") {
          writer.uint32(106).string(message.idStr);
        }
        if (message.auditDescription !== "") {
          writer.uint32(114).string(message.auditDescription);
        }
        if (message.stats !== void 0) {
          exports.LiveStreamGoal_GoalStats.encode(message.stats, writer.uint32(122).fork()).join();
        }
        if (message.goalExtraInfo !== "") {
          writer.uint32(130).string(message.goalExtraInfo);
        }
        if (message.mode !== 0) {
          writer.uint32(136).int32(message.mode);
        }
        if (message.auditInfo !== void 0) {
          exports.LiveStreamGoal_AuditInfo.encode(message.auditInfo, writer.uint32(146).fork()).join();
        }
        if (message.challengeType !== "") {
          writer.uint32(162).string(message.challengeType);
        }
        if (message.isUneditable !== false) {
          writer.uint32(168).bool(message.isUneditable);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLiveStreamGoal();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.id = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.type = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.status = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.subGoals.push(exports.LiveStreamGoal_LiveStreamSubGoal.decode(reader, reader.uint32()));
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.description = reader.string();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.auditStatus = reader.int32();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.cycleType = reader.int32();
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.startTime = reader.int64().toString();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.expireTime = reader.int64().toString();
              continue;
            }
            case 10: {
              if (tag !== 80) {
                break;
              }
              message.realFinishTime = reader.int64().toString();
              continue;
            }
            case 11: {
              if (tag !== 90) {
                break;
              }
              message.contributors.push(exports.LiveStreamGoal_LiveStreamGoalContributor.decode(reader, reader.uint32()));
              continue;
            }
            case 12: {
              if (tag !== 96) {
                break;
              }
              message.contributorsLength = reader.int32();
              continue;
            }
            case 13: {
              if (tag !== 106) {
                break;
              }
              message.idStr = reader.string();
              continue;
            }
            case 14: {
              if (tag !== 114) {
                break;
              }
              message.auditDescription = reader.string();
              continue;
            }
            case 15: {
              if (tag !== 122) {
                break;
              }
              message.stats = exports.LiveStreamGoal_GoalStats.decode(reader, reader.uint32());
              continue;
            }
            case 16: {
              if (tag !== 130) {
                break;
              }
              message.goalExtraInfo = reader.string();
              continue;
            }
            case 17: {
              if (tag !== 136) {
                break;
              }
              message.mode = reader.int32();
              continue;
            }
            case 18: {
              if (tag !== 146) {
                break;
              }
              message.auditInfo = exports.LiveStreamGoal_AuditInfo.decode(reader, reader.uint32());
              continue;
            }
            case 20: {
              if (tag !== 162) {
                break;
              }
              message.challengeType = reader.string();
              continue;
            }
            case 21: {
              if (tag !== 168) {
                break;
              }
              message.isUneditable = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLiveStreamGoal_AuditInfo() {
      return { violationId: "0", taskType: 0 };
    }
    exports.LiveStreamGoal_AuditInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.violationId !== "0") {
          writer.uint32(8).int64(message.violationId);
        }
        if (message.taskType !== 0) {
          writer.uint32(16).int32(message.taskType);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLiveStreamGoal_AuditInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.violationId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.taskType = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLiveStreamGoal_LiveStreamSubGoal() {
      return {
        type: 0,
        id: "0",
        progress: "0",
        target: "0",
        gift: void 0,
        idStr: "",
        pinInfo: void 0,
        source: 0,
        recommendedText: "",
        recommendedHeader: ""
      };
    }
    exports.LiveStreamGoal_LiveStreamSubGoal = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== 0) {
          writer.uint32(8).int32(message.type);
        }
        if (message.id !== "0") {
          writer.uint32(16).int64(message.id);
        }
        if (message.progress !== "0") {
          writer.uint32(24).int64(message.progress);
        }
        if (message.target !== "0") {
          writer.uint32(32).int64(message.target);
        }
        if (message.gift !== void 0) {
          exports.LiveStreamGoal_LiveStreamSubGoalGift.encode(message.gift, writer.uint32(42).fork()).join();
        }
        if (message.idStr !== "") {
          writer.uint32(50).string(message.idStr);
        }
        if (message.pinInfo !== void 0) {
          exports.LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo.encode(message.pinInfo, writer.uint32(58).fork()).join();
        }
        if (message.source !== 0) {
          writer.uint32(64).int32(message.source);
        }
        if (message.recommendedText !== "") {
          writer.uint32(74).string(message.recommendedText);
        }
        if (message.recommendedHeader !== "") {
          writer.uint32(82).string(message.recommendedHeader);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLiveStreamGoal_LiveStreamSubGoal();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.type = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.id = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.progress = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.target = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.gift = exports.LiveStreamGoal_LiveStreamSubGoalGift.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.idStr = reader.string();
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.pinInfo = exports.LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo.decode(reader, reader.uint32());
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.source = reader.int32();
              continue;
            }
            case 9: {
              if (tag !== 74) {
                break;
              }
              message.recommendedText = reader.string();
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              message.recommendedHeader = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo() {
      return { pinStartTime: "0", pinEndTime: "0", pinReadyTime: "0" };
    }
    exports.LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pinStartTime !== "0") {
          writer.uint32(8).int64(message.pinStartTime);
        }
        if (message.pinEndTime !== "0") {
          writer.uint32(16).int64(message.pinEndTime);
        }
        if (message.pinReadyTime !== "0") {
          writer.uint32(24).int64(message.pinReadyTime);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.pinStartTime = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.pinEndTime = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.pinReadyTime = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLiveStreamGoal_LiveStreamSubGoalGift() {
      return { name: "", icon: void 0, diamondCount: "0", type: 0 };
    }
    exports.LiveStreamGoal_LiveStreamSubGoalGift = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
          writer.uint32(10).string(message.name);
        }
        if (message.icon !== void 0) {
          exports.Image.encode(message.icon, writer.uint32(18).fork()).join();
        }
        if (message.diamondCount !== "0") {
          writer.uint32(24).int64(message.diamondCount);
        }
        if (message.type !== 0) {
          writer.uint32(32).int32(message.type);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLiveStreamGoal_LiveStreamSubGoalGift();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.name = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.icon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.diamondCount = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.type = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLiveStreamGoal_LiveStreamGoalContributor() {
      return {
        userId: "0",
        avatar: void 0,
        displayId: "",
        score: "0",
        userIdStr: "",
        inRoom: false,
        isFriend: false,
        followByOwner: false,
        isFistContribute: false,
        subGoalContributions: []
      };
    }
    exports.LiveStreamGoal_LiveStreamGoalContributor = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
          writer.uint32(8).int64(message.userId);
        }
        if (message.avatar !== void 0) {
          exports.Image.encode(message.avatar, writer.uint32(18).fork()).join();
        }
        if (message.displayId !== "") {
          writer.uint32(26).string(message.displayId);
        }
        if (message.score !== "0") {
          writer.uint32(32).int64(message.score);
        }
        if (message.userIdStr !== "") {
          writer.uint32(42).string(message.userIdStr);
        }
        if (message.inRoom !== false) {
          writer.uint32(48).bool(message.inRoom);
        }
        if (message.isFriend !== false) {
          writer.uint32(56).bool(message.isFriend);
        }
        if (message.followByOwner !== false) {
          writer.uint32(72).bool(message.followByOwner);
        }
        if (message.isFistContribute !== false) {
          writer.uint32(80).bool(message.isFistContribute);
        }
        for (const v of message.subGoalContributions) {
          exports.LiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution.encode(v, writer.uint32(90).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLiveStreamGoal_LiveStreamGoalContributor();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.userId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.avatar = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.displayId = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.score = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.userIdStr = reader.string();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.inRoom = reader.bool();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.isFriend = reader.bool();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.followByOwner = reader.bool();
              continue;
            }
            case 10: {
              if (tag !== 80) {
                break;
              }
              message.isFistContribute = reader.bool();
              continue;
            }
            case 11: {
              if (tag !== 90) {
                break;
              }
              message.subGoalContributions.push(exports.LiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution.decode(reader, reader.uint32()));
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution() {
      return { id: "", contributionCount: "0" };
    }
    exports.LiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
          writer.uint32(10).string(message.id);
        }
        if (message.contributionCount !== "0") {
          writer.uint32(16).int64(message.contributionCount);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.id = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.contributionCount = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLiveStreamGoal_GoalStats() {
      return { totalCoins: "0", totalContributor: "0", comparison: void 0, totalNewFans: "0" };
    }
    exports.LiveStreamGoal_GoalStats = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.totalCoins !== "0") {
          writer.uint32(8).int64(message.totalCoins);
        }
        if (message.totalContributor !== "0") {
          writer.uint32(16).int64(message.totalContributor);
        }
        if (message.comparison !== void 0) {
          exports.LiveStreamGoal_GoalStats_GoalComparison.encode(message.comparison, writer.uint32(26).fork()).join();
        }
        if (message.totalNewFans !== "0") {
          writer.uint32(32).int64(message.totalNewFans);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLiveStreamGoal_GoalStats();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.totalCoins = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.totalContributor = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.comparison = exports.LiveStreamGoal_GoalStats_GoalComparison.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.totalNewFans = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLiveStreamGoal_GoalStats_GoalComparison() {
      return { coinsIncr: "0", contributorIncr: "0" };
    }
    exports.LiveStreamGoal_GoalStats_GoalComparison = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.coinsIncr !== "0") {
          writer.uint32(8).int64(message.coinsIncr);
        }
        if (message.contributorIncr !== "0") {
          writer.uint32(16).int64(message.contributorIncr);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLiveStreamGoal_GoalStats_GoalComparison();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.coinsIncr = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.contributorIncr = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLiveStreamGoalIndicator() {
      return { key: "", op: 0 };
    }
    exports.LiveStreamGoalIndicator = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
          writer.uint32(10).string(message.key);
        }
        if (message.op !== 0) {
          writer.uint32(16).int32(message.op);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLiveStreamGoalIndicator();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.key = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.op = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseRanking() {
      return { type: "", label: "", color: void 0, details: [] };
    }
    exports.Ranking = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== "") {
          writer.uint32(10).string(message.type);
        }
        if (message.label !== "") {
          writer.uint32(18).string(message.label);
        }
        if (message.color !== void 0) {
          exports.TikTokColor.encode(message.color, writer.uint32(26).fork()).join();
        }
        for (const v of message.details) {
          exports.ValueLabel.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseRanking();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.type = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.label = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.color = exports.TikTokColor.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.details.push(exports.ValueLabel.decode(reader, reader.uint32()));
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseTikTokColor() {
      return { color: "", id: "0", data1: 0 };
    }
    exports.TikTokColor = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.color !== "") {
          writer.uint32(10).string(message.color);
        }
        if (message.id !== "0") {
          writer.uint32(32).uint64(message.id);
        }
        if (message.data1 !== 0) {
          writer.uint32(48).uint32(message.data1);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseTikTokColor();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.color = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.id = reader.uint64().toString();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.data1 = reader.uint32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseValueLabel() {
      return { data: 0, label: "", label2: "", label3: "" };
    }
    exports.ValueLabel = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.data !== 0) {
          writer.uint32(8).uint32(message.data);
        }
        if (message.label !== "") {
          writer.uint32(18).string(message.label);
        }
        if (message.label2 !== "") {
          writer.uint32(26).string(message.label2);
        }
        if (message.label3 !== "") {
          writer.uint32(90).string(message.label3);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseValueLabel();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.data = reader.uint32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.label = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.label2 = reader.string();
              continue;
            }
            case 11: {
              if (tag !== 90) {
                break;
              }
              message.label3 = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseTimeStampContainer() {
      return { timestamp1: "0", timestamp2: "0", timestamp3: "0" };
    }
    exports.TimeStampContainer = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.timestamp1 !== "0") {
          writer.uint32(8).uint64(message.timestamp1);
        }
        if (message.timestamp2 !== "0") {
          writer.uint32(16).uint64(message.timestamp2);
        }
        if (message.timestamp3 !== "0") {
          writer.uint32(24).uint64(message.timestamp3);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseTimeStampContainer();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.timestamp1 = reader.uint64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.timestamp2 = reader.uint64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.timestamp3 = reader.uint64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBasePollStartContent() {
      return { StartTime: "0", EndTime: "0", OptionList: [], Title: "", Operator: void 0 };
    }
    exports.PollStartContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.StartTime !== "0") {
          writer.uint32(8).int64(message.StartTime);
        }
        if (message.EndTime !== "0") {
          writer.uint32(16).int64(message.EndTime);
        }
        for (const v of message.OptionList) {
          exports.PollOptionInfo.encode(v, writer.uint32(26).fork()).join();
        }
        if (message.Title !== "") {
          writer.uint32(34).string(message.Title);
        }
        if (message.Operator !== void 0) {
          exports.User.encode(message.Operator, writer.uint32(42).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBasePollStartContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.StartTime = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.EndTime = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.OptionList.push(exports.PollOptionInfo.decode(reader, reader.uint32()));
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.Title = reader.string();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.Operator = exports.User.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBasePollEndContent() {
      return { EndType: 0, OptionList: [], Operator: void 0 };
    }
    exports.PollEndContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.EndType !== 0) {
          writer.uint32(8).int32(message.EndType);
        }
        for (const v of message.OptionList) {
          exports.PollOptionInfo.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.Operator !== void 0) {
          exports.User.encode(message.Operator, writer.uint32(26).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBasePollEndContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.EndType = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.OptionList.push(exports.PollOptionInfo.decode(reader, reader.uint32()));
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.Operator = exports.User.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBasePollOptionInfo() {
      return { Votes: 0, DisplayContent: "", OptionIdx: 0, VoteUserList: [] };
    }
    exports.PollOptionInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.Votes !== 0) {
          writer.uint32(8).int32(message.Votes);
        }
        if (message.DisplayContent !== "") {
          writer.uint32(18).string(message.DisplayContent);
        }
        if (message.OptionIdx !== 0) {
          writer.uint32(24).int32(message.OptionIdx);
        }
        for (const v of message.VoteUserList) {
          exports.VoteUser.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBasePollOptionInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.Votes = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.DisplayContent = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.OptionIdx = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.VoteUserList.push(exports.VoteUser.decode(reader, reader.uint32()));
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseVoteUser() {
      return { UserId: "0", NickName: "", AvatarThumb: void 0 };
    }
    exports.VoteUser = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.UserId !== "0") {
          writer.uint32(8).int64(message.UserId);
        }
        if (message.NickName !== "") {
          writer.uint32(18).string(message.NickName);
        }
        if (message.AvatarThumb !== void 0) {
          exports.Image.encode(message.AvatarThumb, writer.uint32(26).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseVoteUser();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.UserId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.NickName = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.AvatarThumb = exports.Image.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBasePollUpdateVotesContent() {
      return { OptionList: [] };
    }
    exports.PollUpdateVotesContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.OptionList) {
          exports.PollOptionInfo.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBasePollUpdateVotesContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.OptionList.push(exports.PollOptionInfo.decode(reader, reader.uint32()));
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUserFanTicket() {
      return { UserId: "0", FanTicket: "0", MatchTotalScore: "0", MatchRank: 0 };
    }
    exports.UserFanTicket = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.UserId !== "0") {
          writer.uint32(8).int64(message.UserId);
        }
        if (message.FanTicket !== "0") {
          writer.uint32(16).int64(message.FanTicket);
        }
        if (message.MatchTotalScore !== "0") {
          writer.uint32(24).int64(message.MatchTotalScore);
        }
        if (message.MatchRank !== 0) {
          writer.uint32(32).int32(message.MatchRank);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUserFanTicket();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.UserId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.FanTicket = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.MatchTotalScore = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.MatchRank = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseFanTicketRoomNoticeContent() {
      return {
        UserFanTicketList: [],
        TotalLinkMicFanTicket: "0",
        MatchId: "0",
        EventTime: "0",
        FanTicketIconUrl: "",
        playId: "0",
        playScene: 0
      };
    }
    exports.FanTicketRoomNoticeContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.UserFanTicketList) {
          exports.UserFanTicket.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.TotalLinkMicFanTicket !== "0") {
          writer.uint32(16).int64(message.TotalLinkMicFanTicket);
        }
        if (message.MatchId !== "0") {
          writer.uint32(24).int64(message.MatchId);
        }
        if (message.EventTime !== "0") {
          writer.uint32(32).int64(message.EventTime);
        }
        if (message.FanTicketIconUrl !== "") {
          writer.uint32(42).string(message.FanTicketIconUrl);
        }
        if (message.playId !== "0") {
          writer.uint32(48).int64(message.playId);
        }
        if (message.playScene !== 0) {
          writer.uint32(56).int32(message.playScene);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseFanTicketRoomNoticeContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.UserFanTicketList.push(exports.UserFanTicket.decode(reader, reader.uint32()));
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.TotalLinkMicFanTicket = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.MatchId = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.EventTime = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.FanTicketIconUrl = reader.string();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.playId = reader.int64().toString();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.playScene = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerAcceptNoticeContent() {
      return { fromUserId: "0", fromRoomId: "0", toUserId: "0" };
    }
    exports.LinkerAcceptNoticeContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.fromUserId !== "0") {
          writer.uint32(8).int64(message.fromUserId);
        }
        if (message.fromRoomId !== "0") {
          writer.uint32(16).int64(message.fromRoomId);
        }
        if (message.toUserId !== "0") {
          writer.uint32(24).int64(message.toUserId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerAcceptNoticeContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.fromUserId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.fromRoomId = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.toUserId = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerCancelContent() {
      return { fromUserId: "0", toUserId: "0", cancelType: "0", actionId: "0" };
    }
    exports.LinkerCancelContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.fromUserId !== "0") {
          writer.uint32(8).int64(message.fromUserId);
        }
        if (message.toUserId !== "0") {
          writer.uint32(16).int64(message.toUserId);
        }
        if (message.cancelType !== "0") {
          writer.uint32(24).int64(message.cancelType);
        }
        if (message.actionId !== "0") {
          writer.uint32(32).int64(message.actionId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerCancelContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.fromUserId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.toUserId = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.cancelType = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.actionId = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseListUser() {
      return {
        user: void 0,
        linkmicId: "0",
        linkmicIdStr: "",
        linkStatus: 0,
        linkType: 0,
        userPosition: 0,
        silenceStatus: 0,
        modifyTime: "0",
        linkerId: "0",
        roleType: 0
      };
    }
    exports.ListUser = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.user !== void 0) {
          exports.User.encode(message.user, writer.uint32(10).fork()).join();
        }
        if (message.linkmicId !== "0") {
          writer.uint32(16).int64(message.linkmicId);
        }
        if (message.linkmicIdStr !== "") {
          writer.uint32(26).string(message.linkmicIdStr);
        }
        if (message.linkStatus !== 0) {
          writer.uint32(32).int32(message.linkStatus);
        }
        if (message.linkType !== 0) {
          writer.uint32(40).int32(message.linkType);
        }
        if (message.userPosition !== 0) {
          writer.uint32(48).int32(message.userPosition);
        }
        if (message.silenceStatus !== 0) {
          writer.uint32(56).int32(message.silenceStatus);
        }
        if (message.modifyTime !== "0") {
          writer.uint32(64).int64(message.modifyTime);
        }
        if (message.linkerId !== "0") {
          writer.uint32(72).int64(message.linkerId);
        }
        if (message.roleType !== 0) {
          writer.uint32(80).int32(message.roleType);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseListUser();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.user = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.linkmicId = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.linkmicIdStr = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.linkStatus = reader.int32();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.linkType = reader.int32();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.userPosition = reader.int32();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.silenceStatus = reader.int32();
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.modifyTime = reader.int64().toString();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.linkerId = reader.int64().toString();
              continue;
            }
            case 10: {
              if (tag !== 80) {
                break;
              }
              message.roleType = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerCloseContent() {
      return {};
    }
    exports.LinkerCloseContent = {
      encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerCloseContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerCreateContent() {
      return { ownerId: "0", ownerRoomId: "0", linkType: "0" };
    }
    exports.LinkerCreateContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.ownerId !== "0") {
          writer.uint32(8).int64(message.ownerId);
        }
        if (message.ownerRoomId !== "0") {
          writer.uint32(16).int64(message.ownerRoomId);
        }
        if (message.linkType !== "0") {
          writer.uint32(24).int64(message.linkType);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerCreateContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.ownerId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.ownerRoomId = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.linkType = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerEnterContent() {
      return { linkedUsersList: [], anchorMultiLiveEnum: 0, anchorSettingInfo: void 0 };
    }
    exports.LinkerEnterContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.linkedUsersList) {
          exports.ListUser.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.anchorMultiLiveEnum !== 0) {
          writer.uint32(16).int32(message.anchorMultiLiveEnum);
        }
        if (message.anchorSettingInfo !== void 0) {
          exports.MultiLiveAnchorPanelSettings.encode(message.anchorSettingInfo, writer.uint32(26).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerEnterContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.linkedUsersList.push(exports.ListUser.decode(reader, reader.uint32()));
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.anchorMultiLiveEnum = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.anchorSettingInfo = exports.MultiLiveAnchorPanelSettings.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerInviteContent() {
      return {
        fromUserId: "0",
        fromRoomId: "0",
        toRtcExtInfo: "",
        rtcJoinChannel: false,
        vendor: "0",
        secFromUserId: "",
        toLinkmicIdStr: "",
        fromUser: void 0,
        requiredMicIdx: "0",
        rtcExtInfoMap: {},
        multiLiveLayoutEnable: 0,
        multiLiveSetting: void 0,
        fromLinkmicIdStr: "",
        fromTopHostInfo: void 0,
        actionId: "0",
        linkedUsers: [],
        dialogInfo: void 0,
        punishEventInfo: void 0,
        fromRoomAgeRestricted: 0,
        abTestSetting: [],
        linkerInviteMsgExtra: void 0
      };
    }
    exports.LinkerInviteContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.fromUserId !== "0") {
          writer.uint32(8).int64(message.fromUserId);
        }
        if (message.fromRoomId !== "0") {
          writer.uint32(16).int64(message.fromRoomId);
        }
        if (message.toRtcExtInfo !== "") {
          writer.uint32(26).string(message.toRtcExtInfo);
        }
        if (message.rtcJoinChannel !== false) {
          writer.uint32(32).bool(message.rtcJoinChannel);
        }
        if (message.vendor !== "0") {
          writer.uint32(40).int64(message.vendor);
        }
        if (message.secFromUserId !== "") {
          writer.uint32(50).string(message.secFromUserId);
        }
        if (message.toLinkmicIdStr !== "") {
          writer.uint32(58).string(message.toLinkmicIdStr);
        }
        if (message.fromUser !== void 0) {
          exports.User.encode(message.fromUser, writer.uint32(66).fork()).join();
        }
        if (message.requiredMicIdx !== "0") {
          writer.uint32(72).int64(message.requiredMicIdx);
        }
        Object.entries(message.rtcExtInfoMap).forEach(([key, value]) => {
          exports.LinkerInviteContent_RtcExtInfoMapEntry.encode({ key, value }, writer.uint32(82).fork()).join();
        });
        if (message.multiLiveLayoutEnable !== 0) {
          writer.uint32(88).int32(message.multiLiveLayoutEnable);
        }
        if (message.multiLiveSetting !== void 0) {
          exports.MultiLiveAnchorPanelSettings.encode(message.multiLiveSetting, writer.uint32(98).fork()).join();
        }
        if (message.fromLinkmicIdStr !== "") {
          writer.uint32(106).string(message.fromLinkmicIdStr);
        }
        if (message.fromTopHostInfo !== void 0) {
          exports.LinkerInviteContent_InviteTopHostInfo.encode(message.fromTopHostInfo, writer.uint32(130).fork()).join();
        }
        if (message.actionId !== "0") {
          writer.uint32(136).int64(message.actionId);
        }
        for (const v of message.linkedUsers) {
          exports.LinkerInviteContent_LinkmicUserInfo.encode(v, writer.uint32(146).fork()).join();
        }
        if (message.dialogInfo !== void 0) {
          exports.LinkerInviteContent_PerceptionDialogInfo.encode(message.dialogInfo, writer.uint32(154).fork()).join();
        }
        if (message.punishEventInfo !== void 0) {
          exports.PunishEventInfo.encode(message.punishEventInfo, writer.uint32(162).fork()).join();
        }
        if (message.fromRoomAgeRestricted !== 0) {
          writer.uint32(168).int32(message.fromRoomAgeRestricted);
        }
        for (const v of message.abTestSetting) {
          exports.LinkerInviteContent_CohostABTestSetting.encode(v, writer.uint32(186).fork()).join();
        }
        if (message.linkerInviteMsgExtra !== void 0) {
          exports.LinkerInviteContent_LinkerInviteMessageExtra.encode(message.linkerInviteMsgExtra, writer.uint32(810).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.fromUserId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.fromRoomId = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.toRtcExtInfo = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.rtcJoinChannel = reader.bool();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.vendor = reader.int64().toString();
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.secFromUserId = reader.string();
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.toLinkmicIdStr = reader.string();
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.fromUser = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.requiredMicIdx = reader.int64().toString();
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              const entry10 = exports.LinkerInviteContent_RtcExtInfoMapEntry.decode(reader, reader.uint32());
              if (entry10.value !== void 0) {
                message.rtcExtInfoMap[entry10.key] = entry10.value;
              }
              continue;
            }
            case 11: {
              if (tag !== 88) {
                break;
              }
              message.multiLiveLayoutEnable = reader.int32();
              continue;
            }
            case 12: {
              if (tag !== 98) {
                break;
              }
              message.multiLiveSetting = exports.MultiLiveAnchorPanelSettings.decode(reader, reader.uint32());
              continue;
            }
            case 13: {
              if (tag !== 106) {
                break;
              }
              message.fromLinkmicIdStr = reader.string();
              continue;
            }
            case 16: {
              if (tag !== 130) {
                break;
              }
              message.fromTopHostInfo = exports.LinkerInviteContent_InviteTopHostInfo.decode(reader, reader.uint32());
              continue;
            }
            case 17: {
              if (tag !== 136) {
                break;
              }
              message.actionId = reader.int64().toString();
              continue;
            }
            case 18: {
              if (tag !== 146) {
                break;
              }
              message.linkedUsers.push(exports.LinkerInviteContent_LinkmicUserInfo.decode(reader, reader.uint32()));
              continue;
            }
            case 19: {
              if (tag !== 154) {
                break;
              }
              message.dialogInfo = exports.LinkerInviteContent_PerceptionDialogInfo.decode(reader, reader.uint32());
              continue;
            }
            case 20: {
              if (tag !== 162) {
                break;
              }
              message.punishEventInfo = exports.PunishEventInfo.decode(reader, reader.uint32());
              continue;
            }
            case 21: {
              if (tag !== 168) {
                break;
              }
              message.fromRoomAgeRestricted = reader.int32();
              continue;
            }
            case 23: {
              if (tag !== 186) {
                break;
              }
              message.abTestSetting.push(exports.LinkerInviteContent_CohostABTestSetting.decode(reader, reader.uint32()));
              continue;
            }
            case 101: {
              if (tag !== 810) {
                break;
              }
              message.linkerInviteMsgExtra = exports.LinkerInviteContent_LinkerInviteMessageExtra.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerInviteContent_RtcExtInfoMapEntry() {
      return { key: "0", value: "" };
    }
    exports.LinkerInviteContent_RtcExtInfoMapEntry = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "0") {
          writer.uint32(8).int64(message.key);
        }
        if (message.value !== "") {
          writer.uint32(18).string(message.value);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_RtcExtInfoMapEntry();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.key = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.value = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerInviteContent_InviteTopHostInfo() {
      return { rankType: "", topIndex: "0" };
    }
    exports.LinkerInviteContent_InviteTopHostInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rankType !== "") {
          writer.uint32(10).string(message.rankType);
        }
        if (message.topIndex !== "0") {
          writer.uint32(16).int64(message.topIndex);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_InviteTopHostInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.rankType = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.topIndex = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerInviteContent_LinkmicUserInfo() {
      return { userId: "0", linkmicIdStr: "", roomId: "0", linkedTime: "0" };
    }
    exports.LinkerInviteContent_LinkmicUserInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
          writer.uint32(8).int64(message.userId);
        }
        if (message.linkmicIdStr !== "") {
          writer.uint32(18).string(message.linkmicIdStr);
        }
        if (message.roomId !== "0") {
          writer.uint32(24).int64(message.roomId);
        }
        if (message.linkedTime !== "0") {
          writer.uint32(32).int64(message.linkedTime);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_LinkmicUserInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.userId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.linkmicIdStr = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.roomId = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.linkedTime = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerInviteContent_PerceptionDialogInfo() {
      return {
        iconType: 0,
        title: void 0,
        subTitle: void 0,
        adviceActionText: void 0,
        defaultActionText: void 0,
        violationDetailUrl: "",
        scene: 0,
        targetUserId: "0",
        targetRoomId: "0",
        countDownTime: "0",
        showFeedback: false,
        feedbackOptions: [],
        policyTip: "0",
        appealPopup: 0
      };
    }
    exports.LinkerInviteContent_PerceptionDialogInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.iconType !== 0) {
          writer.uint32(8).int32(message.iconType);
        }
        if (message.title !== void 0) {
          exports.Text.encode(message.title, writer.uint32(18).fork()).join();
        }
        if (message.subTitle !== void 0) {
          exports.Text.encode(message.subTitle, writer.uint32(26).fork()).join();
        }
        if (message.adviceActionText !== void 0) {
          exports.Text.encode(message.adviceActionText, writer.uint32(34).fork()).join();
        }
        if (message.defaultActionText !== void 0) {
          exports.Text.encode(message.defaultActionText, writer.uint32(42).fork()).join();
        }
        if (message.violationDetailUrl !== "") {
          writer.uint32(50).string(message.violationDetailUrl);
        }
        if (message.scene !== 0) {
          writer.uint32(56).int32(message.scene);
        }
        if (message.targetUserId !== "0") {
          writer.uint32(64).int64(message.targetUserId);
        }
        if (message.targetRoomId !== "0") {
          writer.uint32(72).int64(message.targetRoomId);
        }
        if (message.countDownTime !== "0") {
          writer.uint32(80).int64(message.countDownTime);
        }
        if (message.showFeedback !== false) {
          writer.uint32(88).bool(message.showFeedback);
        }
        for (const v of message.feedbackOptions) {
          exports.LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption.encode(v, writer.uint32(98).fork()).join();
        }
        if (message.policyTip !== "0") {
          writer.uint32(104).int64(message.policyTip);
        }
        if (message.appealPopup !== 0) {
          writer.uint32(112).int32(message.appealPopup);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_PerceptionDialogInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.iconType = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.title = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.subTitle = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.adviceActionText = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.defaultActionText = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.violationDetailUrl = reader.string();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.scene = reader.int32();
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.targetUserId = reader.int64().toString();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.targetRoomId = reader.int64().toString();
              continue;
            }
            case 10: {
              if (tag !== 80) {
                break;
              }
              message.countDownTime = reader.int64().toString();
              continue;
            }
            case 11: {
              if (tag !== 88) {
                break;
              }
              message.showFeedback = reader.bool();
              continue;
            }
            case 12: {
              if (tag !== 98) {
                break;
              }
              message.feedbackOptions.push(exports.LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption.decode(reader, reader.uint32()));
              continue;
            }
            case 13: {
              if (tag !== 104) {
                break;
              }
              message.policyTip = reader.int64().toString();
              continue;
            }
            case 14: {
              if (tag !== 112) {
                break;
              }
              message.appealPopup = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption() {
      return { id: "0", contentKey: "" };
    }
    exports.LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "0") {
          writer.uint32(8).int64(message.id);
        }
        if (message.contentKey !== "") {
          writer.uint32(18).string(message.contentKey);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.id = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.contentKey = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerInviteContent_CohostABTestSetting() {
      return { key: "0", value: void 0 };
    }
    exports.LinkerInviteContent_CohostABTestSetting = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "0") {
          writer.uint32(8).int64(message.key);
        }
        if (message.value !== void 0) {
          exports.LinkerInviteContent_CohostABTestSetting_CohostABTestList.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_CohostABTestSetting();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.key = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.value = exports.LinkerInviteContent_CohostABTestSetting_CohostABTestList.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerInviteContent_CohostABTestSetting_CohostABTestList() {
      return { abTestList: [] };
    }
    exports.LinkerInviteContent_CohostABTestSetting_CohostABTestList = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.abTestList) {
          exports.LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_CohostABTestSetting_CohostABTestList();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.abTestList.push(exports.LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest.decode(reader, reader.uint32()));
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest() {
      return { abTestType: 0, group: "0" };
    }
    exports.LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.abTestType !== 0) {
          writer.uint32(8).int32(message.abTestType);
        }
        if (message.group !== "0") {
          writer.uint32(16).int64(message.group);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.abTestType = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.group = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerInviteContent_LinkerInviteMessageExtra() {
      return {
        matchType: 0,
        inviteType: 0,
        subType: 0,
        theme: "",
        duration: 0,
        layout: 0,
        tips: "",
        inviterRivalExtra: void 0,
        otherRivalExtra: [],
        topicInfo: void 0,
        algoRequestId: ""
      };
    }
    exports.LinkerInviteContent_LinkerInviteMessageExtra = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.matchType !== 0) {
          writer.uint32(8).int32(message.matchType);
        }
        if (message.inviteType !== 0) {
          writer.uint32(16).int32(message.inviteType);
        }
        if (message.subType !== 0) {
          writer.uint32(24).int32(message.subType);
        }
        if (message.theme !== "") {
          writer.uint32(34).string(message.theme);
        }
        if (message.duration !== 0) {
          writer.uint32(40).int32(message.duration);
        }
        if (message.layout !== 0) {
          writer.uint32(48).int32(message.layout);
        }
        if (message.tips !== "") {
          writer.uint32(58).string(message.tips);
        }
        if (message.inviterRivalExtra !== void 0) {
          exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra.encode(message.inviterRivalExtra, writer.uint32(66).fork()).join();
        }
        for (const v of message.otherRivalExtra) {
          exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra.encode(v, writer.uint32(74).fork()).join();
        }
        if (message.topicInfo !== void 0) {
          exports.CohostTopic.encode(message.topicInfo, writer.uint32(82).fork()).join();
        }
        if (message.algoRequestId !== "") {
          writer.uint32(90).string(message.algoRequestId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_LinkerInviteMessageExtra();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.matchType = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.inviteType = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.subType = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.theme = reader.string();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.duration = reader.int32();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.layout = reader.int32();
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.tips = reader.string();
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.inviterRivalExtra = exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra.decode(reader, reader.uint32());
              continue;
            }
            case 9: {
              if (tag !== 74) {
                break;
              }
              message.otherRivalExtra.push(exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra.decode(reader, reader.uint32()));
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              message.topicInfo = exports.CohostTopic.decode(reader, reader.uint32());
              continue;
            }
            case 11: {
              if (tag !== 90) {
                break;
              }
              message.algoRequestId = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra() {
      return {
        textType: 0,
        text: "",
        label: "",
        userCount: 0,
        avatarThumb: void 0,
        displayId: "",
        authenticationInfo: void 0,
        nickname: "",
        followStatus: "0",
        mHashtag: void 0,
        userId: "0",
        isBestTeammate: false,
        optPairInfo: void 0,
        followerCount: "0"
      };
    }
    exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.textType !== 0) {
          writer.uint32(8).int32(message.textType);
        }
        if (message.text !== "") {
          writer.uint32(18).string(message.text);
        }
        if (message.label !== "") {
          writer.uint32(26).string(message.label);
        }
        if (message.userCount !== 0) {
          writer.uint32(32).int32(message.userCount);
        }
        if (message.avatarThumb !== void 0) {
          exports.Image.encode(message.avatarThumb, writer.uint32(42).fork()).join();
        }
        if (message.displayId !== "") {
          writer.uint32(50).string(message.displayId);
        }
        if (message.authenticationInfo !== void 0) {
          exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo.encode(message.authenticationInfo, writer.uint32(58).fork()).join();
        }
        if (message.nickname !== "") {
          writer.uint32(66).string(message.nickname);
        }
        if (message.followStatus !== "0") {
          writer.uint32(72).int64(message.followStatus);
        }
        if (message.mHashtag !== void 0) {
          exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag.encode(message.mHashtag, writer.uint32(82).fork()).join();
        }
        if (message.userId !== "0") {
          writer.uint32(96).int64(message.userId);
        }
        if (message.isBestTeammate !== false) {
          writer.uint32(104).bool(message.isBestTeammate);
        }
        if (message.optPairInfo !== void 0) {
          exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo.encode(message.optPairInfo, writer.uint32(114).fork()).join();
        }
        if (message.followerCount !== "0") {
          writer.uint32(120).int64(message.followerCount);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.textType = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.text = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.label = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.userCount = reader.int32();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.avatarThumb = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.displayId = reader.string();
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.authenticationInfo = exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo.decode(reader, reader.uint32());
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.nickname = reader.string();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.followStatus = reader.int64().toString();
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              message.mHashtag = exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag.decode(reader, reader.uint32());
              continue;
            }
            case 12: {
              if (tag !== 96) {
                break;
              }
              message.userId = reader.int64().toString();
              continue;
            }
            case 13: {
              if (tag !== 104) {
                break;
              }
              message.isBestTeammate = reader.bool();
              continue;
            }
            case 14: {
              if (tag !== 114) {
                break;
              }
              message.optPairInfo = exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo.decode(reader, reader.uint32());
              continue;
            }
            case 15: {
              if (tag !== 120) {
                break;
              }
              message.followerCount = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo() {
      return { customVerify: "", enterpriseVerifyReason: "", authenticationBadge: void 0 };
    }
    exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customVerify !== "") {
          writer.uint32(10).string(message.customVerify);
        }
        if (message.enterpriseVerifyReason !== "") {
          writer.uint32(18).string(message.enterpriseVerifyReason);
        }
        if (message.authenticationBadge !== void 0) {
          exports.Image.encode(message.authenticationBadge, writer.uint32(26).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.customVerify = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.enterpriseVerifyReason = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.authenticationBadge = exports.Image.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag() {
      return { id: "0", title: "", image: void 0, namespace: 0 };
    }
    exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "0") {
          writer.uint32(8).int64(message.id);
        }
        if (message.title !== "") {
          writer.uint32(18).string(message.title);
        }
        if (message.image !== void 0) {
          exports.Image.encode(message.image, writer.uint32(26).fork()).join();
        }
        if (message.namespace !== 0) {
          writer.uint32(32).int32(message.namespace);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.id = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.title = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.image = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.namespace = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo() {
      return { mappingId: "0", displayUserList: [], buttonNoticeType: 0, expectedTimeSec: "0", optPairType: "0" };
    }
    exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.mappingId !== "0") {
          writer.uint32(8).int64(message.mappingId);
        }
        for (const v of message.displayUserList) {
          exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.buttonNoticeType !== 0) {
          writer.uint32(24).int32(message.buttonNoticeType);
        }
        if (message.expectedTimeSec !== "0") {
          writer.uint32(32).int64(message.expectedTimeSec);
        }
        if (message.optPairType !== "0") {
          writer.uint32(40).int64(message.optPairType);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.mappingId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.displayUserList.push(exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser.decode(reader, reader.uint32()));
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.buttonNoticeType = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.expectedTimeSec = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.optPairType = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser() {
      return { user: void 0, roomId: "0" };
    }
    exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.user !== void 0) {
          exports.User.encode(message.user, writer.uint32(10).fork()).join();
        }
        if (message.roomId !== "0") {
          writer.uint32(16).int64(message.roomId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.user = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.roomId = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseCohostTopic() {
      return { id: "0", titleKey: "", titleText: "", liked: false, totalHeat: "0", totalRivals: "0", rivalsAvatar: [] };
    }
    exports.CohostTopic = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "0") {
          writer.uint32(8).int64(message.id);
        }
        if (message.titleKey !== "") {
          writer.uint32(18).string(message.titleKey);
        }
        if (message.titleText !== "") {
          writer.uint32(26).string(message.titleText);
        }
        if (message.liked !== false) {
          writer.uint32(168).bool(message.liked);
        }
        if (message.totalHeat !== "0") {
          writer.uint32(176).int64(message.totalHeat);
        }
        if (message.totalRivals !== "0") {
          writer.uint32(184).int64(message.totalRivals);
        }
        for (const v of message.rivalsAvatar) {
          exports.Image.encode(v, writer.uint32(194).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseCohostTopic();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.id = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.titleKey = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.titleText = reader.string();
              continue;
            }
            case 21: {
              if (tag !== 168) {
                break;
              }
              message.liked = reader.bool();
              continue;
            }
            case 22: {
              if (tag !== 176) {
                break;
              }
              message.totalHeat = reader.int64().toString();
              continue;
            }
            case 23: {
              if (tag !== 184) {
                break;
              }
              message.totalRivals = reader.int64().toString();
              continue;
            }
            case 24: {
              if (tag !== 194) {
                break;
              }
              message.rivalsAvatar.push(exports.Image.decode(reader, reader.uint32()));
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerKickOutContent() {
      return { fromUserId: "0", kickoutReason: 0 };
    }
    exports.LinkerKickOutContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.fromUserId !== "0") {
          writer.uint32(8).int64(message.fromUserId);
        }
        if (message.kickoutReason !== 0) {
          writer.uint32(16).int32(message.kickoutReason);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerKickOutContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.fromUserId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.kickoutReason = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerLeaveContent() {
      return { userId: "0", linkmicIdStr: "", sendLeaveUid: "0", leaveReason: "0" };
    }
    exports.LinkerLeaveContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
          writer.uint32(8).int64(message.userId);
        }
        if (message.linkmicIdStr !== "") {
          writer.uint32(18).string(message.linkmicIdStr);
        }
        if (message.sendLeaveUid !== "0") {
          writer.uint32(24).int64(message.sendLeaveUid);
        }
        if (message.leaveReason !== "0") {
          writer.uint32(32).int64(message.leaveReason);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerLeaveContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.userId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.linkmicIdStr = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.sendLeaveUid = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.leaveReason = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerLinkedListChangeContent() {
      return {};
    }
    exports.LinkerLinkedListChangeContent = {
      encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerLinkedListChangeContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseCohostListChangeContent() {
      return {};
    }
    exports.CohostListChangeContent = {
      encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseCohostListChangeContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerListChangeContent() {
      return { linkedUsers: [], appliedUsers: [], connectingUsers: [] };
    }
    exports.LinkerListChangeContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.linkedUsers) {
          exports.ListUser.encode(v, writer.uint32(10).fork()).join();
        }
        for (const v of message.appliedUsers) {
          exports.ListUser.encode(v, writer.uint32(18).fork()).join();
        }
        for (const v of message.connectingUsers) {
          exports.ListUser.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerListChangeContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.linkedUsers.push(exports.ListUser.decode(reader, reader.uint32()));
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.appliedUsers.push(exports.ListUser.decode(reader, reader.uint32()));
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.connectingUsers.push(exports.ListUser.decode(reader, reader.uint32()));
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerMediaChangeContent() {
      return { op: 0, toUserId: "0", anchorId: "0", roomId: "0", changeScene: 0, operatorInfo: void 0 };
    }
    exports.LinkerMediaChangeContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.op !== 0) {
          writer.uint32(8).int32(message.op);
        }
        if (message.toUserId !== "0") {
          writer.uint32(16).int64(message.toUserId);
        }
        if (message.anchorId !== "0") {
          writer.uint32(24).int64(message.anchorId);
        }
        if (message.roomId !== "0") {
          writer.uint32(32).int64(message.roomId);
        }
        if (message.changeScene !== 0) {
          writer.uint32(40).int32(message.changeScene);
        }
        if (message.operatorInfo !== void 0) {
          exports.LinkerMediaChangeContent_LinkerMediaChangeOperator.encode(message.operatorInfo, writer.uint32(58).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerMediaChangeContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.op = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.toUserId = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.anchorId = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.roomId = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.changeScene = reader.int32();
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.operatorInfo = exports.LinkerMediaChangeContent_LinkerMediaChangeOperator.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerMediaChangeContent_LinkerMediaChangeOperator() {
      return { userId: "0", operatorType: 0, nickName: "", displayId: "" };
    }
    exports.LinkerMediaChangeContent_LinkerMediaChangeOperator = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
          writer.uint32(8).int64(message.userId);
        }
        if (message.operatorType !== 0) {
          writer.uint32(16).int32(message.operatorType);
        }
        if (message.nickName !== "") {
          writer.uint32(26).string(message.nickName);
        }
        if (message.displayId !== "") {
          writer.uint32(34).string(message.displayId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerMediaChangeContent_LinkerMediaChangeOperator();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.userId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.operatorType = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.nickName = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.displayId = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerMicIdxUpdateContent() {
      return {};
    }
    exports.LinkerMicIdxUpdateContent = {
      encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerMicIdxUpdateContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerMuteContent() {
      return { userId: "0", status: 0 };
    }
    exports.LinkerMuteContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
          writer.uint32(8).int64(message.userId);
        }
        if (message.status !== 0) {
          writer.uint32(16).int32(message.status);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerMuteContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.userId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.status = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerRandomMatchContent() {
      return { user: void 0, roomId: "0", inviteType: "0", matchId: "", innerChannelId: "0" };
    }
    exports.LinkerRandomMatchContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.user !== void 0) {
          exports.User.encode(message.user, writer.uint32(10).fork()).join();
        }
        if (message.roomId !== "0") {
          writer.uint32(16).int64(message.roomId);
        }
        if (message.inviteType !== "0") {
          writer.uint32(24).int64(message.inviteType);
        }
        if (message.matchId !== "") {
          writer.uint32(34).string(message.matchId);
        }
        if (message.innerChannelId !== "0") {
          writer.uint32(40).int64(message.innerChannelId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerRandomMatchContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.user = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.roomId = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.inviteType = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.matchId = reader.string();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.innerChannelId = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerReplyContent() {
      return {
        fromUserId: "0",
        fromRoomId: "0",
        fromUserLinkmicInfo: void 0,
        toUserId: "0",
        toUserLinkmicInfo: void 0,
        linkType: "0",
        replyStatus: "0",
        linkerSetting: void 0,
        fromUser: void 0,
        toUser: void 0
      };
    }
    exports.LinkerReplyContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.fromUserId !== "0") {
          writer.uint32(8).int64(message.fromUserId);
        }
        if (message.fromRoomId !== "0") {
          writer.uint32(16).int64(message.fromRoomId);
        }
        if (message.fromUserLinkmicInfo !== void 0) {
          exports.LinkerReplyContent_LinkmicInfo.encode(message.fromUserLinkmicInfo, writer.uint32(26).fork()).join();
        }
        if (message.toUserId !== "0") {
          writer.uint32(32).int64(message.toUserId);
        }
        if (message.toUserLinkmicInfo !== void 0) {
          exports.LinkerReplyContent_LinkmicInfo.encode(message.toUserLinkmicInfo, writer.uint32(42).fork()).join();
        }
        if (message.linkType !== "0") {
          writer.uint32(48).int64(message.linkType);
        }
        if (message.replyStatus !== "0") {
          writer.uint32(56).int64(message.replyStatus);
        }
        if (message.linkerSetting !== void 0) {
          exports.LinkerSetting.encode(message.linkerSetting, writer.uint32(66).fork()).join();
        }
        if (message.fromUser !== void 0) {
          exports.User.encode(message.fromUser, writer.uint32(74).fork()).join();
        }
        if (message.toUser !== void 0) {
          exports.User.encode(message.toUser, writer.uint32(82).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerReplyContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.fromUserId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.fromRoomId = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.fromUserLinkmicInfo = exports.LinkerReplyContent_LinkmicInfo.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.toUserId = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.toUserLinkmicInfo = exports.LinkerReplyContent_LinkmicInfo.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.linkType = reader.int64().toString();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.replyStatus = reader.int64().toString();
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.linkerSetting = exports.LinkerSetting.decode(reader, reader.uint32());
              continue;
            }
            case 9: {
              if (tag !== 74) {
                break;
              }
              message.fromUser = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              message.toUser = exports.User.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerReplyContent_LinkmicInfo() {
      return {
        accessKey: "",
        linkMicId: "0",
        joinable: false,
        confluenceType: 0,
        rtcExtInfo: "",
        rtcAppId: "",
        rtcAppSign: "",
        linkmicIdStr: "",
        vendor: "0"
      };
    }
    exports.LinkerReplyContent_LinkmicInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accessKey !== "") {
          writer.uint32(10).string(message.accessKey);
        }
        if (message.linkMicId !== "0") {
          writer.uint32(16).int64(message.linkMicId);
        }
        if (message.joinable !== false) {
          writer.uint32(24).bool(message.joinable);
        }
        if (message.confluenceType !== 0) {
          writer.uint32(32).int32(message.confluenceType);
        }
        if (message.rtcExtInfo !== "") {
          writer.uint32(42).string(message.rtcExtInfo);
        }
        if (message.rtcAppId !== "") {
          writer.uint32(50).string(message.rtcAppId);
        }
        if (message.rtcAppSign !== "") {
          writer.uint32(58).string(message.rtcAppSign);
        }
        if (message.linkmicIdStr !== "") {
          writer.uint32(66).string(message.linkmicIdStr);
        }
        if (message.vendor !== "0") {
          writer.uint32(72).int64(message.vendor);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerReplyContent_LinkmicInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.accessKey = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.linkMicId = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.joinable = reader.bool();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.confluenceType = reader.int32();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.rtcExtInfo = reader.string();
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.rtcAppId = reader.string();
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.rtcAppSign = reader.string();
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.linkmicIdStr = reader.string();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.vendor = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerSetting() {
      return { MaxMemberLimit: "0", LinkType: "0", Scene: 0, OwnerUserId: "0", OwnerRoomId: "0", Vendor: "0" };
    }
    exports.LinkerSetting = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.MaxMemberLimit !== "0") {
          writer.uint32(8).int64(message.MaxMemberLimit);
        }
        if (message.LinkType !== "0") {
          writer.uint32(16).int64(message.LinkType);
        }
        if (message.Scene !== 0) {
          writer.uint32(24).int32(message.Scene);
        }
        if (message.OwnerUserId !== "0") {
          writer.uint32(32).int64(message.OwnerUserId);
        }
        if (message.OwnerRoomId !== "0") {
          writer.uint32(40).int64(message.OwnerRoomId);
        }
        if (message.Vendor !== "0") {
          writer.uint32(48).int64(message.Vendor);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerSetting();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.MaxMemberLimit = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.LinkType = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.Scene = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.OwnerUserId = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.OwnerRoomId = reader.int64().toString();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.Vendor = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerSysKickOutContent() {
      return { userId: "0", linkmicIdStr: "" };
    }
    exports.LinkerSysKickOutContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
          writer.uint32(8).int64(message.userId);
        }
        if (message.linkmicIdStr !== "") {
          writer.uint32(18).string(message.linkmicIdStr);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerSysKickOutContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.userId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.linkmicIdStr = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkmicUserToastContent() {
      return { userId: "0", roomId: "0", displayText: void 0, leavedUserId: "0" };
    }
    exports.LinkmicUserToastContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
          writer.uint32(8).int64(message.userId);
        }
        if (message.roomId !== "0") {
          writer.uint32(16).int64(message.roomId);
        }
        if (message.displayText !== void 0) {
          exports.Text.encode(message.displayText, writer.uint32(26).fork()).join();
        }
        if (message.leavedUserId !== "0") {
          writer.uint32(32).int64(message.leavedUserId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkmicUserToastContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.userId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.roomId = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.displayText = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.leavedUserId = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerUpdateUserContent() {
      return { fromUserId: "0", toUserId: "0", updateInfo: {} };
    }
    exports.LinkerUpdateUserContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.fromUserId !== "0") {
          writer.uint32(8).int64(message.fromUserId);
        }
        if (message.toUserId !== "0") {
          writer.uint32(16).int64(message.toUserId);
        }
        Object.entries(message.updateInfo).forEach(([key, value]) => {
          exports.LinkerUpdateUserContent_UpdateInfoEntry.encode({ key, value }, writer.uint32(26).fork()).join();
        });
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerUpdateUserContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.fromUserId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.toUserId = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              const entry3 = exports.LinkerUpdateUserContent_UpdateInfoEntry.decode(reader, reader.uint32());
              if (entry3.value !== void 0) {
                message.updateInfo[entry3.key] = entry3.value;
              }
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerUpdateUserContent_UpdateInfoEntry() {
      return { key: "", value: "" };
    }
    exports.LinkerUpdateUserContent_UpdateInfoEntry = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
          writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
          writer.uint32(18).string(message.value);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerUpdateUserContent_UpdateInfoEntry();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.key = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.value = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerUpdateUserSettingContent() {
      return { multiLiveAnchorPanelSettings: void 0 };
    }
    exports.LinkerUpdateUserSettingContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.multiLiveAnchorPanelSettings !== void 0) {
          exports.MultiLiveAnchorPanelSettings.encode(message.multiLiveAnchorPanelSettings, writer.uint32(10).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerUpdateUserSettingContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.multiLiveAnchorPanelSettings = exports.MultiLiveAnchorPanelSettings.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkerWaitingListChangeContent() {
      return {};
    }
    exports.LinkerWaitingListChangeContent = {
      encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkerWaitingListChangeContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseMultiLiveAnchorPanelSettings() {
      return {
        userId: "0",
        layout: "0",
        fixMicNum: "0",
        allowRequestFromUser: "0",
        allowRequestFromFollowerOnly: "0",
        applierSortSetting: 0,
        applierSortGiftScoreThreshold: "0",
        allowRequestFromFriends: 0,
        allowRequestFromFollowers: 0,
        allowRequestFromOthers: 0,
        enableShowMultiGuestLayout: 0
      };
    }
    exports.MultiLiveAnchorPanelSettings = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
          writer.uint32(8).int64(message.userId);
        }
        if (message.layout !== "0") {
          writer.uint32(16).int64(message.layout);
        }
        if (message.fixMicNum !== "0") {
          writer.uint32(24).int64(message.fixMicNum);
        }
        if (message.allowRequestFromUser !== "0") {
          writer.uint32(32).int64(message.allowRequestFromUser);
        }
        if (message.allowRequestFromFollowerOnly !== "0") {
          writer.uint32(40).int64(message.allowRequestFromFollowerOnly);
        }
        if (message.applierSortSetting !== 0) {
          writer.uint32(56).int32(message.applierSortSetting);
        }
        if (message.applierSortGiftScoreThreshold !== "0") {
          writer.uint32(64).int64(message.applierSortGiftScoreThreshold);
        }
        if (message.allowRequestFromFriends !== 0) {
          writer.uint32(72).int32(message.allowRequestFromFriends);
        }
        if (message.allowRequestFromFollowers !== 0) {
          writer.uint32(80).int32(message.allowRequestFromFollowers);
        }
        if (message.allowRequestFromOthers !== 0) {
          writer.uint32(88).int32(message.allowRequestFromOthers);
        }
        if (message.enableShowMultiGuestLayout !== 0) {
          writer.uint32(96).int32(message.enableShowMultiGuestLayout);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseMultiLiveAnchorPanelSettings();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.userId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.layout = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.fixMicNum = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.allowRequestFromUser = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.allowRequestFromFollowerOnly = reader.int64().toString();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.applierSortSetting = reader.int32();
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.applierSortGiftScoreThreshold = reader.int64().toString();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.allowRequestFromFriends = reader.int32();
              continue;
            }
            case 10: {
              if (tag !== 80) {
                break;
              }
              message.allowRequestFromFollowers = reader.int32();
              continue;
            }
            case 11: {
              if (tag !== 88) {
                break;
              }
              message.allowRequestFromOthers = reader.int32();
              continue;
            }
            case 12: {
              if (tag !== 96) {
                break;
              }
              message.enableShowMultiGuestLayout = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBasePlayer() {
      return { roomId: "0", userId: "0" };
    }
    exports.Player = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.roomId !== "0") {
          writer.uint32(8).int64(message.roomId);
        }
        if (message.userId !== "0") {
          writer.uint32(16).int64(message.userId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBasePlayer();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.roomId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.userId = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseAllListUser() {
      return { linkedList: [], appliedList: [], invitedList: [], readyList: [] };
    }
    exports.AllListUser = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.linkedList) {
          exports.LinkLayerListUser.encode(v, writer.uint32(18).fork()).join();
        }
        for (const v of message.appliedList) {
          exports.LinkLayerListUser.encode(v, writer.uint32(26).fork()).join();
        }
        for (const v of message.invitedList) {
          exports.LinkLayerListUser.encode(v, writer.uint32(34).fork()).join();
        }
        for (const v of message.readyList) {
          exports.LinkLayerListUser.encode(v, writer.uint32(42).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseAllListUser();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.linkedList.push(exports.LinkLayerListUser.decode(reader, reader.uint32()));
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.appliedList.push(exports.LinkLayerListUser.decode(reader, reader.uint32()));
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.invitedList.push(exports.LinkLayerListUser.decode(reader, reader.uint32()));
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.readyList.push(exports.LinkLayerListUser.decode(reader, reader.uint32()));
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkLayerListUser() {
      return { user: void 0, linkmicId: "0", pos: void 0, linkedTimeNano: "0", appVersion: "", magicNumber1: "0" };
    }
    exports.LinkLayerListUser = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.user !== void 0) {
          exports.User.encode(message.user, writer.uint32(10).fork()).join();
        }
        if (message.linkmicId !== "0") {
          writer.uint32(16).int64(message.linkmicId);
        }
        if (message.pos !== void 0) {
          exports.Position.encode(message.pos, writer.uint32(26).fork()).join();
        }
        if (message.linkedTimeNano !== "0") {
          writer.uint32(32).int64(message.linkedTimeNano);
        }
        if (message.appVersion !== "") {
          writer.uint32(42).string(message.appVersion);
        }
        if (message.magicNumber1 !== "0") {
          writer.uint32(56).int64(message.magicNumber1);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkLayerListUser();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.user = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.linkmicId = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.pos = exports.Position.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.linkedTimeNano = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.appVersion = reader.string();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.magicNumber1 = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBasePosition() {
      return { type: 0, link: void 0 };
    }
    exports.Position = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== 0) {
          writer.uint32(8).int32(message.type);
        }
        if (message.link !== void 0) {
          exports.LinkPosition.encode(message.link, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBasePosition();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.type = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.link = exports.LinkPosition.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLinkPosition() {
      return { position: 0, opt: 0 };
    }
    exports.LinkPosition = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.position !== 0) {
          writer.uint32(8).int32(message.position);
        }
        if (message.opt !== 0) {
          writer.uint32(16).int32(message.opt);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLinkPosition();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.position = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.opt = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseGroupPlayer() {
      return { channelId: "0", user: void 0 };
    }
    exports.GroupPlayer = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.channelId !== "0") {
          writer.uint32(8).int64(message.channelId);
        }
        if (message.user !== void 0) {
          exports.User.encode(message.user, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseGroupPlayer();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.channelId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.user = exports.User.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseDSLConfig() {
      return { sceneVersion: 0, layoutId: "" };
    }
    exports.DSLConfig = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sceneVersion !== 0) {
          writer.uint32(8).int32(message.sceneVersion);
        }
        if (message.layoutId !== "") {
          writer.uint32(18).string(message.layoutId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseDSLConfig();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.sceneVersion = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.layoutId = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseGroupChannelAllUser() {
      return { groupChannelId: "0", userList: [], contentVersion: "0" };
    }
    exports.GroupChannelAllUser = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.groupChannelId !== "0") {
          writer.uint32(8).int64(message.groupChannelId);
        }
        for (const v of message.userList) {
          exports.GroupChannelUser.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.contentVersion !== "0") {
          writer.uint32(24).int64(message.contentVersion);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseGroupChannelAllUser();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.groupChannelId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.userList.push(exports.GroupChannelUser.decode(reader, reader.uint32()));
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.contentVersion = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseGroupChannelUser() {
      return {
        channelId: "0",
        status: 0,
        type: 0,
        allUser: void 0,
        joinTime: "0",
        linkedTime: "0",
        ownerUser: void 0,
        groupLinkmicId: ""
      };
    }
    exports.GroupChannelUser = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.channelId !== "0") {
          writer.uint32(8).int64(message.channelId);
        }
        if (message.status !== 0) {
          writer.uint32(16).int32(message.status);
        }
        if (message.type !== 0) {
          writer.uint32(24).int32(message.type);
        }
        if (message.allUser !== void 0) {
          exports.AllListUser.encode(message.allUser, writer.uint32(34).fork()).join();
        }
        if (message.joinTime !== "0") {
          writer.uint32(40).int64(message.joinTime);
        }
        if (message.linkedTime !== "0") {
          writer.uint32(48).int64(message.linkedTime);
        }
        if (message.ownerUser !== void 0) {
          exports.GroupPlayer.encode(message.ownerUser, writer.uint32(58).fork()).join();
        }
        if (message.groupLinkmicId !== "") {
          writer.uint32(66).string(message.groupLinkmicId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseGroupChannelUser();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.channelId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.status = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.type = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.allUser = exports.AllListUser.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.joinTime = reader.int64().toString();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.linkedTime = reader.int64().toString();
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.ownerUser = exports.GroupPlayer.decode(reader, reader.uint32());
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.groupLinkmicId = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseRTCExtraInfo() {
      return {
        liveRtcEngineConfig: void 0,
        liveRtcVideoParamList: [],
        rtcBitrateMap: void 0,
        rtcFps: 0,
        rtcMixBase: void 0,
        byteRtcExtInfo: void 0,
        rtcInfoExtra: void 0,
        rtcBusinessId: "",
        rtcOther: void 0,
        interactClientType: 0
      };
    }
    exports.RTCExtraInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.liveRtcEngineConfig !== void 0) {
          exports.RTCExtraInfo_RTCEngineConfig.encode(message.liveRtcEngineConfig, writer.uint32(10).fork()).join();
        }
        for (const v of message.liveRtcVideoParamList) {
          exports.RTCExtraInfo_RTCLiveVideoParam.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.rtcBitrateMap !== void 0) {
          exports.RTCExtraInfo_RTCBitrateMap.encode(message.rtcBitrateMap, writer.uint32(26).fork()).join();
        }
        if (message.rtcFps !== 0) {
          writer.uint32(32).int32(message.rtcFps);
        }
        if (message.rtcMixBase !== void 0) {
          exports.RTCExtraInfo_RTCMixBase.encode(message.rtcMixBase, writer.uint32(42).fork()).join();
        }
        if (message.byteRtcExtInfo !== void 0) {
          exports.RTCExtraInfo_ByteRTCExtInfo.encode(message.byteRtcExtInfo, writer.uint32(50).fork()).join();
        }
        if (message.rtcInfoExtra !== void 0) {
          exports.RTCExtraInfo_RTCInfoExtra.encode(message.rtcInfoExtra, writer.uint32(58).fork()).join();
        }
        if (message.rtcBusinessId !== "") {
          writer.uint32(66).string(message.rtcBusinessId);
        }
        if (message.rtcOther !== void 0) {
          exports.RTCExtraInfo_RTCOther.encode(message.rtcOther, writer.uint32(74).fork()).join();
        }
        if (message.interactClientType !== 0) {
          writer.uint32(80).int32(message.interactClientType);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseRTCExtraInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.liveRtcEngineConfig = exports.RTCExtraInfo_RTCEngineConfig.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.liveRtcVideoParamList.push(exports.RTCExtraInfo_RTCLiveVideoParam.decode(reader, reader.uint32()));
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.rtcBitrateMap = exports.RTCExtraInfo_RTCBitrateMap.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.rtcFps = reader.int32();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.rtcMixBase = exports.RTCExtraInfo_RTCMixBase.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.byteRtcExtInfo = exports.RTCExtraInfo_ByteRTCExtInfo.decode(reader, reader.uint32());
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.rtcInfoExtra = exports.RTCExtraInfo_RTCInfoExtra.decode(reader, reader.uint32());
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.rtcBusinessId = reader.string();
              continue;
            }
            case 9: {
              if (tag !== 74) {
                break;
              }
              message.rtcOther = exports.RTCExtraInfo_RTCOther.decode(reader, reader.uint32());
              continue;
            }
            case 10: {
              if (tag !== 80) {
                break;
              }
              message.interactClientType = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseRTCExtraInfo_RTCMixBase() {
      return { bitrate: 0 };
    }
    exports.RTCExtraInfo_RTCMixBase = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.bitrate !== 0) {
          writer.uint32(8).int32(message.bitrate);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseRTCExtraInfo_RTCMixBase();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.bitrate = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseRTCExtraInfo_ByteRTCExtInfo() {
      return { defaultSignaling: 0 };
    }
    exports.RTCExtraInfo_ByteRTCExtInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.defaultSignaling !== 0) {
          writer.uint32(8).int32(message.defaultSignaling);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseRTCExtraInfo_ByteRTCExtInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.defaultSignaling = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseRTCExtraInfo_RTCInfoExtra() {
      return { version: "" };
    }
    exports.RTCExtraInfo_RTCInfoExtra = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.version !== "") {
          writer.uint32(10).string(message.version);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseRTCExtraInfo_RTCInfoExtra();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.version = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseRTCExtraInfo_RTCOther() {
      return { transCodingSecond: 0 };
    }
    exports.RTCExtraInfo_RTCOther = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.transCodingSecond !== 0) {
          writer.uint32(8).int32(message.transCodingSecond);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseRTCExtraInfo_RTCOther();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.transCodingSecond = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseRTCExtraInfo_RTCEngineConfig() {
      return { rtcAppId: "", rtcUserId: "", rtcToken: "", rtcChannelId: "0" };
    }
    exports.RTCExtraInfo_RTCEngineConfig = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rtcAppId !== "") {
          writer.uint32(10).string(message.rtcAppId);
        }
        if (message.rtcUserId !== "") {
          writer.uint32(18).string(message.rtcUserId);
        }
        if (message.rtcToken !== "") {
          writer.uint32(26).string(message.rtcToken);
        }
        if (message.rtcChannelId !== "0") {
          writer.uint32(32).int64(message.rtcChannelId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseRTCExtraInfo_RTCEngineConfig();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.rtcAppId = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.rtcUserId = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.rtcToken = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.rtcChannelId = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseRTCExtraInfo_RTCLiveVideoParam() {
      return { strategyId: 0, params: void 0 };
    }
    exports.RTCExtraInfo_RTCLiveVideoParam = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.strategyId !== 0) {
          writer.uint32(8).int32(message.strategyId);
        }
        if (message.params !== void 0) {
          exports.RTCExtraInfo_RTCVideoParam.encode(message.params, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseRTCExtraInfo_RTCLiveVideoParam();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.strategyId = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.params = exports.RTCExtraInfo_RTCVideoParam.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseRTCExtraInfo_RTCVideoParam() {
      return { width: 0, height: 0, fps: 0, bitrateKbps: 0 };
    }
    exports.RTCExtraInfo_RTCVideoParam = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.width !== 0) {
          writer.uint32(8).int32(message.width);
        }
        if (message.height !== 0) {
          writer.uint32(16).int32(message.height);
        }
        if (message.fps !== 0) {
          writer.uint32(24).int32(message.fps);
        }
        if (message.bitrateKbps !== 0) {
          writer.uint32(32).int32(message.bitrateKbps);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseRTCExtraInfo_RTCVideoParam();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.width = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.height = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.fps = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.bitrateKbps = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseRTCExtraInfo_RTCBitrateMap() {
      return { xx1: 0, xx2: 0, xx3: 0, xx4: 0 };
    }
    exports.RTCExtraInfo_RTCBitrateMap = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.xx1 !== 0) {
          writer.uint32(8).int32(message.xx1);
        }
        if (message.xx2 !== 0) {
          writer.uint32(16).int32(message.xx2);
        }
        if (message.xx3 !== 0) {
          writer.uint32(24).int32(message.xx3);
        }
        if (message.xx4 !== 0) {
          writer.uint32(32).int32(message.xx4);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseRTCExtraInfo_RTCBitrateMap();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.xx1 = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.xx2 = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.xx3 = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.xx4 = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseCreateChannelContent() {
      return { owner: void 0, ownerLinkMicId: "" };
    }
    exports.CreateChannelContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.owner !== void 0) {
          exports.Player.encode(message.owner, writer.uint32(10).fork()).join();
        }
        if (message.ownerLinkMicId !== "") {
          writer.uint32(18).string(message.ownerLinkMicId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseCreateChannelContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.owner = exports.Player.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.ownerLinkMicId = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseListChangeContent() {
      return { listChangeType: 0, userList: void 0, linkedUserUiPositions: [], contentPos: [] };
    }
    exports.ListChangeContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.listChangeType !== 0) {
          writer.uint32(8).int32(message.listChangeType);
        }
        if (message.userList !== void 0) {
          exports.AllListUser.encode(message.userList, writer.uint32(18).fork()).join();
        }
        for (const v of message.linkedUserUiPositions) {
          writer.uint32(26).string(v);
        }
        for (const v of message.contentPos) {
          exports.ContentPosition.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseListChangeContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.listChangeType = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.userList = exports.AllListUser.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.linkedUserUiPositions.push(reader.string());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.contentPos.push(exports.ContentPosition.decode(reader, reader.uint32()));
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseContentPosition() {
      return { contentID: "", contentType: 0, pos: void 0, contentLinkmicID: "", startTimeNano: "0" };
    }
    exports.ContentPosition = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.contentID !== "") {
          writer.uint32(10).string(message.contentID);
        }
        if (message.contentType !== 0) {
          writer.uint32(16).int32(message.contentType);
        }
        if (message.pos !== void 0) {
          exports.MicPositionData.encode(message.pos, writer.uint32(26).fork()).join();
        }
        if (message.contentLinkmicID !== "") {
          writer.uint32(34).string(message.contentLinkmicID);
        }
        if (message.startTimeNano !== "0") {
          writer.uint32(40).int64(message.startTimeNano);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseContentPosition();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.contentID = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.contentType = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.pos = exports.MicPositionData.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.contentLinkmicID = reader.string();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.startTimeNano = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseMicPositionData() {
      return { type: 0, linkPosition: void 0 };
    }
    exports.MicPositionData = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== 0) {
          writer.uint32(8).int32(message.type);
        }
        if (message.linkPosition !== void 0) {
          exports.LinkPosition.encode(message.linkPosition, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseMicPositionData();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.type = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.linkPosition = exports.LinkPosition.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseMultiLiveContent() {
      return {
        applyBizContent: void 0,
        inviteBizContent: void 0,
        replyBizContent: void 0,
        permitBizContent: void 0,
        joinDirectBizContent: void 0,
        kickOutBizContent: void 0
      };
    }
    exports.MultiLiveContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.applyBizContent !== void 0) {
          exports.MultiLiveContent_ApplyBizContent.encode(message.applyBizContent, writer.uint32(10).fork()).join();
        }
        if (message.inviteBizContent !== void 0) {
          exports.MultiLiveContent_InviteBizContent.encode(message.inviteBizContent, writer.uint32(18).fork()).join();
        }
        if (message.replyBizContent !== void 0) {
          exports.MultiLiveContent_ReplyBizContent.encode(message.replyBizContent, writer.uint32(26).fork()).join();
        }
        if (message.permitBizContent !== void 0) {
          exports.MultiLiveContent_PermitBizContent.encode(message.permitBizContent, writer.uint32(34).fork()).join();
        }
        if (message.joinDirectBizContent !== void 0) {
          exports.MultiLiveContent_JoinDirectBizContent.encode(message.joinDirectBizContent, writer.uint32(42).fork()).join();
        }
        if (message.kickOutBizContent !== void 0) {
          exports.MultiLiveContent_KickOutBizContent.encode(message.kickOutBizContent, writer.uint32(50).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseMultiLiveContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.applyBizContent = exports.MultiLiveContent_ApplyBizContent.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.inviteBizContent = exports.MultiLiveContent_InviteBizContent.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.replyBizContent = exports.MultiLiveContent_ReplyBizContent.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.permitBizContent = exports.MultiLiveContent_PermitBizContent.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.joinDirectBizContent = exports.MultiLiveContent_JoinDirectBizContent.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.kickOutBizContent = exports.MultiLiveContent_KickOutBizContent.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseMultiLiveContent_ApplyBizContent() {
      return { user: void 0 };
    }
    exports.MultiLiveContent_ApplyBizContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.user !== void 0) {
          exports.User.encode(message.user, writer.uint32(10).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseMultiLiveContent_ApplyBizContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.user = exports.User.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseMultiLiveContent_JoinDirectBizContent() {
      return { replyImMsgId: "0", outsideRoomInviteSource: 0 };
    }
    exports.MultiLiveContent_JoinDirectBizContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.replyImMsgId !== "0") {
          writer.uint32(8).int64(message.replyImMsgId);
        }
        if (message.outsideRoomInviteSource !== 0) {
          writer.uint32(16).int32(message.outsideRoomInviteSource);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseMultiLiveContent_JoinDirectBizContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.replyImMsgId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.outsideRoomInviteSource = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseMultiLiveContent_InviteBizContent() {
      return {
        anchorSettingInfo: void 0,
        inviteSource: 0,
        operatorUserInfo: void 0,
        operatorLinkAdminType: 0,
        inviteeUserInfo: void 0,
        shareRevenueSetting: 0
      };
    }
    exports.MultiLiveContent_InviteBizContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.anchorSettingInfo !== void 0) {
          exports.MultiLiveAnchorPanelSettings.encode(message.anchorSettingInfo, writer.uint32(10).fork()).join();
        }
        if (message.inviteSource !== 0) {
          writer.uint32(16).int32(message.inviteSource);
        }
        if (message.operatorUserInfo !== void 0) {
          exports.User.encode(message.operatorUserInfo, writer.uint32(26).fork()).join();
        }
        if (message.operatorLinkAdminType !== 0) {
          writer.uint32(32).int32(message.operatorLinkAdminType);
        }
        if (message.inviteeUserInfo !== void 0) {
          exports.User.encode(message.inviteeUserInfo, writer.uint32(42).fork()).join();
        }
        if (message.shareRevenueSetting !== 0) {
          writer.uint32(48).int32(message.shareRevenueSetting);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseMultiLiveContent_InviteBizContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.anchorSettingInfo = exports.MultiLiveAnchorPanelSettings.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.inviteSource = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.operatorUserInfo = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.operatorLinkAdminType = reader.int32();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.inviteeUserInfo = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.shareRevenueSetting = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseMultiLiveContent_ReplyBizContent() {
      return { linkType: 0, isTurnOffInvitation: 0, replyUserInfo: void 0 };
    }
    exports.MultiLiveContent_ReplyBizContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.linkType !== 0) {
          writer.uint32(8).int32(message.linkType);
        }
        if (message.isTurnOffInvitation !== 0) {
          writer.uint32(16).int32(message.isTurnOffInvitation);
        }
        if (message.replyUserInfo !== void 0) {
          exports.User.encode(message.replyUserInfo, writer.uint32(26).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseMultiLiveContent_ReplyBizContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.linkType = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.isTurnOffInvitation = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.replyUserInfo = exports.User.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseMultiLiveContent_PermitBizContent() {
      return {
        anchorSettingInfo: void 0,
        expireTimestamp: "0",
        operatorUserInfo: void 0,
        operatorLinkAdminType: 0,
        linkUserType: 0
      };
    }
    exports.MultiLiveContent_PermitBizContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.anchorSettingInfo !== void 0) {
          exports.MultiLiveAnchorPanelSettings.encode(message.anchorSettingInfo, writer.uint32(10).fork()).join();
        }
        if (message.expireTimestamp !== "0") {
          writer.uint32(16).int64(message.expireTimestamp);
        }
        if (message.operatorUserInfo !== void 0) {
          exports.User.encode(message.operatorUserInfo, writer.uint32(26).fork()).join();
        }
        if (message.operatorLinkAdminType !== 0) {
          writer.uint32(32).int32(message.operatorLinkAdminType);
        }
        if (message.linkUserType !== 0) {
          writer.uint32(40).int32(message.linkUserType);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseMultiLiveContent_PermitBizContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.anchorSettingInfo = exports.MultiLiveAnchorPanelSettings.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.expireTimestamp = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.operatorUserInfo = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.operatorLinkAdminType = reader.int32();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.linkUserType = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseMultiLiveContent_KickOutBizContent() {
      return { operatorUserInfo: void 0, operatorLinkAdminType: 0, kickPlayerUserInfo: void 0 };
    }
    exports.MultiLiveContent_KickOutBizContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.operatorUserInfo !== void 0) {
          exports.User.encode(message.operatorUserInfo, writer.uint32(10).fork()).join();
        }
        if (message.operatorLinkAdminType !== 0) {
          writer.uint32(16).int32(message.operatorLinkAdminType);
        }
        if (message.kickPlayerUserInfo !== void 0) {
          exports.User.encode(message.kickPlayerUserInfo, writer.uint32(26).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseMultiLiveContent_KickOutBizContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.operatorUserInfo = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.operatorLinkAdminType = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.kickPlayerUserInfo = exports.User.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseInviteContent() {
      return {
        invitor: void 0,
        inviteeRtcExtInfo: void 0,
        invitorLinkMicId: "",
        inviteeLinkMicId: "",
        isOwner: false,
        pos: void 0,
        dsl: void 0,
        invitee: void 0,
        operator: void 0
      };
    }
    exports.InviteContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.invitor !== void 0) {
          exports.Player.encode(message.invitor, writer.uint32(10).fork()).join();
        }
        if (message.inviteeRtcExtInfo !== void 0) {
          exports.RTCExtraInfo.encode(message.inviteeRtcExtInfo, writer.uint32(18).fork()).join();
        }
        if (message.invitorLinkMicId !== "") {
          writer.uint32(26).string(message.invitorLinkMicId);
        }
        if (message.inviteeLinkMicId !== "") {
          writer.uint32(34).string(message.inviteeLinkMicId);
        }
        if (message.isOwner !== false) {
          writer.uint32(40).bool(message.isOwner);
        }
        if (message.pos !== void 0) {
          exports.Position.encode(message.pos, writer.uint32(50).fork()).join();
        }
        if (message.dsl !== void 0) {
          exports.DSLConfig.encode(message.dsl, writer.uint32(58).fork()).join();
        }
        if (message.invitee !== void 0) {
          exports.User.encode(message.invitee, writer.uint32(66).fork()).join();
        }
        if (message.operator !== void 0) {
          exports.User.encode(message.operator, writer.uint32(74).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseInviteContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.invitor = exports.Player.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.inviteeRtcExtInfo = exports.RTCExtraInfo.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.invitorLinkMicId = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.inviteeLinkMicId = reader.string();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.isOwner = reader.bool();
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.pos = exports.Position.decode(reader, reader.uint32());
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.dsl = exports.DSLConfig.decode(reader, reader.uint32());
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.invitee = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 9: {
              if (tag !== 74) {
                break;
              }
              message.operator = exports.User.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseApplyContent() {
      return { applier: void 0, applierLinkMicId: "" };
    }
    exports.ApplyContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.applier !== void 0) {
          exports.Player.encode(message.applier, writer.uint32(10).fork()).join();
        }
        if (message.applierLinkMicId !== "") {
          writer.uint32(18).string(message.applierLinkMicId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseApplyContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.applier = exports.Player.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.applierLinkMicId = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBasePermitApplyContent() {
      return {
        permiter: void 0,
        permiterLinkMicId: "",
        applierPos: void 0,
        replyStatus: 0,
        dsl: void 0,
        applier: void 0,
        operator: void 0,
        applierLinkMicId: ""
      };
    }
    exports.PermitApplyContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.permiter !== void 0) {
          exports.Player.encode(message.permiter, writer.uint32(10).fork()).join();
        }
        if (message.permiterLinkMicId !== "") {
          writer.uint32(18).string(message.permiterLinkMicId);
        }
        if (message.applierPos !== void 0) {
          exports.Position.encode(message.applierPos, writer.uint32(26).fork()).join();
        }
        if (message.replyStatus !== 0) {
          writer.uint32(32).int32(message.replyStatus);
        }
        if (message.dsl !== void 0) {
          exports.DSLConfig.encode(message.dsl, writer.uint32(42).fork()).join();
        }
        if (message.applier !== void 0) {
          exports.User.encode(message.applier, writer.uint32(50).fork()).join();
        }
        if (message.operator !== void 0) {
          exports.User.encode(message.operator, writer.uint32(58).fork()).join();
        }
        if (message.applierLinkMicId !== "") {
          writer.uint32(66).string(message.applierLinkMicId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBasePermitApplyContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.permiter = exports.Player.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.permiterLinkMicId = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.applierPos = exports.Position.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.replyStatus = reader.int32();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.dsl = exports.DSLConfig.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.applier = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.operator = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.applierLinkMicId = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseReplyInviteContent() {
      return {
        invitee: void 0,
        replyStatus: 0,
        inviteeLinkMicId: "",
        inviteePos: void 0,
        inviteOperatorUser: void 0,
        linkedUserUiPositions: [],
        uiPos: []
      };
    }
    exports.ReplyInviteContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.invitee !== void 0) {
          exports.Player.encode(message.invitee, writer.uint32(10).fork()).join();
        }
        if (message.replyStatus !== 0) {
          writer.uint32(16).int32(message.replyStatus);
        }
        if (message.inviteeLinkMicId !== "") {
          writer.uint32(26).string(message.inviteeLinkMicId);
        }
        if (message.inviteePos !== void 0) {
          exports.Position.encode(message.inviteePos, writer.uint32(34).fork()).join();
        }
        if (message.inviteOperatorUser !== void 0) {
          exports.Player.encode(message.inviteOperatorUser, writer.uint32(42).fork()).join();
        }
        for (const v of message.linkedUserUiPositions) {
          writer.uint32(50).string(v);
        }
        for (const v of message.uiPos) {
          exports.PosIdentity.encode(v, writer.uint32(58).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseReplyInviteContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.invitee = exports.Player.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.replyStatus = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.inviteeLinkMicId = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.inviteePos = exports.Position.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.inviteOperatorUser = exports.Player.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.linkedUserUiPositions.push(reader.string());
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.uiPos.push(exports.PosIdentity.decode(reader, reader.uint32()));
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseKickOutContent() {
      return { offliner: void 0, kickoutReason: 0, linkedUserUiPositions: [], uiPos: [] };
    }
    exports.KickOutContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.offliner !== void 0) {
          exports.Player.encode(message.offliner, writer.uint32(10).fork()).join();
        }
        if (message.kickoutReason !== 0) {
          writer.uint32(16).int32(message.kickoutReason);
        }
        for (const v of message.linkedUserUiPositions) {
          writer.uint32(26).string(v);
        }
        for (const v of message.uiPos) {
          exports.PosIdentity.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseKickOutContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.offliner = exports.Player.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.kickoutReason = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.linkedUserUiPositions.push(reader.string());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.uiPos.push(exports.PosIdentity.decode(reader, reader.uint32()));
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBasePosIdentity() {
      return { type: 0, value: "" };
    }
    exports.PosIdentity = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== 0) {
          writer.uint32(8).int32(message.type);
        }
        if (message.value !== "") {
          writer.uint32(18).string(message.value);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBasePosIdentity();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.type = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.value = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseCancelApplyContent() {
      return { applier: void 0, applierLinkMicId: "" };
    }
    exports.CancelApplyContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.applier !== void 0) {
          exports.Player.encode(message.applier, writer.uint32(10).fork()).join();
        }
        if (message.applierLinkMicId !== "") {
          writer.uint32(18).string(message.applierLinkMicId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseCancelApplyContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.applier = exports.Player.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.applierLinkMicId = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseCancelInviteContent() {
      return { invitor: void 0, invitorLinkMicId: "", inviteeLinkMicId: "", inviteSeqId: "0", invitee: void 0 };
    }
    exports.CancelInviteContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.invitor !== void 0) {
          exports.Player.encode(message.invitor, writer.uint32(10).fork()).join();
        }
        if (message.invitorLinkMicId !== "") {
          writer.uint32(18).string(message.invitorLinkMicId);
        }
        if (message.inviteeLinkMicId !== "") {
          writer.uint32(26).string(message.inviteeLinkMicId);
        }
        if (message.inviteSeqId !== "0") {
          writer.uint32(32).int64(message.inviteSeqId);
        }
        if (message.invitee !== void 0) {
          exports.Player.encode(message.invitee, writer.uint32(42).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseCancelInviteContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.invitor = exports.Player.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.invitorLinkMicId = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.inviteeLinkMicId = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.inviteSeqId = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.invitee = exports.Player.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLeaveContent() {
      return { leaver: void 0, leaveReason: "0", linkedUserUiPositions: [], uiPos: [] };
    }
    exports.LeaveContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.leaver !== void 0) {
          exports.Player.encode(message.leaver, writer.uint32(10).fork()).join();
        }
        if (message.leaveReason !== "0") {
          writer.uint32(16).int64(message.leaveReason);
        }
        for (const v of message.linkedUserUiPositions) {
          writer.uint32(26).string(v);
        }
        for (const v of message.uiPos) {
          exports.PosIdentity.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLeaveContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.leaver = exports.Player.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.leaveReason = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.linkedUserUiPositions.push(reader.string());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.uiPos.push(exports.PosIdentity.decode(reader, reader.uint32()));
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseFinishChannelContent() {
      return { owner: void 0, finishReason: "0" };
    }
    exports.FinishChannelContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.owner !== void 0) {
          exports.Player.encode(message.owner, writer.uint32(10).fork()).join();
        }
        if (message.finishReason !== "0") {
          writer.uint32(16).int64(message.finishReason);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseFinishChannelContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.owner = exports.Player.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.finishReason = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseJoinDirectContent() {
      return { joiner: void 0, allUsers: void 0 };
    }
    exports.JoinDirectContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.joiner !== void 0) {
          exports.LinkLayerListUser.encode(message.joiner, writer.uint32(10).fork()).join();
        }
        if (message.allUsers !== void 0) {
          exports.AllListUser.encode(message.allUsers, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseJoinDirectContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.joiner = exports.LinkLayerListUser.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.allUsers = exports.AllListUser.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLeaveJoinGroupContent() {
      return { operator: void 0, groupChannelId: "0", leaveSource: "", linkedUserUiPositions: [] };
    }
    exports.LeaveJoinGroupContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.operator !== void 0) {
          exports.GroupPlayer.encode(message.operator, writer.uint32(10).fork()).join();
        }
        if (message.groupChannelId !== "0") {
          writer.uint32(16).int64(message.groupChannelId);
        }
        if (message.leaveSource !== "") {
          writer.uint32(26).string(message.leaveSource);
        }
        for (const v of message.linkedUserUiPositions) {
          writer.uint32(34).string(v);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLeaveJoinGroupContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.operator = exports.GroupPlayer.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.groupChannelId = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.leaveSource = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.linkedUserUiPositions.push(reader.string());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBasePermitJoinGroupContent() {
      return {
        approver: void 0,
        agreeStatus: 0,
        type: 0,
        groupExtInfoList: [],
        groupUser: void 0,
        migrationDetails: void 0,
        linkedUserUiPositions: []
      };
    }
    exports.PermitJoinGroupContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.approver !== void 0) {
          exports.GroupPlayer.encode(message.approver, writer.uint32(10).fork()).join();
        }
        if (message.agreeStatus !== 0) {
          writer.uint32(16).int32(message.agreeStatus);
        }
        if (message.type !== 0) {
          writer.uint32(24).int32(message.type);
        }
        for (const v of message.groupExtInfoList) {
          exports.RTCExtraInfo.encode(v, writer.uint32(34).fork()).join();
        }
        if (message.groupUser !== void 0) {
          exports.GroupChannelAllUser.encode(message.groupUser, writer.uint32(42).fork()).join();
        }
        if (message.migrationDetails !== void 0) {
          exports.MigrationDetails.encode(message.migrationDetails, writer.uint32(50).fork()).join();
        }
        for (const v of message.linkedUserUiPositions) {
          writer.uint32(58).string(v);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBasePermitJoinGroupContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.approver = exports.GroupPlayer.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.agreeStatus = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.type = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.groupExtInfoList.push(exports.RTCExtraInfo.decode(reader, reader.uint32()));
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.groupUser = exports.GroupChannelAllUser.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.migrationDetails = exports.MigrationDetails.decode(reader, reader.uint32());
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.linkedUserUiPositions.push(reader.string());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseMigrationDetails() {
      return { isMigrate: false, sourceGroupChannelId: "0", targetGroupChannelId: "0" };
    }
    exports.MigrationDetails = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isMigrate !== false) {
          writer.uint32(8).bool(message.isMigrate);
        }
        if (message.sourceGroupChannelId !== "0") {
          writer.uint32(16).int64(message.sourceGroupChannelId);
        }
        if (message.targetGroupChannelId !== "0") {
          writer.uint32(24).int64(message.targetGroupChannelId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseMigrationDetails();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.isMigrate = reader.bool();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.sourceGroupChannelId = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.targetGroupChannelId = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseCancelJoinGroupContent() {
      return { leaverList: [], operator: void 0, type: 0, groupUser: void 0 };
    }
    exports.CancelJoinGroupContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.leaverList) {
          exports.GroupPlayer.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.operator !== void 0) {
          exports.GroupPlayer.encode(message.operator, writer.uint32(18).fork()).join();
        }
        if (message.type !== 0) {
          writer.uint32(24).int32(message.type);
        }
        if (message.groupUser !== void 0) {
          exports.GroupChannelAllUser.encode(message.groupUser, writer.uint32(34).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseCancelJoinGroupContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.leaverList.push(exports.GroupPlayer.decode(reader, reader.uint32()));
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.operator = exports.GroupPlayer.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.type = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.groupUser = exports.GroupChannelAllUser.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseP2PGroupChangeContent() {
      return { groupExtInfoList: [], groupUser: void 0, migrationDetails: void 0, contentPos: [] };
    }
    exports.P2PGroupChangeContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.groupExtInfoList) {
          exports.RTCExtraInfo.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.groupUser !== void 0) {
          exports.GroupChannelAllUser.encode(message.groupUser, writer.uint32(18).fork()).join();
        }
        if (message.migrationDetails !== void 0) {
          exports.MigrationDetails.encode(message.migrationDetails, writer.uint32(26).fork()).join();
        }
        for (const v of message.contentPos) {
          exports.ContentPosition.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseP2PGroupChangeContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.groupExtInfoList.push(exports.RTCExtraInfo.decode(reader, reader.uint32()));
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.groupUser = exports.GroupChannelAllUser.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.migrationDetails = exports.MigrationDetails.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.contentPos.push(exports.ContentPosition.decode(reader, reader.uint32()));
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseGroupChangeContent() {
      return { groupUser: void 0, linkedUserUiPositions: [] };
    }
    exports.GroupChangeContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.groupUser !== void 0) {
          exports.GroupChannelAllUser.encode(message.groupUser, writer.uint32(10).fork()).join();
        }
        for (const v of message.linkedUserUiPositions) {
          writer.uint32(18).string(v);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseGroupChangeContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.groupUser = exports.GroupChannelAllUser.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.linkedUserUiPositions.push(reader.string());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBusinessContent() {
      return { overLength: "0", multiLiveContent: void 0, cohostContent: void 0 };
    }
    exports.BusinessContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.overLength !== "0") {
          writer.uint32(8).int64(message.overLength);
        }
        if (message.multiLiveContent !== void 0) {
          exports.MultiLiveContent.encode(message.multiLiveContent, writer.uint32(802).fork()).join();
        }
        if (message.cohostContent !== void 0) {
          exports.BusinessContent_CohostContent.encode(message.cohostContent, writer.uint32(1602).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.overLength = reader.int64().toString();
              continue;
            }
            case 100: {
              if (tag !== 802) {
                break;
              }
              message.multiLiveContent = exports.MultiLiveContent.decode(reader, reader.uint32());
              continue;
            }
            case 200: {
              if (tag !== 1602) {
                break;
              }
              message.cohostContent = exports.BusinessContent_CohostContent.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBusinessContent_CohostContent() {
      return { joinGroupBizContent: void 0, permitJoinGroupBizContent: void 0, listChangeBizContent: void 0 };
    }
    exports.BusinessContent_CohostContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.joinGroupBizContent !== void 0) {
          exports.BusinessContent_JoinGroupBizContent.encode(message.joinGroupBizContent, writer.uint32(10).fork()).join();
        }
        if (message.permitJoinGroupBizContent !== void 0) {
          exports.BusinessContent_PermitJoinGroupBizContent.encode(message.permitJoinGroupBizContent, writer.uint32(18).fork()).join();
        }
        if (message.listChangeBizContent !== void 0) {
          exports.BusinessContent_ListChangeBizContent.encode(message.listChangeBizContent, writer.uint32(90).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_CohostContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.joinGroupBizContent = exports.BusinessContent_JoinGroupBizContent.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.permitJoinGroupBizContent = exports.BusinessContent_PermitJoinGroupBizContent.decode(reader, reader.uint32());
              continue;
            }
            case 11: {
              if (tag !== 90) {
                break;
              }
              message.listChangeBizContent = exports.BusinessContent_ListChangeBizContent.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBusinessContent_PermitJoinGroupBizContent() {
      return { replyStatus: 0, sourceType: 0 };
    }
    exports.BusinessContent_PermitJoinGroupBizContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.replyStatus !== 0) {
          writer.uint32(8).int32(message.replyStatus);
        }
        if (message.sourceType !== 0) {
          writer.uint32(16).int32(message.sourceType);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_PermitJoinGroupBizContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.replyStatus = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.sourceType = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBusinessContent_ListChangeBizContent() {
      return { userInfos: {}, waitingUsers: [] };
    }
    exports.BusinessContent_ListChangeBizContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        Object.entries(message.userInfos).forEach(([key, value]) => {
          exports.BusinessContent_ListChangeBizContent_UserInfosEntry.encode({ key, value }, writer.uint32(10).fork()).join();
        });
        for (const v of message.waitingUsers) {
          exports.BusinessContent_ListChangeBizContent_VirtualWaitingUser.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_ListChangeBizContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              const entry1 = exports.BusinessContent_ListChangeBizContent_UserInfosEntry.decode(reader, reader.uint32());
              if (entry1.value !== void 0) {
                message.userInfos[entry1.key] = entry1.value;
              }
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.waitingUsers.push(exports.BusinessContent_ListChangeBizContent_VirtualWaitingUser.decode(reader, reader.uint32()));
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBusinessContent_ListChangeBizContent_UserInfosEntry() {
      return { key: "0", value: void 0 };
    }
    exports.BusinessContent_ListChangeBizContent_UserInfosEntry = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "0") {
          writer.uint32(8).int64(message.key);
        }
        if (message.value !== void 0) {
          exports.BusinessContent_CohostUserInfo.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_ListChangeBizContent_UserInfosEntry();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.key = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.value = exports.BusinessContent_CohostUserInfo.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBusinessContent_ListChangeBizContent_VirtualWaitingUser() {
      return { userId: "0", timestamp: "0", avatars: [] };
    }
    exports.BusinessContent_ListChangeBizContent_VirtualWaitingUser = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
          writer.uint32(8).int64(message.userId);
        }
        if (message.timestamp !== "0") {
          writer.uint32(16).int64(message.timestamp);
        }
        for (const v of message.avatars) {
          exports.Image.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_ListChangeBizContent_VirtualWaitingUser();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.userId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.timestamp = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.avatars.push(exports.Image.decode(reader, reader.uint32()));
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBusinessContent_CohostUserInfo() {
      return {
        permissionType: "0",
        sourceType: 0,
        isLowVersion: false,
        bestTeammateUid: "0",
        hasTopicPerm: false,
        streamConfig: void 0,
        inDifferentInviteTypeControlGroup: false,
        nickname: "",
        displayId: "",
        avatarThumb: void 0,
        followStatus: "0",
        userIdStr: ""
      };
    }
    exports.BusinessContent_CohostUserInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.permissionType !== "0") {
          writer.uint32(8).int64(message.permissionType);
        }
        if (message.sourceType !== 0) {
          writer.uint32(16).int32(message.sourceType);
        }
        if (message.isLowVersion !== false) {
          writer.uint32(24).bool(message.isLowVersion);
        }
        if (message.bestTeammateUid !== "0") {
          writer.uint32(32).int64(message.bestTeammateUid);
        }
        if (message.hasTopicPerm !== false) {
          writer.uint32(40).bool(message.hasTopicPerm);
        }
        if (message.streamConfig !== void 0) {
          exports.BusinessContent_CohostUserInfo_CohostStreamConfig.encode(message.streamConfig, writer.uint32(50).fork()).join();
        }
        if (message.inDifferentInviteTypeControlGroup !== false) {
          writer.uint32(56).bool(message.inDifferentInviteTypeControlGroup);
        }
        if (message.nickname !== "") {
          writer.uint32(90).string(message.nickname);
        }
        if (message.displayId !== "") {
          writer.uint32(98).string(message.displayId);
        }
        if (message.avatarThumb !== void 0) {
          exports.Image.encode(message.avatarThumb, writer.uint32(106).fork()).join();
        }
        if (message.followStatus !== "0") {
          writer.uint32(112).int64(message.followStatus);
        }
        if (message.userIdStr !== "") {
          writer.uint32(122).string(message.userIdStr);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_CohostUserInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.permissionType = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.sourceType = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.isLowVersion = reader.bool();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.bestTeammateUid = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.hasTopicPerm = reader.bool();
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.streamConfig = exports.BusinessContent_CohostUserInfo_CohostStreamConfig.decode(reader, reader.uint32());
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.inDifferentInviteTypeControlGroup = reader.bool();
              continue;
            }
            case 11: {
              if (tag !== 90) {
                break;
              }
              message.nickname = reader.string();
              continue;
            }
            case 12: {
              if (tag !== 98) {
                break;
              }
              message.displayId = reader.string();
              continue;
            }
            case 13: {
              if (tag !== 106) {
                break;
              }
              message.avatarThumb = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 14: {
              if (tag !== 112) {
                break;
              }
              message.followStatus = reader.int64().toString();
              continue;
            }
            case 15: {
              if (tag !== 122) {
                break;
              }
              message.userIdStr = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBusinessContent_CohostUserInfo_CohostStreamConfig() {
      return { screenShareStreamId: "" };
    }
    exports.BusinessContent_CohostUserInfo_CohostStreamConfig = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.screenShareStreamId !== "") {
          writer.uint32(10).string(message.screenShareStreamId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_CohostUserInfo_CohostStreamConfig();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.screenShareStreamId = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBusinessContent_JoinGroupBizContent() {
      return {
        fromRoomAgeRestricted: 0,
        fromTag: void 0,
        dialog: void 0,
        punishInfo: void 0,
        topicInfo: void 0,
        algoRequestId: "",
        cohostLayoutMode: 0,
        tag: void 0,
        gameTag: void 0,
        newUserEducation: "",
        joinGroupMsgExtra: void 0
      };
    }
    exports.BusinessContent_JoinGroupBizContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.fromRoomAgeRestricted !== 0) {
          writer.uint32(8).int32(message.fromRoomAgeRestricted);
        }
        if (message.fromTag !== void 0) {
          exports.BusinessContent_Tag.encode(message.fromTag, writer.uint32(18).fork()).join();
        }
        if (message.dialog !== void 0) {
          exports.BusinessContent_PerceptionDialogInfo.encode(message.dialog, writer.uint32(26).fork()).join();
        }
        if (message.punishInfo !== void 0) {
          exports.PunishEventInfo.encode(message.punishInfo, writer.uint32(34).fork()).join();
        }
        if (message.topicInfo !== void 0) {
          exports.CohostTopic.encode(message.topicInfo, writer.uint32(42).fork()).join();
        }
        if (message.algoRequestId !== "") {
          writer.uint32(50).string(message.algoRequestId);
        }
        if (message.cohostLayoutMode !== 0) {
          writer.uint32(56).int32(message.cohostLayoutMode);
        }
        if (message.tag !== void 0) {
          exports.BusinessContent_JoinGroupBizContent_TagV2.encode(message.tag, writer.uint32(66).fork()).join();
        }
        if (message.gameTag !== void 0) {
          exports.BusinessContent_JoinGroupBizContent_RivalsGameTag.encode(message.gameTag, writer.uint32(74).fork()).join();
        }
        if (message.newUserEducation !== "") {
          writer.uint32(90).string(message.newUserEducation);
        }
        if (message.joinGroupMsgExtra !== void 0) {
          exports.BusinessContent_JoinGroupMessageExtra.encode(message.joinGroupMsgExtra, writer.uint32(810).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_JoinGroupBizContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.fromRoomAgeRestricted = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.fromTag = exports.BusinessContent_Tag.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.dialog = exports.BusinessContent_PerceptionDialogInfo.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.punishInfo = exports.PunishEventInfo.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.topicInfo = exports.CohostTopic.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.algoRequestId = reader.string();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.cohostLayoutMode = reader.int32();
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.tag = exports.BusinessContent_JoinGroupBizContent_TagV2.decode(reader, reader.uint32());
              continue;
            }
            case 9: {
              if (tag !== 74) {
                break;
              }
              message.gameTag = exports.BusinessContent_JoinGroupBizContent_RivalsGameTag.decode(reader, reader.uint32());
              continue;
            }
            case 11: {
              if (tag !== 90) {
                break;
              }
              message.newUserEducation = reader.string();
              continue;
            }
            case 101: {
              if (tag !== 810) {
                break;
              }
              message.joinGroupMsgExtra = exports.BusinessContent_JoinGroupMessageExtra.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBusinessContent_JoinGroupBizContent_RivalsGameTag() {
      return { tagId: "0", tagDisplayText: "" };
    }
    exports.BusinessContent_JoinGroupBizContent_RivalsGameTag = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.tagId !== "0") {
          writer.uint32(8).int64(message.tagId);
        }
        if (message.tagDisplayText !== "") {
          writer.uint32(18).string(message.tagDisplayText);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_JoinGroupBizContent_RivalsGameTag();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.tagId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.tagDisplayText = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBusinessContent_JoinGroupBizContent_TagV2() {
      return {
        tagClassification: 0,
        tagType: 0,
        tagValue: "",
        starlingKey: "",
        secondDegreeRelationContent: void 0,
        cohostHistoryDay: "0",
        similarInterestContent: void 0
      };
    }
    exports.BusinessContent_JoinGroupBizContent_TagV2 = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.tagClassification !== 0) {
          writer.uint32(8).int32(message.tagClassification);
        }
        if (message.tagType !== 0) {
          writer.uint32(16).int32(message.tagType);
        }
        if (message.tagValue !== "") {
          writer.uint32(26).string(message.tagValue);
        }
        if (message.starlingKey !== "") {
          writer.uint32(34).string(message.starlingKey);
        }
        if (message.secondDegreeRelationContent !== void 0) {
          exports.BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent.encode(message.secondDegreeRelationContent, writer.uint32(82).fork()).join();
        }
        if (message.cohostHistoryDay !== "0") {
          writer.uint32(88).int64(message.cohostHistoryDay);
        }
        if (message.similarInterestContent !== void 0) {
          exports.BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent.encode(message.similarInterestContent, writer.uint32(98).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_JoinGroupBizContent_TagV2();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.tagClassification = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.tagType = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.tagValue = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.starlingKey = reader.string();
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              message.secondDegreeRelationContent = exports.BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent.decode(reader, reader.uint32());
              continue;
            }
            case 11: {
              if (tag !== 88) {
                break;
              }
              message.cohostHistoryDay = reader.int64().toString();
              continue;
            }
            case 12: {
              if (tag !== 98) {
                break;
              }
              message.similarInterestContent = exports.BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBusinessContent_JoinGroupBizContent_TagV2_UserInfo() {
      return { userId: "0", nickName: "", avatarThumb: void 0 };
    }
    exports.BusinessContent_JoinGroupBizContent_TagV2_UserInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
          writer.uint32(8).int64(message.userId);
        }
        if (message.nickName !== "") {
          writer.uint32(18).string(message.nickName);
        }
        if (message.avatarThumb !== void 0) {
          exports.Image.encode(message.avatarThumb, writer.uint32(26).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_JoinGroupBizContent_TagV2_UserInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.userId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.nickName = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.avatarThumb = exports.Image.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent() {
      return { relatedUsers: [], totalRelatedUserCnt: "0" };
    }
    exports.BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.relatedUsers) {
          exports.BusinessContent_JoinGroupBizContent_TagV2_UserInfo.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.totalRelatedUserCnt !== "0") {
          writer.uint32(16).int64(message.totalRelatedUserCnt);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.relatedUsers.push(exports.BusinessContent_JoinGroupBizContent_TagV2_UserInfo.decode(reader, reader.uint32()));
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.totalRelatedUserCnt = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent() {
      return { contentId: "0", displayText: "" };
    }
    exports.BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.contentId !== "0") {
          writer.uint32(8).int64(message.contentId);
        }
        if (message.displayText !== "") {
          writer.uint32(18).string(message.displayText);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.contentId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.displayText = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBusinessContent_Tag() {
      return { tagType: 0, tagValue: "", tagText: "" };
    }
    exports.BusinessContent_Tag = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.tagType !== 0) {
          writer.uint32(8).int32(message.tagType);
        }
        if (message.tagValue !== "") {
          writer.uint32(18).string(message.tagValue);
        }
        if (message.tagText !== "") {
          writer.uint32(26).string(message.tagText);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_Tag();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.tagType = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.tagValue = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.tagText = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBusinessContent_PerceptionDialogInfo() {
      return {
        iconType: "0",
        title: void 0,
        subTitle: void 0,
        adviceActionText: void 0,
        defaultActionText: void 0,
        violationDetailUrl: "",
        scene: 0,
        targetUserId: "0",
        targetRoomId: "0",
        countDownTime: "0",
        showFeedback: false,
        feedbackOptionsList: [],
        policyTip: "0"
      };
    }
    exports.BusinessContent_PerceptionDialogInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.iconType !== "0") {
          writer.uint32(8).int64(message.iconType);
        }
        if (message.title !== void 0) {
          exports.Text.encode(message.title, writer.uint32(18).fork()).join();
        }
        if (message.subTitle !== void 0) {
          exports.Text.encode(message.subTitle, writer.uint32(26).fork()).join();
        }
        if (message.adviceActionText !== void 0) {
          exports.Text.encode(message.adviceActionText, writer.uint32(34).fork()).join();
        }
        if (message.defaultActionText !== void 0) {
          exports.Text.encode(message.defaultActionText, writer.uint32(42).fork()).join();
        }
        if (message.violationDetailUrl !== "") {
          writer.uint32(50).string(message.violationDetailUrl);
        }
        if (message.scene !== 0) {
          writer.uint32(56).int32(message.scene);
        }
        if (message.targetUserId !== "0") {
          writer.uint32(64).int64(message.targetUserId);
        }
        if (message.targetRoomId !== "0") {
          writer.uint32(72).int64(message.targetRoomId);
        }
        if (message.countDownTime !== "0") {
          writer.uint32(80).int64(message.countDownTime);
        }
        if (message.showFeedback !== false) {
          writer.uint32(88).bool(message.showFeedback);
        }
        for (const v of message.feedbackOptionsList) {
          exports.BusinessContent_PerceptionFeedbackOption.encode(v, writer.uint32(98).fork()).join();
        }
        if (message.policyTip !== "0") {
          writer.uint32(104).int64(message.policyTip);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_PerceptionDialogInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.iconType = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.title = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.subTitle = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.adviceActionText = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.defaultActionText = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.violationDetailUrl = reader.string();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.scene = reader.int32();
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.targetUserId = reader.int64().toString();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.targetRoomId = reader.int64().toString();
              continue;
            }
            case 10: {
              if (tag !== 80) {
                break;
              }
              message.countDownTime = reader.int64().toString();
              continue;
            }
            case 11: {
              if (tag !== 88) {
                break;
              }
              message.showFeedback = reader.bool();
              continue;
            }
            case 12: {
              if (tag !== 98) {
                break;
              }
              message.feedbackOptionsList.push(exports.BusinessContent_PerceptionFeedbackOption.decode(reader, reader.uint32()));
              continue;
            }
            case 13: {
              if (tag !== 104) {
                break;
              }
              message.policyTip = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBusinessContent_PerceptionFeedbackOption() {
      return { id: "0", contentKey: "" };
    }
    exports.BusinessContent_PerceptionFeedbackOption = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "0") {
          writer.uint32(8).int64(message.id);
        }
        if (message.contentKey !== "") {
          writer.uint32(18).string(message.contentKey);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_PerceptionFeedbackOption();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.id = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.contentKey = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBusinessContent_JoinGroupMessageExtra() {
      return { sourceType: "0", extra: void 0, otherUsersList: [] };
    }
    exports.BusinessContent_JoinGroupMessageExtra = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sourceType !== "0") {
          writer.uint32(8).int64(message.sourceType);
        }
        if (message.extra !== void 0) {
          exports.BusinessContent_JoinGroupMessageExtra_RivalExtra.encode(message.extra, writer.uint32(18).fork()).join();
        }
        for (const v of message.otherUsersList) {
          exports.BusinessContent_JoinGroupMessageExtra_RivalExtra.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_JoinGroupMessageExtra();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.sourceType = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.extra = exports.BusinessContent_JoinGroupMessageExtra_RivalExtra.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.otherUsersList.push(exports.BusinessContent_JoinGroupMessageExtra_RivalExtra.decode(reader, reader.uint32()));
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBusinessContent_JoinGroupMessageExtra_RivalExtra() {
      return {
        userCount: "0",
        avatarThumb: void 0,
        displayId: "",
        authenticationInfo: void 0,
        nickname: "",
        followStatus: "0",
        hashtag: void 0,
        topHostInfo: void 0,
        userId: "0",
        isBestTeammate: false
      };
    }
    exports.BusinessContent_JoinGroupMessageExtra_RivalExtra = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userCount !== "0") {
          writer.uint32(32).int64(message.userCount);
        }
        if (message.avatarThumb !== void 0) {
          exports.Image.encode(message.avatarThumb, writer.uint32(42).fork()).join();
        }
        if (message.displayId !== "") {
          writer.uint32(50).string(message.displayId);
        }
        if (message.authenticationInfo !== void 0) {
          exports.BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo.encode(message.authenticationInfo, writer.uint32(58).fork()).join();
        }
        if (message.nickname !== "") {
          writer.uint32(66).string(message.nickname);
        }
        if (message.followStatus !== "0") {
          writer.uint32(72).int64(message.followStatus);
        }
        if (message.hashtag !== void 0) {
          exports.BusinessContent_Hashtag.encode(message.hashtag, writer.uint32(82).fork()).join();
        }
        if (message.topHostInfo !== void 0) {
          exports.BusinessContent_TopHostInfo.encode(message.topHostInfo, writer.uint32(90).fork()).join();
        }
        if (message.userId !== "0") {
          writer.uint32(96).int64(message.userId);
        }
        if (message.isBestTeammate !== false) {
          writer.uint32(104).bool(message.isBestTeammate);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_JoinGroupMessageExtra_RivalExtra();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.userCount = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.avatarThumb = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.displayId = reader.string();
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.authenticationInfo = exports.BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo.decode(reader, reader.uint32());
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.nickname = reader.string();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.followStatus = reader.int64().toString();
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              message.hashtag = exports.BusinessContent_Hashtag.decode(reader, reader.uint32());
              continue;
            }
            case 11: {
              if (tag !== 90) {
                break;
              }
              message.topHostInfo = exports.BusinessContent_TopHostInfo.decode(reader, reader.uint32());
              continue;
            }
            case 12: {
              if (tag !== 96) {
                break;
              }
              message.userId = reader.int64().toString();
              continue;
            }
            case 13: {
              if (tag !== 104) {
                break;
              }
              message.isBestTeammate = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo() {
      return { customVerify: "", enterpriseVerifyReason: "", authenticationBadge: void 0 };
    }
    exports.BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customVerify !== "") {
          writer.uint32(10).string(message.customVerify);
        }
        if (message.enterpriseVerifyReason !== "") {
          writer.uint32(18).string(message.enterpriseVerifyReason);
        }
        if (message.authenticationBadge !== void 0) {
          exports.Image.encode(message.authenticationBadge, writer.uint32(26).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.customVerify = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.enterpriseVerifyReason = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.authenticationBadge = exports.Image.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBusinessContent_Hashtag() {
      return { id: "0", title: "", image: void 0, namespace: 0 };
    }
    exports.BusinessContent_Hashtag = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "0") {
          writer.uint32(8).int64(message.id);
        }
        if (message.title !== "") {
          writer.uint32(18).string(message.title);
        }
        if (message.image !== void 0) {
          exports.Image.encode(message.image, writer.uint32(26).fork()).join();
        }
        if (message.namespace !== 0) {
          writer.uint32(32).int32(message.namespace);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_Hashtag();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.id = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.title = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.image = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.namespace = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBusinessContent_TopHostInfo() {
      return { rankType: "", topIndex: "0" };
    }
    exports.BusinessContent_TopHostInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rankType !== "") {
          writer.uint32(10).string(message.rankType);
        }
        if (message.topIndex !== "0") {
          writer.uint32(16).int64(message.topIndex);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_TopHostInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.rankType = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.topIndex = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseJoinGroupContent() {
      return { groupUser: void 0, joinUser: void 0, type: 0, groupExtInfo: [] };
    }
    exports.JoinGroupContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.groupUser !== void 0) {
          exports.GroupChannelAllUser.encode(message.groupUser, writer.uint32(10).fork()).join();
        }
        if (message.joinUser !== void 0) {
          exports.GroupPlayer.encode(message.joinUser, writer.uint32(18).fork()).join();
        }
        if (message.type !== 0) {
          writer.uint32(24).int32(message.type);
        }
        for (const v of message.groupExtInfo) {
          exports.RTCExtraInfo.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseJoinGroupContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.groupUser = exports.GroupChannelAllUser.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.joinUser = exports.GroupPlayer.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.type = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.groupExtInfo.push(exports.RTCExtraInfo.decode(reader, reader.uint32()));
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBasePrivilegeLogExtra() {
      return { dataVersion: "", privilegeId: "", privilegeVersion: "", privilegeOrderId: "", level: "" };
    }
    exports.PrivilegeLogExtra = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.dataVersion !== "") {
          writer.uint32(10).string(message.dataVersion);
        }
        if (message.privilegeId !== "") {
          writer.uint32(18).string(message.privilegeId);
        }
        if (message.privilegeVersion !== "") {
          writer.uint32(26).string(message.privilegeVersion);
        }
        if (message.privilegeOrderId !== "") {
          writer.uint32(34).string(message.privilegeOrderId);
        }
        if (message.level !== "") {
          writer.uint32(42).string(message.level);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBasePrivilegeLogExtra();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.dataVersion = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.privilegeId = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.privilegeVersion = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.privilegeOrderId = reader.string();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.level = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseFontStyle() {
      return { fontSize: 0, fontWidth: 0, fontColor: "", borderColor: "" };
    }
    exports.FontStyle = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.fontSize !== 0) {
          writer.uint32(8).int32(message.fontSize);
        }
        if (message.fontWidth !== 0) {
          writer.uint32(16).int32(message.fontWidth);
        }
        if (message.fontColor !== "") {
          writer.uint32(26).string(message.fontColor);
        }
        if (message.borderColor !== "") {
          writer.uint32(34).string(message.borderColor);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseFontStyle();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.fontSize = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.fontWidth = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.fontColor = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.borderColor = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUserHonor() {
      return {
        totalDiamond: "0",
        diamondIcon: void 0,
        currentHonorName: "",
        currentHonorIcon: void 0,
        nextHonorName: "",
        level: 0,
        nextHonorIcon: void 0,
        currentDiamond: "0",
        thisGradeMinDiamond: "0",
        thisGradeMaxDiamond: "0",
        gradeDescribe: "",
        gradeIconList: [],
        screenChatType: "0",
        imIcon: void 0,
        imIconWithLevel: void 0,
        liveIcon: void 0,
        newImIconWithLevel: void 0,
        newLiveIcon: void 0,
        upgradeNeedConsume: "0",
        nextPrivileges: "",
        profileDialogBg: void 0,
        profileDialogBackBg: void 0,
        score: "0",
        gradeBanner: ""
      };
    }
    exports.UserHonor = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.totalDiamond !== "0") {
          writer.uint32(8).int64(message.totalDiamond);
        }
        if (message.diamondIcon !== void 0) {
          exports.Image.encode(message.diamondIcon, writer.uint32(18).fork()).join();
        }
        if (message.currentHonorName !== "") {
          writer.uint32(26).string(message.currentHonorName);
        }
        if (message.currentHonorIcon !== void 0) {
          exports.Image.encode(message.currentHonorIcon, writer.uint32(34).fork()).join();
        }
        if (message.nextHonorName !== "") {
          writer.uint32(42).string(message.nextHonorName);
        }
        if (message.level !== 0) {
          writer.uint32(48).int32(message.level);
        }
        if (message.nextHonorIcon !== void 0) {
          exports.Image.encode(message.nextHonorIcon, writer.uint32(58).fork()).join();
        }
        if (message.currentDiamond !== "0") {
          writer.uint32(72).int64(message.currentDiamond);
        }
        if (message.thisGradeMinDiamond !== "0") {
          writer.uint32(80).int64(message.thisGradeMinDiamond);
        }
        if (message.thisGradeMaxDiamond !== "0") {
          writer.uint32(88).int64(message.thisGradeMaxDiamond);
        }
        if (message.gradeDescribe !== "") {
          writer.uint32(106).string(message.gradeDescribe);
        }
        for (const v of message.gradeIconList) {
          exports.GradeIcon.encode(v, writer.uint32(114).fork()).join();
        }
        if (message.screenChatType !== "0") {
          writer.uint32(120).int64(message.screenChatType);
        }
        if (message.imIcon !== void 0) {
          exports.Image.encode(message.imIcon, writer.uint32(130).fork()).join();
        }
        if (message.imIconWithLevel !== void 0) {
          exports.Image.encode(message.imIconWithLevel, writer.uint32(138).fork()).join();
        }
        if (message.liveIcon !== void 0) {
          exports.Image.encode(message.liveIcon, writer.uint32(146).fork()).join();
        }
        if (message.newImIconWithLevel !== void 0) {
          exports.Image.encode(message.newImIconWithLevel, writer.uint32(154).fork()).join();
        }
        if (message.newLiveIcon !== void 0) {
          exports.Image.encode(message.newLiveIcon, writer.uint32(162).fork()).join();
        }
        if (message.upgradeNeedConsume !== "0") {
          writer.uint32(168).int64(message.upgradeNeedConsume);
        }
        if (message.nextPrivileges !== "") {
          writer.uint32(178).string(message.nextPrivileges);
        }
        if (message.profileDialogBg !== void 0) {
          exports.Image.encode(message.profileDialogBg, writer.uint32(186).fork()).join();
        }
        if (message.profileDialogBackBg !== void 0) {
          exports.Image.encode(message.profileDialogBackBg, writer.uint32(194).fork()).join();
        }
        if (message.score !== "0") {
          writer.uint32(200).int64(message.score);
        }
        if (message.gradeBanner !== "") {
          writer.uint32(8010).string(message.gradeBanner);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUserHonor();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.totalDiamond = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.diamondIcon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.currentHonorName = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.currentHonorIcon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.nextHonorName = reader.string();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.level = reader.int32();
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.nextHonorIcon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.currentDiamond = reader.int64().toString();
              continue;
            }
            case 10: {
              if (tag !== 80) {
                break;
              }
              message.thisGradeMinDiamond = reader.int64().toString();
              continue;
            }
            case 11: {
              if (tag !== 88) {
                break;
              }
              message.thisGradeMaxDiamond = reader.int64().toString();
              continue;
            }
            case 13: {
              if (tag !== 106) {
                break;
              }
              message.gradeDescribe = reader.string();
              continue;
            }
            case 14: {
              if (tag !== 114) {
                break;
              }
              message.gradeIconList.push(exports.GradeIcon.decode(reader, reader.uint32()));
              continue;
            }
            case 15: {
              if (tag !== 120) {
                break;
              }
              message.screenChatType = reader.int64().toString();
              continue;
            }
            case 16: {
              if (tag !== 130) {
                break;
              }
              message.imIcon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 17: {
              if (tag !== 138) {
                break;
              }
              message.imIconWithLevel = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 18: {
              if (tag !== 146) {
                break;
              }
              message.liveIcon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 19: {
              if (tag !== 154) {
                break;
              }
              message.newImIconWithLevel = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 20: {
              if (tag !== 162) {
                break;
              }
              message.newLiveIcon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 21: {
              if (tag !== 168) {
                break;
              }
              message.upgradeNeedConsume = reader.int64().toString();
              continue;
            }
            case 22: {
              if (tag !== 178) {
                break;
              }
              message.nextPrivileges = reader.string();
              continue;
            }
            case 23: {
              if (tag !== 186) {
                break;
              }
              message.profileDialogBg = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 24: {
              if (tag !== 194) {
                break;
              }
              message.profileDialogBackBg = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 25: {
              if (tag !== 200) {
                break;
              }
              message.score = reader.int64().toString();
              continue;
            }
            case 1001: {
              if (tag !== 8010) {
                break;
              }
              message.gradeBanner = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseGradeIcon() {
      return { icon: void 0, iconDiamond: "0", level: "0", levelStr: "" };
    }
    exports.GradeIcon = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.icon !== void 0) {
          exports.Image.encode(message.icon, writer.uint32(10).fork()).join();
        }
        if (message.iconDiamond !== "0") {
          writer.uint32(16).int64(message.iconDiamond);
        }
        if (message.level !== "0") {
          writer.uint32(24).int64(message.level);
        }
        if (message.levelStr !== "") {
          writer.uint32(34).string(message.levelStr);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseGradeIcon();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.icon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.iconDiamond = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.level = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.levelStr = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBorderInfo() {
      return {
        icon: void 0,
        level: "0",
        source: "",
        profileDecorationRibbon: void 0,
        borderLogExtra: void 0,
        ribbonLogExtra: void 0,
        avatarBackgroundColor: "",
        avatarBackgroundBorderColor: ""
      };
    }
    exports.BorderInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.icon !== void 0) {
          exports.Image.encode(message.icon, writer.uint32(10).fork()).join();
        }
        if (message.level !== "0") {
          writer.uint32(16).int64(message.level);
        }
        if (message.source !== "") {
          writer.uint32(26).string(message.source);
        }
        if (message.profileDecorationRibbon !== void 0) {
          exports.Image.encode(message.profileDecorationRibbon, writer.uint32(34).fork()).join();
        }
        if (message.borderLogExtra !== void 0) {
          exports.PrivilegeLogExtra.encode(message.borderLogExtra, writer.uint32(42).fork()).join();
        }
        if (message.ribbonLogExtra !== void 0) {
          exports.PrivilegeLogExtra.encode(message.ribbonLogExtra, writer.uint32(50).fork()).join();
        }
        if (message.avatarBackgroundColor !== "") {
          writer.uint32(58).string(message.avatarBackgroundColor);
        }
        if (message.avatarBackgroundBorderColor !== "") {
          writer.uint32(66).string(message.avatarBackgroundBorderColor);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBorderInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.icon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.level = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.source = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.profileDecorationRibbon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.borderLogExtra = exports.PrivilegeLogExtra.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.ribbonLogExtra = exports.PrivilegeLogExtra.decode(reader, reader.uint32());
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.avatarBackgroundColor = reader.string();
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.avatarBackgroundBorderColor = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseFansClubMember() {
      return { data: void 0, preferData: {} };
    }
    exports.FansClubMember = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.data !== void 0) {
          exports.FansClubData.encode(message.data, writer.uint32(10).fork()).join();
        }
        Object.entries(message.preferData).forEach(([key, value]) => {
          exports.FansClubMember_PreferDataEntry.encode({ key, value }, writer.uint32(18).fork()).join();
        });
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseFansClubMember();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.data = exports.FansClubData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              const entry2 = exports.FansClubMember_PreferDataEntry.decode(reader, reader.uint32());
              if (entry2.value !== void 0) {
                message.preferData[entry2.key] = entry2.value;
              }
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseFansClubMember_PreferDataEntry() {
      return { key: 0, value: void 0 };
    }
    exports.FansClubMember_PreferDataEntry = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== 0) {
          writer.uint32(8).int32(message.key);
        }
        if (message.value !== void 0) {
          exports.FansClubData.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseFansClubMember_PreferDataEntry();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.key = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.value = exports.FansClubData.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseFansClubData() {
      return { clubName: "", level: 0, userFansClubStatus: 0, badge: void 0, availableGiftIds: [], anchorId: "0" };
    }
    exports.FansClubData = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.clubName !== "") {
          writer.uint32(10).string(message.clubName);
        }
        if (message.level !== 0) {
          writer.uint32(16).int32(message.level);
        }
        if (message.userFansClubStatus !== 0) {
          writer.uint32(24).int32(message.userFansClubStatus);
        }
        if (message.badge !== void 0) {
          exports.FansClubData_UserBadge.encode(message.badge, writer.uint32(34).fork()).join();
        }
        writer.uint32(42).fork();
        for (const v of message.availableGiftIds) {
          writer.int64(v);
        }
        writer.join();
        if (message.anchorId !== "0") {
          writer.uint32(48).int64(message.anchorId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseFansClubData();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.clubName = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.level = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.userFansClubStatus = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.badge = exports.FansClubData_UserBadge.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag === 40) {
                message.availableGiftIds.push(reader.int64().toString());
                continue;
              }
              if (tag === 42) {
                const end2 = reader.uint32() + reader.pos;
                while (reader.pos < end2) {
                  message.availableGiftIds.push(reader.int64().toString());
                }
                continue;
              }
              break;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.anchorId = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseFansClubData_UserBadge() {
      return { icons: {}, title: "" };
    }
    exports.FansClubData_UserBadge = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        Object.entries(message.icons).forEach(([key, value]) => {
          exports.FansClubData_UserBadge_IconsEntry.encode({ key, value }, writer.uint32(10).fork()).join();
        });
        if (message.title !== "") {
          writer.uint32(18).string(message.title);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseFansClubData_UserBadge();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              const entry1 = exports.FansClubData_UserBadge_IconsEntry.decode(reader, reader.uint32());
              if (entry1.value !== void 0) {
                message.icons[entry1.key] = entry1.value;
              }
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.title = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseFansClubData_UserBadge_IconsEntry() {
      return { key: 0, value: void 0 };
    }
    exports.FansClubData_UserBadge_IconsEntry = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== 0) {
          writer.uint32(8).int32(message.key);
        }
        if (message.value !== void 0) {
          exports.Image.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseFansClubData_UserBadge_IconsEntry();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.key = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.value = exports.Image.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseAuthor() {
      return { videoTotalCount: "0", videoTotalPlayCount: "0", videoTotalFavoriteCount: "0" };
    }
    exports.Author = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.videoTotalCount !== "0") {
          writer.uint32(8).int64(message.videoTotalCount);
        }
        if (message.videoTotalPlayCount !== "0") {
          writer.uint32(16).int64(message.videoTotalPlayCount);
        }
        if (message.videoTotalFavoriteCount !== "0") {
          writer.uint32(48).int64(message.videoTotalFavoriteCount);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseAuthor();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.videoTotalCount = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.videoTotalPlayCount = reader.int64().toString();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.videoTotalFavoriteCount = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBasePublicAreaCommon() {
      return { userLabel: void 0, userConsumeInRoom: "0" };
    }
    exports.PublicAreaCommon = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userLabel !== void 0) {
          exports.Image.encode(message.userLabel, writer.uint32(10).fork()).join();
        }
        if (message.userConsumeInRoom !== "0") {
          writer.uint32(16).int64(message.userConsumeInRoom);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBasePublicAreaCommon();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.userLabel = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.userConsumeInRoom = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBasePublicAreaMessageCommon() {
      return {
        scrollGapCount: "0",
        anchorScrollGapCount: "0",
        releaseToScrollArea: false,
        anchorReleaseToScrollArea: false,
        isAnchorMarked: false,
        creatorSuccessInfo: void 0,
        portraitInfo: void 0,
        userInteractionInfo: void 0,
        adminFoldType: "0"
      };
    }
    exports.PublicAreaMessageCommon = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.scrollGapCount !== "0") {
          writer.uint32(8).int64(message.scrollGapCount);
        }
        if (message.anchorScrollGapCount !== "0") {
          writer.uint32(16).int64(message.anchorScrollGapCount);
        }
        if (message.releaseToScrollArea !== false) {
          writer.uint32(24).bool(message.releaseToScrollArea);
        }
        if (message.anchorReleaseToScrollArea !== false) {
          writer.uint32(32).bool(message.anchorReleaseToScrollArea);
        }
        if (message.isAnchorMarked !== false) {
          writer.uint32(40).bool(message.isAnchorMarked);
        }
        if (message.creatorSuccessInfo !== void 0) {
          exports.PublicAreaMessageCommon_CreatorSuccessInfo.encode(message.creatorSuccessInfo, writer.uint32(50).fork()).join();
        }
        if (message.portraitInfo !== void 0) {
          exports.PublicAreaMessageCommon_PortraitInfo.encode(message.portraitInfo, writer.uint32(58).fork()).join();
        }
        if (message.userInteractionInfo !== void 0) {
          exports.PublicAreaMessageCommon_UserInteractionInfo.encode(message.userInteractionInfo, writer.uint32(66).fork()).join();
        }
        if (message.adminFoldType !== "0") {
          writer.uint32(72).int64(message.adminFoldType);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBasePublicAreaMessageCommon();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.scrollGapCount = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.anchorScrollGapCount = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.releaseToScrollArea = reader.bool();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.anchorReleaseToScrollArea = reader.bool();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.isAnchorMarked = reader.bool();
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.creatorSuccessInfo = exports.PublicAreaMessageCommon_CreatorSuccessInfo.decode(reader, reader.uint32());
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.portraitInfo = exports.PublicAreaMessageCommon_PortraitInfo.decode(reader, reader.uint32());
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.userInteractionInfo = exports.PublicAreaMessageCommon_UserInteractionInfo.decode(reader, reader.uint32());
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.adminFoldType = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBasePublicAreaMessageCommon_TagItem() {
      return { tagType: 0, tagText: void 0 };
    }
    exports.PublicAreaMessageCommon_TagItem = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.tagType !== 0) {
          writer.uint32(8).int32(message.tagType);
        }
        if (message.tagText !== void 0) {
          exports.Text.encode(message.tagText, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBasePublicAreaMessageCommon_TagItem();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.tagType = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.tagText = exports.Text.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBasePublicAreaMessageCommon_Topic() {
      return { topicActionType: 0, topicText: void 0, topicTips: void 0 };
    }
    exports.PublicAreaMessageCommon_Topic = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicActionType !== 0) {
          writer.uint32(8).int32(message.topicActionType);
        }
        if (message.topicText !== void 0) {
          exports.Text.encode(message.topicText, writer.uint32(18).fork()).join();
        }
        if (message.topicTips !== void 0) {
          exports.Text.encode(message.topicTips, writer.uint32(26).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBasePublicAreaMessageCommon_Topic();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.topicActionType = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.topicText = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.topicTips = exports.Text.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBasePublicAreaMessageCommon_CreatorSuccessInfo() {
      return { tags: [], topic: void 0 };
    }
    exports.PublicAreaMessageCommon_CreatorSuccessInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.tags) {
          exports.PublicAreaMessageCommon_TagItem.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.topic !== void 0) {
          exports.PublicAreaMessageCommon_Topic.encode(message.topic, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBasePublicAreaMessageCommon_CreatorSuccessInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.tags.push(exports.PublicAreaMessageCommon_TagItem.decode(reader, reader.uint32()));
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.topic = exports.PublicAreaMessageCommon_Topic.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBasePublicAreaMessageCommon_UserMetrics() {
      return { type: 0, metricsValue: "" };
    }
    exports.PublicAreaMessageCommon_UserMetrics = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== 0) {
          writer.uint32(8).int32(message.type);
        }
        if (message.metricsValue !== "") {
          writer.uint32(18).string(message.metricsValue);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBasePublicAreaMessageCommon_UserMetrics();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.type = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.metricsValue = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBasePublicAreaMessageCommon_PortraitTag() {
      return { tagId: "", priority: "0", showValue: "", showArgs: "" };
    }
    exports.PublicAreaMessageCommon_PortraitTag = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.tagId !== "") {
          writer.uint32(10).string(message.tagId);
        }
        if (message.priority !== "0") {
          writer.uint32(16).int64(message.priority);
        }
        if (message.showValue !== "") {
          writer.uint32(26).string(message.showValue);
        }
        if (message.showArgs !== "") {
          writer.uint32(34).string(message.showArgs);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBasePublicAreaMessageCommon_PortraitTag();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.tagId = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.priority = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.showValue = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.showArgs = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBasePublicAreaMessageCommon_PortraitInfo() {
      return { userMetrics: [], portraitTag: [] };
    }
    exports.PublicAreaMessageCommon_PortraitInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.userMetrics) {
          exports.PublicAreaMessageCommon_UserMetrics.encode(v, writer.uint32(10).fork()).join();
        }
        for (const v of message.portraitTag) {
          exports.PublicAreaMessageCommon_PortraitTag.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBasePublicAreaMessageCommon_PortraitInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.userMetrics.push(exports.PublicAreaMessageCommon_UserMetrics.decode(reader, reader.uint32()));
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.portraitTag.push(exports.PublicAreaMessageCommon_PortraitTag.decode(reader, reader.uint32()));
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBasePublicAreaMessageCommon_UserInteractionInfo() {
      return { likeCnt: "0", commentCnt: "0", shareCnt: "0" };
    }
    exports.PublicAreaMessageCommon_UserInteractionInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.likeCnt !== "0") {
          writer.uint32(8).int64(message.likeCnt);
        }
        if (message.commentCnt !== "0") {
          writer.uint32(16).int64(message.commentCnt);
        }
        if (message.shareCnt !== "0") {
          writer.uint32(24).int64(message.shareCnt);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBasePublicAreaMessageCommon_UserInteractionInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.likeCnt = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.commentCnt = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.shareCnt = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseGiftModeMeta() {
      return { giftId: "0", giftNameKey: "", giftIconImage: void 0, giftModeDesc: void 0 };
    }
    exports.GiftModeMeta = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.giftId !== "0") {
          writer.uint32(8).int64(message.giftId);
        }
        if (message.giftNameKey !== "") {
          writer.uint32(18).string(message.giftNameKey);
        }
        if (message.giftIconImage !== void 0) {
          exports.Image.encode(message.giftIconImage, writer.uint32(26).fork()).join();
        }
        if (message.giftModeDesc !== void 0) {
          exports.Text.encode(message.giftModeDesc, writer.uint32(34).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseGiftModeMeta();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.giftId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.giftNameKey = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.giftIconImage = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.giftModeDesc = exports.Text.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBattleTeamUser() {
      return { userId: "0", score: "0", userIdStr: "" };
    }
    exports.BattleTeamUser = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
          writer.uint32(8).int64(message.userId);
        }
        if (message.score !== "0") {
          writer.uint32(16).int64(message.score);
        }
        if (message.userIdStr !== "") {
          writer.uint32(26).string(message.userIdStr);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBattleTeamUser();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.userId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.score = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.userIdStr = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBattleSetting() {
      return {
        battleId: "0",
        startTimeMs: "0",
        duration: 0,
        channelId: "0",
        status: 0,
        inviteType: 0,
        giftModeMeta: void 0,
        battleType: 0,
        extraDurationSecond: "0",
        endTimeMs: "0"
      };
    }
    exports.BattleSetting = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.battleId !== "0") {
          writer.uint32(8).int64(message.battleId);
        }
        if (message.startTimeMs !== "0") {
          writer.uint32(16).int64(message.startTimeMs);
        }
        if (message.duration !== 0) {
          writer.uint32(24).int32(message.duration);
        }
        if (message.channelId !== "0") {
          writer.uint32(32).int64(message.channelId);
        }
        if (message.status !== 0) {
          writer.uint32(40).int32(message.status);
        }
        if (message.inviteType !== 0) {
          writer.uint32(48).int32(message.inviteType);
        }
        if (message.giftModeMeta !== void 0) {
          exports.GiftModeMeta.encode(message.giftModeMeta, writer.uint32(58).fork()).join();
        }
        if (message.battleType !== 0) {
          writer.uint32(64).int32(message.battleType);
        }
        if (message.extraDurationSecond !== "0") {
          writer.uint32(72).int64(message.extraDurationSecond);
        }
        if (message.endTimeMs !== "0") {
          writer.uint32(80).int64(message.endTimeMs);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBattleSetting();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.battleId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.startTimeMs = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.duration = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.channelId = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.status = reader.int32();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.inviteType = reader.int32();
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.giftModeMeta = exports.GiftModeMeta.decode(reader, reader.uint32());
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.battleType = reader.int32();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.extraDurationSecond = reader.int64().toString();
              continue;
            }
            case 10: {
              if (tag !== 80) {
                break;
              }
              message.endTimeMs = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBattleTeamUserArmies() {
      return { teamId: "0", teamUsers: [], teamTotalScore: "0", userArmies: void 0, hostRank: "0" };
    }
    exports.BattleTeamUserArmies = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.teamId !== "0") {
          writer.uint32(8).int64(message.teamId);
        }
        for (const v of message.teamUsers) {
          exports.BattleTeamUser.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.teamTotalScore !== "0") {
          writer.uint32(24).int64(message.teamTotalScore);
        }
        if (message.userArmies !== void 0) {
          exports.BattleUserArmies.encode(message.userArmies, writer.uint32(34).fork()).join();
        }
        if (message.hostRank !== "0") {
          writer.uint32(40).int64(message.hostRank);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBattleTeamUserArmies();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.teamId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.teamUsers.push(exports.BattleTeamUser.decode(reader, reader.uint32()));
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.teamTotalScore = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.userArmies = exports.BattleUserArmies.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.hostRank = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBattleUserArmies() {
      return { userArmy: [], hostScore: "0", anchorIdStr: "" };
    }
    exports.BattleUserArmies = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.userArmy) {
          exports.BattleUserArmy.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.hostScore !== "0") {
          writer.uint32(16).int64(message.hostScore);
        }
        if (message.anchorIdStr !== "") {
          writer.uint32(26).string(message.anchorIdStr);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBattleUserArmies();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.userArmy.push(exports.BattleUserArmy.decode(reader, reader.uint32()));
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.hostScore = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.anchorIdStr = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBattleUserArmy() {
      return { userId: "0", score: "0", nickname: "", avatarThumb: void 0, diamondScore: "0", userIdStr: "" };
    }
    exports.BattleUserArmy = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
          writer.uint32(8).int64(message.userId);
        }
        if (message.score !== "0") {
          writer.uint32(16).int64(message.score);
        }
        if (message.nickname !== "") {
          writer.uint32(26).string(message.nickname);
        }
        if (message.avatarThumb !== void 0) {
          exports.Image.encode(message.avatarThumb, writer.uint32(34).fork()).join();
        }
        if (message.diamondScore !== "0") {
          writer.uint32(40).int64(message.diamondScore);
        }
        if (message.userIdStr !== "") {
          writer.uint32(50).string(message.userIdStr);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBattleUserArmy();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.userId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.score = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.nickname = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.avatarThumb = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.diamondScore = reader.int64().toString();
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.userIdStr = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseHighScoreControlCfg() {
      return { normalControlApplied: false, threshold: "0", originDisplayToUserList: [] };
    }
    exports.HighScoreControlCfg = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.normalControlApplied !== false) {
          writer.uint32(8).bool(message.normalControlApplied);
        }
        if (message.threshold !== "0") {
          writer.uint32(16).int64(message.threshold);
        }
        writer.uint32(26).fork();
        for (const v of message.originDisplayToUserList) {
          writer.int64(v);
        }
        writer.join();
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseHighScoreControlCfg();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.normalControlApplied = reader.bool();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.threshold = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag === 24) {
                message.originDisplayToUserList.push(reader.int64().toString());
                continue;
              }
              if (tag === 26) {
                const end2 = reader.uint32() + reader.pos;
                while (reader.pos < end2) {
                  message.originDisplayToUserList.push(reader.int64().toString());
                }
                continue;
              }
              break;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseHeartbeatMessage() {
      return { roomId: "0" };
    }
    exports.HeartbeatMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.roomId !== "0") {
          writer.uint32(8).uint64(message.roomId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseHeartbeatMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.roomId = reader.uint64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastPushFrame() {
      return {
        seqId: "0",
        logId: "0",
        service: "0",
        method: "0",
        headers: {},
        payloadEncoding: "",
        payloadType: "",
        payload: new Uint8Array(0)
      };
    }
    exports.WebcastPushFrame = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.seqId !== "0") {
          writer.uint32(8).int64(message.seqId);
        }
        if (message.logId !== "0") {
          writer.uint32(16).int64(message.logId);
        }
        if (message.service !== "0") {
          writer.uint32(24).int64(message.service);
        }
        if (message.method !== "0") {
          writer.uint32(32).int64(message.method);
        }
        Object.entries(message.headers).forEach(([key, value]) => {
          exports.WebcastPushFrame_HeadersEntry.encode({ key, value }, writer.uint32(42).fork()).join();
        });
        if (message.payloadEncoding !== "") {
          writer.uint32(50).string(message.payloadEncoding);
        }
        if (message.payloadType !== "") {
          writer.uint32(58).string(message.payloadType);
        }
        if (message.payload.length !== 0) {
          writer.uint32(66).bytes(message.payload);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastPushFrame();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.seqId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.logId = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.service = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.method = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              const entry5 = exports.WebcastPushFrame_HeadersEntry.decode(reader, reader.uint32());
              if (entry5.value !== void 0) {
                message.headers[entry5.key] = entry5.value;
              }
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.payloadEncoding = reader.string();
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.payloadType = reader.string();
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.payload = reader.bytes();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastPushFrame_HeadersEntry() {
      return { key: "", value: "" };
    }
    exports.WebcastPushFrame_HeadersEntry = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
          writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
          writer.uint32(18).string(message.value);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastPushFrame_HeadersEntry();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.key = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.value = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseMessage() {
      return { type: "", binary: new Uint8Array(0) };
    }
    exports.Message = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== "") {
          writer.uint32(10).string(message.type);
        }
        if (message.binary.length !== 0) {
          writer.uint32(18).bytes(message.binary);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.type = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.binary = reader.bytes();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebsocketParam() {
      return { name: "", value: "" };
    }
    exports.WebsocketParam = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
          writer.uint32(10).string(message.name);
        }
        if (message.value !== "") {
          writer.uint32(18).string(message.value);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebsocketParam();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.name = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.value = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastRoomUserSeqMessage() {
      return {
        common: void 0,
        viewerCount: 0,
        ranksList: [],
        popStr: "",
        seatsList: [],
        popularity: "0",
        totalUser: 0,
        anonymous: "0"
      };
    }
    exports.WebcastRoomUserSeqMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.viewerCount !== 0) {
          writer.uint32(24).int32(message.viewerCount);
        }
        for (const v of message.ranksList) {
          exports.WebcastRoomUserSeqMessage_Contributor.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.popStr !== "") {
          writer.uint32(34).string(message.popStr);
        }
        for (const v of message.seatsList) {
          exports.WebcastRoomUserSeqMessage_Contributor.encode(v, writer.uint32(42).fork()).join();
        }
        if (message.popularity !== "0") {
          writer.uint32(48).int64(message.popularity);
        }
        if (message.totalUser !== 0) {
          writer.uint32(56).int32(message.totalUser);
        }
        if (message.anonymous !== "0") {
          writer.uint32(64).int64(message.anonymous);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastRoomUserSeqMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.viewerCount = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.ranksList.push(exports.WebcastRoomUserSeqMessage_Contributor.decode(reader, reader.uint32()));
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.popStr = reader.string();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.seatsList.push(exports.WebcastRoomUserSeqMessage_Contributor.decode(reader, reader.uint32()));
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.popularity = reader.int64().toString();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.totalUser = reader.int32();
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.anonymous = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastRoomUserSeqMessage_Contributor() {
      return { coinCount: 0, user: void 0, rank: 0, delta: "0" };
    }
    exports.WebcastRoomUserSeqMessage_Contributor = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.coinCount !== 0) {
          writer.uint32(8).int32(message.coinCount);
        }
        if (message.user !== void 0) {
          exports.User.encode(message.user, writer.uint32(18).fork()).join();
        }
        if (message.rank !== 0) {
          writer.uint32(24).int32(message.rank);
        }
        if (message.delta !== "0") {
          writer.uint32(32).int64(message.delta);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastRoomUserSeqMessage_Contributor();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.coinCount = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.user = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.rank = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.delta = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseImageModel() {
      return {
        mUrls: [],
        mUri: "",
        height: 0,
        width: 0,
        avgColor: "",
        imageType: 0,
        schema: "",
        content: void 0,
        isAnimated: false
      };
    }
    exports.ImageModel = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.mUrls) {
          writer.uint32(10).string(v);
        }
        if (message.mUri !== "") {
          writer.uint32(18).string(message.mUri);
        }
        if (message.height !== 0) {
          writer.uint32(24).int32(message.height);
        }
        if (message.width !== 0) {
          writer.uint32(32).int32(message.width);
        }
        if (message.avgColor !== "") {
          writer.uint32(42).string(message.avgColor);
        }
        if (message.imageType !== 0) {
          writer.uint32(48).int32(message.imageType);
        }
        if (message.schema !== "") {
          writer.uint32(58).string(message.schema);
        }
        if (message.content !== void 0) {
          exports.ImageModel_Content.encode(message.content, writer.uint32(66).fork()).join();
        }
        if (message.isAnimated !== false) {
          writer.uint32(72).bool(message.isAnimated);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseImageModel();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.mUrls.push(reader.string());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.mUri = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.height = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.width = reader.int32();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.avgColor = reader.string();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.imageType = reader.int32();
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.schema = reader.string();
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.content = exports.ImageModel_Content.decode(reader, reader.uint32());
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.isAnimated = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseImageModel_Content() {
      return { name: "", fontColor: "", level: "0" };
    }
    exports.ImageModel_Content = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
          writer.uint32(10).string(message.name);
        }
        if (message.fontColor !== "") {
          writer.uint32(18).string(message.fontColor);
        }
        if (message.level !== "0") {
          writer.uint32(24).int64(message.level);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseImageModel_Content();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.name = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.fontColor = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.level = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastChatMessage() {
      return {
        common: void 0,
        user: void 0,
        comment: "",
        visibleToSender: false,
        background: void 0,
        fullScreenTextColor: "",
        backgroundImageV2: void 0,
        publicAreaCommon: void 0,
        giftImage: void 0,
        inputType: 0,
        atUser: void 0,
        emotes: [],
        contentLanguage: "",
        msgFilter: void 0,
        quickChatScene: 0,
        communityflaggedStatus: 0,
        commentQualityScores: [],
        userIdentity: void 0,
        commentTag: [],
        publicAreaMessageCommon: void 0,
        screenTime: "0",
        signature: "",
        signatureVersion: "",
        ecStreamerKey: ""
      };
    }
    exports.WebcastChatMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.user !== void 0) {
          exports.User.encode(message.user, writer.uint32(18).fork()).join();
        }
        if (message.comment !== "") {
          writer.uint32(26).string(message.comment);
        }
        if (message.visibleToSender !== false) {
          writer.uint32(32).bool(message.visibleToSender);
        }
        if (message.background !== void 0) {
          exports.ImageModel.encode(message.background, writer.uint32(42).fork()).join();
        }
        if (message.fullScreenTextColor !== "") {
          writer.uint32(50).string(message.fullScreenTextColor);
        }
        if (message.backgroundImageV2 !== void 0) {
          exports.ImageModel.encode(message.backgroundImageV2, writer.uint32(58).fork()).join();
        }
        if (message.publicAreaCommon !== void 0) {
          exports.PublicAreaCommon.encode(message.publicAreaCommon, writer.uint32(74).fork()).join();
        }
        if (message.giftImage !== void 0) {
          exports.ImageModel.encode(message.giftImage, writer.uint32(82).fork()).join();
        }
        if (message.inputType !== 0) {
          writer.uint32(88).int32(message.inputType);
        }
        if (message.atUser !== void 0) {
          exports.User.encode(message.atUser, writer.uint32(98).fork()).join();
        }
        for (const v of message.emotes) {
          exports.WebcastSubEmote.encode(v, writer.uint32(106).fork()).join();
        }
        if (message.contentLanguage !== "") {
          writer.uint32(114).string(message.contentLanguage);
        }
        if (message.msgFilter !== void 0) {
          exports.MsgFilter.encode(message.msgFilter, writer.uint32(122).fork()).join();
        }
        if (message.quickChatScene !== 0) {
          writer.uint32(128).int32(message.quickChatScene);
        }
        if (message.communityflaggedStatus !== 0) {
          writer.uint32(136).int32(message.communityflaggedStatus);
        }
        for (const v of message.commentQualityScores) {
          exports.WebcastChatMessage_CommentQualityScore.encode(v, writer.uint32(154).fork()).join();
        }
        if (message.userIdentity !== void 0) {
          exports.WebcastChatMessage_UserIdentity.encode(message.userIdentity, writer.uint32(146).fork()).join();
        }
        writer.uint32(162).fork();
        for (const v of message.commentTag) {
          writer.int32(v);
        }
        writer.join();
        if (message.publicAreaMessageCommon !== void 0) {
          exports.PublicAreaMessageCommon.encode(message.publicAreaMessageCommon, writer.uint32(170).fork()).join();
        }
        if (message.screenTime !== "0") {
          writer.uint32(176).int64(message.screenTime);
        }
        if (message.signature !== "") {
          writer.uint32(186).string(message.signature);
        }
        if (message.signatureVersion !== "") {
          writer.uint32(194).string(message.signatureVersion);
        }
        if (message.ecStreamerKey !== "") {
          writer.uint32(202).string(message.ecStreamerKey);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastChatMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.user = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.comment = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.visibleToSender = reader.bool();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.background = exports.ImageModel.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.fullScreenTextColor = reader.string();
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.backgroundImageV2 = exports.ImageModel.decode(reader, reader.uint32());
              continue;
            }
            case 9: {
              if (tag !== 74) {
                break;
              }
              message.publicAreaCommon = exports.PublicAreaCommon.decode(reader, reader.uint32());
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              message.giftImage = exports.ImageModel.decode(reader, reader.uint32());
              continue;
            }
            case 11: {
              if (tag !== 88) {
                break;
              }
              message.inputType = reader.int32();
              continue;
            }
            case 12: {
              if (tag !== 98) {
                break;
              }
              message.atUser = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 13: {
              if (tag !== 106) {
                break;
              }
              message.emotes.push(exports.WebcastSubEmote.decode(reader, reader.uint32()));
              continue;
            }
            case 14: {
              if (tag !== 114) {
                break;
              }
              message.contentLanguage = reader.string();
              continue;
            }
            case 15: {
              if (tag !== 122) {
                break;
              }
              message.msgFilter = exports.MsgFilter.decode(reader, reader.uint32());
              continue;
            }
            case 16: {
              if (tag !== 128) {
                break;
              }
              message.quickChatScene = reader.int32();
              continue;
            }
            case 17: {
              if (tag !== 136) {
                break;
              }
              message.communityflaggedStatus = reader.int32();
              continue;
            }
            case 19: {
              if (tag !== 154) {
                break;
              }
              message.commentQualityScores.push(exports.WebcastChatMessage_CommentQualityScore.decode(reader, reader.uint32()));
              continue;
            }
            case 18: {
              if (tag !== 146) {
                break;
              }
              message.userIdentity = exports.WebcastChatMessage_UserIdentity.decode(reader, reader.uint32());
              continue;
            }
            case 20: {
              if (tag === 160) {
                message.commentTag.push(reader.int32());
                continue;
              }
              if (tag === 162) {
                const end2 = reader.uint32() + reader.pos;
                while (reader.pos < end2) {
                  message.commentTag.push(reader.int32());
                }
                continue;
              }
              break;
            }
            case 21: {
              if (tag !== 170) {
                break;
              }
              message.publicAreaMessageCommon = exports.PublicAreaMessageCommon.decode(reader, reader.uint32());
              continue;
            }
            case 22: {
              if (tag !== 176) {
                break;
              }
              message.screenTime = reader.int64().toString();
              continue;
            }
            case 23: {
              if (tag !== 186) {
                break;
              }
              message.signature = reader.string();
              continue;
            }
            case 24: {
              if (tag !== 194) {
                break;
              }
              message.signatureVersion = reader.string();
              continue;
            }
            case 25: {
              if (tag !== 202) {
                break;
              }
              message.ecStreamerKey = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastChatMessage_UserIdentity() {
      return {
        isGiftGiverOfAnchor: false,
        isSubscriberOfAnchor: false,
        isMutualFollowingWithAnchor: false,
        isFollowerOfAnchor: false,
        isModeratorOfAnchor: false,
        isAnchor: false
      };
    }
    exports.WebcastChatMessage_UserIdentity = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isGiftGiverOfAnchor !== false) {
          writer.uint32(8).bool(message.isGiftGiverOfAnchor);
        }
        if (message.isSubscriberOfAnchor !== false) {
          writer.uint32(16).bool(message.isSubscriberOfAnchor);
        }
        if (message.isMutualFollowingWithAnchor !== false) {
          writer.uint32(24).bool(message.isMutualFollowingWithAnchor);
        }
        if (message.isFollowerOfAnchor !== false) {
          writer.uint32(32).bool(message.isFollowerOfAnchor);
        }
        if (message.isModeratorOfAnchor !== false) {
          writer.uint32(40).bool(message.isModeratorOfAnchor);
        }
        if (message.isAnchor !== false) {
          writer.uint32(48).bool(message.isAnchor);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastChatMessage_UserIdentity();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.isGiftGiverOfAnchor = reader.bool();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.isSubscriberOfAnchor = reader.bool();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.isMutualFollowingWithAnchor = reader.bool();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.isFollowerOfAnchor = reader.bool();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.isModeratorOfAnchor = reader.bool();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.isAnchor = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastChatMessage_CommentQualityScore() {
      return { version: "", score: "0" };
    }
    exports.WebcastChatMessage_CommentQualityScore = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.version !== "") {
          writer.uint32(10).string(message.version);
        }
        if (message.score !== "0") {
          writer.uint32(16).int64(message.score);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastChatMessage_CommentQualityScore();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.version = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.score = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseEmoteUploadInfo() {
      return { userId: "0", emoteUploadSource: void 0, userInfo: void 0, userIdStr: "" };
    }
    exports.EmoteUploadInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
          writer.uint32(8).int64(message.userId);
        }
        if (message.emoteUploadSource !== void 0) {
          writer.uint32(16).int32(message.emoteUploadSource);
        }
        if (message.userInfo !== void 0) {
          exports.User.encode(message.userInfo, writer.uint32(26).fork()).join();
        }
        if (message.userIdStr !== "") {
          writer.uint32(34).string(message.userIdStr);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseEmoteUploadInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.userId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.emoteUploadSource = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.userInfo = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.userIdStr = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastEmoteChatMessage() {
      return { common: void 0, user: void 0, emoteList: [], msgFilter: void 0, userIdentity: void 0 };
    }
    exports.WebcastEmoteChatMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.user !== void 0) {
          exports.User.encode(message.user, writer.uint32(18).fork()).join();
        }
        for (const v of message.emoteList) {
          exports.Emote.encode(v, writer.uint32(26).fork()).join();
        }
        if (message.msgFilter !== void 0) {
          exports.MsgFilter.encode(message.msgFilter, writer.uint32(34).fork()).join();
        }
        if (message.userIdentity !== void 0) {
          exports.UserIdentity.encode(message.userIdentity, writer.uint32(42).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastEmoteChatMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.user = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.emoteList.push(exports.Emote.decode(reader, reader.uint32()));
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.msgFilter = exports.MsgFilter.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.userIdentity = exports.UserIdentity.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastSubEmote() {
      return { placeInComment: 0, emote: void 0 };
    }
    exports.WebcastSubEmote = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.placeInComment !== 0) {
          writer.uint32(8).int32(message.placeInComment);
        }
        if (message.emote !== void 0) {
          exports.EmoteDetails.encode(message.emote, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastSubEmote();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.placeInComment = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.emote = exports.EmoteDetails.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastMemberMessage() {
      return {
        common: void 0,
        user: void 0,
        action: 0,
        memberCount: 0,
        operator: void 0,
        isSetToAdmin: false,
        isTopUser: false,
        rankScore: "0",
        topUserNo: "0",
        enterType: "0",
        actionDescription: "",
        userId: "0",
        effectConfig: void 0,
        popStr: "",
        enterEffectConfig: void 0,
        backgroundImage: void 0,
        backgroundImageV2: void 0,
        anchorDisplayText: void 0,
        clientEnterSource: "",
        clientEnterType: "",
        clientLiveReason: "",
        actionDuration: "0",
        userShareType: "",
        displayStyle: 0,
        adminPermissions: {},
        kickSource: 0,
        allowPreviewTime: "0",
        lastSubscriptionAction: "0",
        publicAreaMessageCommon: void 0,
        liveSubOnlyTier: "0",
        liveSubOnlyMonth: "0",
        ecStreamerKey: "",
        showWave: "0",
        waveAlgorithmData: void 0,
        hitAbStatus: 0
      };
    }
    exports.WebcastMemberMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.user !== void 0) {
          exports.User.encode(message.user, writer.uint32(18).fork()).join();
        }
        if (message.action !== 0) {
          writer.uint32(80).int32(message.action);
        }
        if (message.memberCount !== 0) {
          writer.uint32(24).int32(message.memberCount);
        }
        if (message.operator !== void 0) {
          exports.User.encode(message.operator, writer.uint32(34).fork()).join();
        }
        if (message.isSetToAdmin !== false) {
          writer.uint32(40).bool(message.isSetToAdmin);
        }
        if (message.isTopUser !== false) {
          writer.uint32(48).bool(message.isTopUser);
        }
        if (message.rankScore !== "0") {
          writer.uint32(56).int64(message.rankScore);
        }
        if (message.topUserNo !== "0") {
          writer.uint32(64).int64(message.topUserNo);
        }
        if (message.enterType !== "0") {
          writer.uint32(72).int64(message.enterType);
        }
        if (message.actionDescription !== "") {
          writer.uint32(90).string(message.actionDescription);
        }
        if (message.userId !== "0") {
          writer.uint32(96).int64(message.userId);
        }
        if (message.effectConfig !== void 0) {
          exports.WebcastMemberMessage_EffectConfig.encode(message.effectConfig, writer.uint32(106).fork()).join();
        }
        if (message.popStr !== "") {
          writer.uint32(114).string(message.popStr);
        }
        if (message.enterEffectConfig !== void 0) {
          exports.WebcastMemberMessage_EffectConfig.encode(message.enterEffectConfig, writer.uint32(122).fork()).join();
        }
        if (message.backgroundImage !== void 0) {
          exports.Image.encode(message.backgroundImage, writer.uint32(130).fork()).join();
        }
        if (message.backgroundImageV2 !== void 0) {
          exports.Image.encode(message.backgroundImageV2, writer.uint32(138).fork()).join();
        }
        if (message.anchorDisplayText !== void 0) {
          exports.Text.encode(message.anchorDisplayText, writer.uint32(146).fork()).join();
        }
        if (message.clientEnterSource !== "") {
          writer.uint32(154).string(message.clientEnterSource);
        }
        if (message.clientEnterType !== "") {
          writer.uint32(162).string(message.clientEnterType);
        }
        if (message.clientLiveReason !== "") {
          writer.uint32(170).string(message.clientLiveReason);
        }
        if (message.actionDuration !== "0") {
          writer.uint32(176).int64(message.actionDuration);
        }
        if (message.userShareType !== "") {
          writer.uint32(186).string(message.userShareType);
        }
        if (message.displayStyle !== 0) {
          writer.uint32(192).int32(message.displayStyle);
        }
        Object.entries(message.adminPermissions).forEach(([key, value]) => {
          exports.WebcastMemberMessage_AdminPermissionsEntry.encode({ key, value }, writer.uint32(202).fork()).join();
        });
        if (message.kickSource !== 0) {
          writer.uint32(208).int32(message.kickSource);
        }
        if (message.allowPreviewTime !== "0") {
          writer.uint32(216).int64(message.allowPreviewTime);
        }
        if (message.lastSubscriptionAction !== "0") {
          writer.uint32(224).int64(message.lastSubscriptionAction);
        }
        if (message.publicAreaMessageCommon !== void 0) {
          exports.PublicAreaMessageCommon.encode(message.publicAreaMessageCommon, writer.uint32(234).fork()).join();
        }
        if (message.liveSubOnlyTier !== "0") {
          writer.uint32(240).int64(message.liveSubOnlyTier);
        }
        if (message.liveSubOnlyMonth !== "0") {
          writer.uint32(248).int64(message.liveSubOnlyMonth);
        }
        if (message.ecStreamerKey !== "") {
          writer.uint32(258).string(message.ecStreamerKey);
        }
        if (message.showWave !== "0") {
          writer.uint32(264).int64(message.showWave);
        }
        if (message.waveAlgorithmData !== void 0) {
          exports.WebcastMemberMessage_WaveAlgorithmData.encode(message.waveAlgorithmData, writer.uint32(274).fork()).join();
        }
        if (message.hitAbStatus !== 0) {
          writer.uint32(280).int32(message.hitAbStatus);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastMemberMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.user = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 10: {
              if (tag !== 80) {
                break;
              }
              message.action = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.memberCount = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.operator = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.isSetToAdmin = reader.bool();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.isTopUser = reader.bool();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.rankScore = reader.int64().toString();
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.topUserNo = reader.int64().toString();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.enterType = reader.int64().toString();
              continue;
            }
            case 11: {
              if (tag !== 90) {
                break;
              }
              message.actionDescription = reader.string();
              continue;
            }
            case 12: {
              if (tag !== 96) {
                break;
              }
              message.userId = reader.int64().toString();
              continue;
            }
            case 13: {
              if (tag !== 106) {
                break;
              }
              message.effectConfig = exports.WebcastMemberMessage_EffectConfig.decode(reader, reader.uint32());
              continue;
            }
            case 14: {
              if (tag !== 114) {
                break;
              }
              message.popStr = reader.string();
              continue;
            }
            case 15: {
              if (tag !== 122) {
                break;
              }
              message.enterEffectConfig = exports.WebcastMemberMessage_EffectConfig.decode(reader, reader.uint32());
              continue;
            }
            case 16: {
              if (tag !== 130) {
                break;
              }
              message.backgroundImage = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 17: {
              if (tag !== 138) {
                break;
              }
              message.backgroundImageV2 = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 18: {
              if (tag !== 146) {
                break;
              }
              message.anchorDisplayText = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 19: {
              if (tag !== 154) {
                break;
              }
              message.clientEnterSource = reader.string();
              continue;
            }
            case 20: {
              if (tag !== 162) {
                break;
              }
              message.clientEnterType = reader.string();
              continue;
            }
            case 21: {
              if (tag !== 170) {
                break;
              }
              message.clientLiveReason = reader.string();
              continue;
            }
            case 22: {
              if (tag !== 176) {
                break;
              }
              message.actionDuration = reader.int64().toString();
              continue;
            }
            case 23: {
              if (tag !== 186) {
                break;
              }
              message.userShareType = reader.string();
              continue;
            }
            case 24: {
              if (tag !== 192) {
                break;
              }
              message.displayStyle = reader.int32();
              continue;
            }
            case 25: {
              if (tag !== 202) {
                break;
              }
              const entry25 = exports.WebcastMemberMessage_AdminPermissionsEntry.decode(reader, reader.uint32());
              if (entry25.value !== void 0) {
                message.adminPermissions[entry25.key] = entry25.value;
              }
              continue;
            }
            case 26: {
              if (tag !== 208) {
                break;
              }
              message.kickSource = reader.int32();
              continue;
            }
            case 27: {
              if (tag !== 216) {
                break;
              }
              message.allowPreviewTime = reader.int64().toString();
              continue;
            }
            case 28: {
              if (tag !== 224) {
                break;
              }
              message.lastSubscriptionAction = reader.int64().toString();
              continue;
            }
            case 29: {
              if (tag !== 234) {
                break;
              }
              message.publicAreaMessageCommon = exports.PublicAreaMessageCommon.decode(reader, reader.uint32());
              continue;
            }
            case 30: {
              if (tag !== 240) {
                break;
              }
              message.liveSubOnlyTier = reader.int64().toString();
              continue;
            }
            case 31: {
              if (tag !== 248) {
                break;
              }
              message.liveSubOnlyMonth = reader.int64().toString();
              continue;
            }
            case 32: {
              if (tag !== 258) {
                break;
              }
              message.ecStreamerKey = reader.string();
              continue;
            }
            case 33: {
              if (tag !== 264) {
                break;
              }
              message.showWave = reader.int64().toString();
              continue;
            }
            case 34: {
              if (tag !== 274) {
                break;
              }
              message.waveAlgorithmData = exports.WebcastMemberMessage_WaveAlgorithmData.decode(reader, reader.uint32());
              continue;
            }
            case 35: {
              if (tag !== 280) {
                break;
              }
              message.hitAbStatus = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastMemberMessage_AdminPermissionsEntry() {
      return { key: 0, value: 0 };
    }
    exports.WebcastMemberMessage_AdminPermissionsEntry = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== 0) {
          writer.uint32(8).int32(message.key);
        }
        if (message.value !== 0) {
          writer.uint32(16).int32(message.value);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastMemberMessage_AdminPermissionsEntry();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.key = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.value = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastMemberMessage_EffectConfig() {
      return {
        type: "0",
        icon: void 0,
        avatarPos: "0",
        text: void 0,
        textIcon: void 0,
        stayTime: 0,
        animAssetId: "0",
        badge: void 0,
        flexSettingArrayList: []
      };
    }
    exports.WebcastMemberMessage_EffectConfig = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== "0") {
          writer.uint32(8).int64(message.type);
        }
        if (message.icon !== void 0) {
          exports.Image.encode(message.icon, writer.uint32(18).fork()).join();
        }
        if (message.avatarPos !== "0") {
          writer.uint32(24).int64(message.avatarPos);
        }
        if (message.text !== void 0) {
          exports.Text.encode(message.text, writer.uint32(34).fork()).join();
        }
        if (message.textIcon !== void 0) {
          exports.Image.encode(message.textIcon, writer.uint32(42).fork()).join();
        }
        if (message.stayTime !== 0) {
          writer.uint32(48).int32(message.stayTime);
        }
        if (message.animAssetId !== "0") {
          writer.uint32(56).int64(message.animAssetId);
        }
        if (message.badge !== void 0) {
          exports.Image.encode(message.badge, writer.uint32(66).fork()).join();
        }
        writer.uint32(74).fork();
        for (const v of message.flexSettingArrayList) {
          writer.int64(v);
        }
        writer.join();
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastMemberMessage_EffectConfig();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.type = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.icon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.avatarPos = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.text = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.textIcon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.stayTime = reader.int32();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.animAssetId = reader.int64().toString();
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.badge = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 9: {
              if (tag === 72) {
                message.flexSettingArrayList.push(reader.int64().toString());
                continue;
              }
              if (tag === 74) {
                const end2 = reader.uint32() + reader.pos;
                while (reader.pos < end2) {
                  message.flexSettingArrayList.push(reader.int64().toString());
                }
                continue;
              }
              break;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastMemberMessage_WaveAlgorithmData() {
      return { algorithmVersion: "", isAlgHit: false, predictScore: "", isRewatch: false, isFollow: false };
    }
    exports.WebcastMemberMessage_WaveAlgorithmData = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.algorithmVersion !== "") {
          writer.uint32(10).string(message.algorithmVersion);
        }
        if (message.isAlgHit !== false) {
          writer.uint32(16).bool(message.isAlgHit);
        }
        if (message.predictScore !== "") {
          writer.uint32(26).string(message.predictScore);
        }
        if (message.isRewatch !== false) {
          writer.uint32(32).bool(message.isRewatch);
        }
        if (message.isFollow !== false) {
          writer.uint32(40).bool(message.isFollow);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastMemberMessage_WaveAlgorithmData();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.algorithmVersion = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.isAlgHit = reader.bool();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.predictScore = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.isRewatch = reader.bool();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.isFollow = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastMemberMessage_EffectConfigBean() {
      return { type: 0, icon: void 0, textKey: void 0, badge: void 0 };
    }
    exports.WebcastMemberMessage_EffectConfigBean = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== 0) {
          writer.uint32(8).int32(message.type);
        }
        if (message.icon !== void 0) {
          exports.ImageModel.encode(message.icon, writer.uint32(18).fork()).join();
        }
        if (message.textKey !== void 0) {
          exports.Text.encode(message.textKey, writer.uint32(34).fork()).join();
        }
        if (message.badge !== void 0) {
          exports.ImageModel.encode(message.badge, writer.uint32(66).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastMemberMessage_EffectConfigBean();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.type = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.icon = exports.ImageModel.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.textKey = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.badge = exports.ImageModel.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage() {
      return {
        common: void 0,
        giftId: 0,
        user: void 0,
        repeatEnd: 0,
        groupId: "0",
        giftDetails: void 0,
        monitorExtra: "",
        fanTicketCount: "0",
        groupCount: 0,
        repeatCount: 0,
        comboCount: 0,
        toUser: void 0,
        textEffect: void 0,
        incomeTaskgifts: "0",
        roomFanTicketCount: "0",
        priority: void 0,
        logId: "",
        sendType: "0",
        publicAreaCommon: void 0,
        trayDisplayText: void 0,
        bannedDisplayEffects: "0",
        mTrayInfo: void 0,
        giftExtra: void 0,
        colorId: "0",
        isFirstSent: false,
        displayTextForAnchor: void 0,
        displayTextForAudience: void 0,
        orderId: "",
        giftsInBox: void 0,
        msgFilter: void 0,
        lynxExtra: [],
        userIdentity: void 0,
        matchInfo: void 0,
        linkmicGiftExpressionStrategy: 0,
        flyingMicResources: void 0,
        disableGiftTracking: false,
        asset: void 0,
        version: 0,
        sponsorshipInfo: [],
        flyingMicResourcesV2: void 0,
        publicAreaMessageCommon: void 0,
        signature: "",
        signatureVersion: "",
        multiGenerateMessage: false,
        toMemberId: "",
        toMemberIdInt: "0",
        toMemberNickname: "",
        interactiveGiftInfo: void 0
      };
    }
    exports.WebcastGiftMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.giftId !== 0) {
          writer.uint32(16).int32(message.giftId);
        }
        if (message.user !== void 0) {
          exports.User.encode(message.user, writer.uint32(58).fork()).join();
        }
        if (message.repeatEnd !== 0) {
          writer.uint32(72).int32(message.repeatEnd);
        }
        if (message.groupId !== "0") {
          writer.uint32(88).uint64(message.groupId);
        }
        if (message.giftDetails !== void 0) {
          exports.Gift.encode(message.giftDetails, writer.uint32(122).fork()).join();
        }
        if (message.monitorExtra !== "") {
          writer.uint32(178).string(message.monitorExtra);
        }
        if (message.fanTicketCount !== "0") {
          writer.uint32(24).int64(message.fanTicketCount);
        }
        if (message.groupCount !== 0) {
          writer.uint32(32).int32(message.groupCount);
        }
        if (message.repeatCount !== 0) {
          writer.uint32(40).int32(message.repeatCount);
        }
        if (message.comboCount !== 0) {
          writer.uint32(48).int32(message.comboCount);
        }
        if (message.toUser !== void 0) {
          exports.User.encode(message.toUser, writer.uint32(66).fork()).join();
        }
        if (message.textEffect !== void 0) {
          exports.WebcastGiftMessage_TextEffect.encode(message.textEffect, writer.uint32(82).fork()).join();
        }
        if (message.incomeTaskgifts !== "0") {
          writer.uint32(96).int64(message.incomeTaskgifts);
        }
        if (message.roomFanTicketCount !== "0") {
          writer.uint32(104).int64(message.roomFanTicketCount);
        }
        if (message.priority !== void 0) {
          exports.WebcastGiftMessage_GiftIMPriority.encode(message.priority, writer.uint32(114).fork()).join();
        }
        if (message.logId !== "") {
          writer.uint32(130).string(message.logId);
        }
        if (message.sendType !== "0") {
          writer.uint32(136).int64(message.sendType);
        }
        if (message.publicAreaCommon !== void 0) {
          exports.PublicAreaCommon.encode(message.publicAreaCommon, writer.uint32(146).fork()).join();
        }
        if (message.trayDisplayText !== void 0) {
          exports.Text.encode(message.trayDisplayText, writer.uint32(154).fork()).join();
        }
        if (message.bannedDisplayEffects !== "0") {
          writer.uint32(160).int64(message.bannedDisplayEffects);
        }
        if (message.mTrayInfo !== void 0) {
          exports.WebcastGiftMessage_GiftTrayInfo.encode(message.mTrayInfo, writer.uint32(170).fork()).join();
        }
        if (message.giftExtra !== void 0) {
          exports.WebcastGiftMessage_GiftMonitorInfo.encode(message.giftExtra, writer.uint32(186).fork()).join();
        }
        if (message.colorId !== "0") {
          writer.uint32(192).int64(message.colorId);
        }
        if (message.isFirstSent !== false) {
          writer.uint32(200).bool(message.isFirstSent);
        }
        if (message.displayTextForAnchor !== void 0) {
          exports.Text.encode(message.displayTextForAnchor, writer.uint32(210).fork()).join();
        }
        if (message.displayTextForAudience !== void 0) {
          exports.Text.encode(message.displayTextForAudience, writer.uint32(218).fork()).join();
        }
        if (message.orderId !== "") {
          writer.uint32(226).string(message.orderId);
        }
        if (message.giftsInBox !== void 0) {
          exports.WebcastGiftMessage_GiftsBoxInfo.encode(message.giftsInBox, writer.uint32(234).fork()).join();
        }
        if (message.msgFilter !== void 0) {
          exports.MsgFilter.encode(message.msgFilter, writer.uint32(242).fork()).join();
        }
        for (const v of message.lynxExtra) {
          exports.WebcastGiftMessage_LynxGiftExtra.encode(v, writer.uint32(250).fork()).join();
        }
        if (message.userIdentity !== void 0) {
          exports.UserIdentity.encode(message.userIdentity, writer.uint32(258).fork()).join();
        }
        if (message.matchInfo !== void 0) {
          exports.WebcastGiftMessage_MatchInfo.encode(message.matchInfo, writer.uint32(266).fork()).join();
        }
        if (message.linkmicGiftExpressionStrategy !== 0) {
          writer.uint32(272).int32(message.linkmicGiftExpressionStrategy);
        }
        if (message.flyingMicResources !== void 0) {
          exports.WebcastGiftMessage_FlyingMicResources.encode(message.flyingMicResources, writer.uint32(282).fork()).join();
        }
        if (message.disableGiftTracking !== false) {
          writer.uint32(288).bool(message.disableGiftTracking);
        }
        if (message.asset !== void 0) {
          exports.WebcastGiftMessage_AssetsModel.encode(message.asset, writer.uint32(298).fork()).join();
        }
        if (message.version !== 0) {
          writer.uint32(304).int32(message.version);
        }
        for (const v of message.sponsorshipInfo) {
          exports.WebcastGiftMessage_SponsorshipInfo.encode(v, writer.uint32(314).fork()).join();
        }
        if (message.flyingMicResourcesV2 !== void 0) {
          exports.WebcastGiftMessage_FlyingMicResources.encode(message.flyingMicResourcesV2, writer.uint32(322).fork()).join();
        }
        if (message.publicAreaMessageCommon !== void 0) {
          exports.PublicAreaMessageCommon.encode(message.publicAreaMessageCommon, writer.uint32(330).fork()).join();
        }
        if (message.signature !== "") {
          writer.uint32(338).string(message.signature);
        }
        if (message.signatureVersion !== "") {
          writer.uint32(346).string(message.signatureVersion);
        }
        if (message.multiGenerateMessage !== false) {
          writer.uint32(352).bool(message.multiGenerateMessage);
        }
        if (message.toMemberId !== "") {
          writer.uint32(362).string(message.toMemberId);
        }
        if (message.toMemberIdInt !== "0") {
          writer.uint32(368).int64(message.toMemberIdInt);
        }
        if (message.toMemberNickname !== "") {
          writer.uint32(378).string(message.toMemberNickname);
        }
        if (message.interactiveGiftInfo !== void 0) {
          exports.WebcastGiftMessage_InteractiveGiftInfo.encode(message.interactiveGiftInfo, writer.uint32(386).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.giftId = reader.int32();
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.user = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.repeatEnd = reader.int32();
              continue;
            }
            case 11: {
              if (tag !== 88) {
                break;
              }
              message.groupId = reader.uint64().toString();
              continue;
            }
            case 15: {
              if (tag !== 122) {
                break;
              }
              message.giftDetails = exports.Gift.decode(reader, reader.uint32());
              continue;
            }
            case 22: {
              if (tag !== 178) {
                break;
              }
              message.monitorExtra = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.fanTicketCount = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.groupCount = reader.int32();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.repeatCount = reader.int32();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.comboCount = reader.int32();
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.toUser = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              message.textEffect = exports.WebcastGiftMessage_TextEffect.decode(reader, reader.uint32());
              continue;
            }
            case 12: {
              if (tag !== 96) {
                break;
              }
              message.incomeTaskgifts = reader.int64().toString();
              continue;
            }
            case 13: {
              if (tag !== 104) {
                break;
              }
              message.roomFanTicketCount = reader.int64().toString();
              continue;
            }
            case 14: {
              if (tag !== 114) {
                break;
              }
              message.priority = exports.WebcastGiftMessage_GiftIMPriority.decode(reader, reader.uint32());
              continue;
            }
            case 16: {
              if (tag !== 130) {
                break;
              }
              message.logId = reader.string();
              continue;
            }
            case 17: {
              if (tag !== 136) {
                break;
              }
              message.sendType = reader.int64().toString();
              continue;
            }
            case 18: {
              if (tag !== 146) {
                break;
              }
              message.publicAreaCommon = exports.PublicAreaCommon.decode(reader, reader.uint32());
              continue;
            }
            case 19: {
              if (tag !== 154) {
                break;
              }
              message.trayDisplayText = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 20: {
              if (tag !== 160) {
                break;
              }
              message.bannedDisplayEffects = reader.int64().toString();
              continue;
            }
            case 21: {
              if (tag !== 170) {
                break;
              }
              message.mTrayInfo = exports.WebcastGiftMessage_GiftTrayInfo.decode(reader, reader.uint32());
              continue;
            }
            case 23: {
              if (tag !== 186) {
                break;
              }
              message.giftExtra = exports.WebcastGiftMessage_GiftMonitorInfo.decode(reader, reader.uint32());
              continue;
            }
            case 24: {
              if (tag !== 192) {
                break;
              }
              message.colorId = reader.int64().toString();
              continue;
            }
            case 25: {
              if (tag !== 200) {
                break;
              }
              message.isFirstSent = reader.bool();
              continue;
            }
            case 26: {
              if (tag !== 210) {
                break;
              }
              message.displayTextForAnchor = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 27: {
              if (tag !== 218) {
                break;
              }
              message.displayTextForAudience = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 28: {
              if (tag !== 226) {
                break;
              }
              message.orderId = reader.string();
              continue;
            }
            case 29: {
              if (tag !== 234) {
                break;
              }
              message.giftsInBox = exports.WebcastGiftMessage_GiftsBoxInfo.decode(reader, reader.uint32());
              continue;
            }
            case 30: {
              if (tag !== 242) {
                break;
              }
              message.msgFilter = exports.MsgFilter.decode(reader, reader.uint32());
              continue;
            }
            case 31: {
              if (tag !== 250) {
                break;
              }
              message.lynxExtra.push(exports.WebcastGiftMessage_LynxGiftExtra.decode(reader, reader.uint32()));
              continue;
            }
            case 32: {
              if (tag !== 258) {
                break;
              }
              message.userIdentity = exports.UserIdentity.decode(reader, reader.uint32());
              continue;
            }
            case 33: {
              if (tag !== 266) {
                break;
              }
              message.matchInfo = exports.WebcastGiftMessage_MatchInfo.decode(reader, reader.uint32());
              continue;
            }
            case 34: {
              if (tag !== 272) {
                break;
              }
              message.linkmicGiftExpressionStrategy = reader.int32();
              continue;
            }
            case 35: {
              if (tag !== 282) {
                break;
              }
              message.flyingMicResources = exports.WebcastGiftMessage_FlyingMicResources.decode(reader, reader.uint32());
              continue;
            }
            case 36: {
              if (tag !== 288) {
                break;
              }
              message.disableGiftTracking = reader.bool();
              continue;
            }
            case 37: {
              if (tag !== 298) {
                break;
              }
              message.asset = exports.WebcastGiftMessage_AssetsModel.decode(reader, reader.uint32());
              continue;
            }
            case 38: {
              if (tag !== 304) {
                break;
              }
              message.version = reader.int32();
              continue;
            }
            case 39: {
              if (tag !== 314) {
                break;
              }
              message.sponsorshipInfo.push(exports.WebcastGiftMessage_SponsorshipInfo.decode(reader, reader.uint32()));
              continue;
            }
            case 40: {
              if (tag !== 322) {
                break;
              }
              message.flyingMicResourcesV2 = exports.WebcastGiftMessage_FlyingMicResources.decode(reader, reader.uint32());
              continue;
            }
            case 41: {
              if (tag !== 330) {
                break;
              }
              message.publicAreaMessageCommon = exports.PublicAreaMessageCommon.decode(reader, reader.uint32());
              continue;
            }
            case 42: {
              if (tag !== 338) {
                break;
              }
              message.signature = reader.string();
              continue;
            }
            case 43: {
              if (tag !== 346) {
                break;
              }
              message.signatureVersion = reader.string();
              continue;
            }
            case 44: {
              if (tag !== 352) {
                break;
              }
              message.multiGenerateMessage = reader.bool();
              continue;
            }
            case 45: {
              if (tag !== 362) {
                break;
              }
              message.toMemberId = reader.string();
              continue;
            }
            case 46: {
              if (tag !== 368) {
                break;
              }
              message.toMemberIdInt = reader.int64().toString();
              continue;
            }
            case 47: {
              if (tag !== 378) {
                break;
              }
              message.toMemberNickname = reader.string();
              continue;
            }
            case 48: {
              if (tag !== 386) {
                break;
              }
              message.interactiveGiftInfo = exports.WebcastGiftMessage_InteractiveGiftInfo.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage_InteractiveGiftInfo() {
      return { crossScreenDelay: "0", crossScreenRole: "0", ignoreConfig: 0, uniqId: "0", toUserTeamId: "0" };
    }
    exports.WebcastGiftMessage_InteractiveGiftInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.crossScreenDelay !== "0") {
          writer.uint32(8).int64(message.crossScreenDelay);
        }
        if (message.crossScreenRole !== "0") {
          writer.uint32(16).int64(message.crossScreenRole);
        }
        if (message.ignoreConfig !== 0) {
          writer.uint32(24).int32(message.ignoreConfig);
        }
        if (message.uniqId !== "0") {
          writer.uint32(32).int64(message.uniqId);
        }
        if (message.toUserTeamId !== "0") {
          writer.uint32(40).int64(message.toUserTeamId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_InteractiveGiftInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.crossScreenDelay = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.crossScreenRole = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.ignoreConfig = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.uniqId = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.toUserTeamId = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage_GiftIMPriority() {
      return { queueSizesList: [], selfQueuePriority: "0", priority: "0" };
    }
    exports.WebcastGiftMessage_GiftIMPriority = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.queueSizesList) {
          writer.int64(v);
        }
        writer.join();
        if (message.selfQueuePriority !== "0") {
          writer.uint32(16).int64(message.selfQueuePriority);
        }
        if (message.priority !== "0") {
          writer.uint32(24).int64(message.priority);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_GiftIMPriority();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag === 8) {
                message.queueSizesList.push(reader.int64().toString());
                continue;
              }
              if (tag === 10) {
                const end2 = reader.uint32() + reader.pos;
                while (reader.pos < end2) {
                  message.queueSizesList.push(reader.int64().toString());
                }
                continue;
              }
              break;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.selfQueuePriority = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.priority = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage_TextEffect() {
      return { portraitDetail: void 0, landscapeDetail: void 0 };
    }
    exports.WebcastGiftMessage_TextEffect = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.portraitDetail !== void 0) {
          exports.WebcastGiftMessage_TextEffect_Detail.encode(message.portraitDetail, writer.uint32(10).fork()).join();
        }
        if (message.landscapeDetail !== void 0) {
          exports.WebcastGiftMessage_TextEffect_Detail.encode(message.landscapeDetail, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_TextEffect();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.portraitDetail = exports.WebcastGiftMessage_TextEffect_Detail.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.landscapeDetail = exports.WebcastGiftMessage_TextEffect_Detail.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage_TextEffect_Detail() {
      return {
        text: void 0,
        textFontSize: 0,
        background: void 0,
        start: "0",
        duration: "0",
        x: 0,
        y: 0,
        width: 0,
        height: 0,
        shadowDx: 0,
        shadowDy: 0,
        shadowRadius: 0,
        shadowColor: "",
        strokeColor: "",
        strokeWidth: 0
      };
    }
    exports.WebcastGiftMessage_TextEffect_Detail = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.text !== void 0) {
          exports.Text.encode(message.text, writer.uint32(10).fork()).join();
        }
        if (message.textFontSize !== 0) {
          writer.uint32(16).int32(message.textFontSize);
        }
        if (message.background !== void 0) {
          exports.Image.encode(message.background, writer.uint32(26).fork()).join();
        }
        if (message.start !== "0") {
          writer.uint32(32).int64(message.start);
        }
        if (message.duration !== "0") {
          writer.uint32(40).int64(message.duration);
        }
        if (message.x !== 0) {
          writer.uint32(48).int32(message.x);
        }
        if (message.y !== 0) {
          writer.uint32(56).int32(message.y);
        }
        if (message.width !== 0) {
          writer.uint32(64).int32(message.width);
        }
        if (message.height !== 0) {
          writer.uint32(72).int32(message.height);
        }
        if (message.shadowDx !== 0) {
          writer.uint32(80).int32(message.shadowDx);
        }
        if (message.shadowDy !== 0) {
          writer.uint32(88).int32(message.shadowDy);
        }
        if (message.shadowRadius !== 0) {
          writer.uint32(96).int32(message.shadowRadius);
        }
        if (message.shadowColor !== "") {
          writer.uint32(106).string(message.shadowColor);
        }
        if (message.strokeColor !== "") {
          writer.uint32(114).string(message.strokeColor);
        }
        if (message.strokeWidth !== 0) {
          writer.uint32(120).int32(message.strokeWidth);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_TextEffect_Detail();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.text = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.textFontSize = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.background = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.start = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.duration = reader.int64().toString();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.x = reader.int32();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.y = reader.int32();
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.width = reader.int32();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.height = reader.int32();
              continue;
            }
            case 10: {
              if (tag !== 80) {
                break;
              }
              message.shadowDx = reader.int32();
              continue;
            }
            case 11: {
              if (tag !== 88) {
                break;
              }
              message.shadowDy = reader.int32();
              continue;
            }
            case 12: {
              if (tag !== 96) {
                break;
              }
              message.shadowRadius = reader.int32();
              continue;
            }
            case 13: {
              if (tag !== 106) {
                break;
              }
              message.shadowColor = reader.string();
              continue;
            }
            case 14: {
              if (tag !== 114) {
                break;
              }
              message.strokeColor = reader.string();
              continue;
            }
            case 15: {
              if (tag !== 120) {
                break;
              }
              message.strokeWidth = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage_GiftTrayInfo() {
      return {
        mDynamicImg: void 0,
        canMirror: false,
        trayNormalBgImg: void 0,
        trayNormalBgColor: [],
        traySmallBgImg: void 0,
        traySmallBgColor: [],
        rightTagText: void 0,
        rightTagBgImg: void 0,
        rightTagBgColor: [],
        trayNameTextColor: "",
        trayDescTextColor: "",
        rightTagJumpSchema: ""
      };
    }
    exports.WebcastGiftMessage_GiftTrayInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.mDynamicImg !== void 0) {
          exports.Image.encode(message.mDynamicImg, writer.uint32(10).fork()).join();
        }
        if (message.canMirror !== false) {
          writer.uint32(16).bool(message.canMirror);
        }
        if (message.trayNormalBgImg !== void 0) {
          exports.Image.encode(message.trayNormalBgImg, writer.uint32(26).fork()).join();
        }
        for (const v of message.trayNormalBgColor) {
          writer.uint32(34).string(v);
        }
        if (message.traySmallBgImg !== void 0) {
          exports.Image.encode(message.traySmallBgImg, writer.uint32(42).fork()).join();
        }
        for (const v of message.traySmallBgColor) {
          writer.uint32(50).string(v);
        }
        if (message.rightTagText !== void 0) {
          exports.Text.encode(message.rightTagText, writer.uint32(58).fork()).join();
        }
        if (message.rightTagBgImg !== void 0) {
          exports.Image.encode(message.rightTagBgImg, writer.uint32(66).fork()).join();
        }
        for (const v of message.rightTagBgColor) {
          writer.uint32(74).string(v);
        }
        if (message.trayNameTextColor !== "") {
          writer.uint32(82).string(message.trayNameTextColor);
        }
        if (message.trayDescTextColor !== "") {
          writer.uint32(90).string(message.trayDescTextColor);
        }
        if (message.rightTagJumpSchema !== "") {
          writer.uint32(98).string(message.rightTagJumpSchema);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_GiftTrayInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.mDynamicImg = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.canMirror = reader.bool();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.trayNormalBgImg = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.trayNormalBgColor.push(reader.string());
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.traySmallBgImg = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.traySmallBgColor.push(reader.string());
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.rightTagText = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.rightTagBgImg = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 9: {
              if (tag !== 74) {
                break;
              }
              message.rightTagBgColor.push(reader.string());
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              message.trayNameTextColor = reader.string();
              continue;
            }
            case 11: {
              if (tag !== 90) {
                break;
              }
              message.trayDescTextColor = reader.string();
              continue;
            }
            case 12: {
              if (tag !== 98) {
                break;
              }
              message.rightTagJumpSchema = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage_GiftMonitorInfo() {
      return {
        anchorId: "0",
        profitApiMessageDur: "0",
        sendGiftProfitApiStartMs: "0",
        sendGiftProfitCoreStartMs: "0",
        sendGiftReqStartMs: "0",
        sendGiftSendMessageSuccessMs: "0",
        sendProfitApiDur: "0",
        toUserId: "0",
        sendGiftStartClientLocalMs: "0",
        fromPlatform: "",
        fromVersion: ""
      };
    }
    exports.WebcastGiftMessage_GiftMonitorInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.anchorId !== "0") {
          writer.uint32(8).int64(message.anchorId);
        }
        if (message.profitApiMessageDur !== "0") {
          writer.uint32(16).int64(message.profitApiMessageDur);
        }
        if (message.sendGiftProfitApiStartMs !== "0") {
          writer.uint32(24).int64(message.sendGiftProfitApiStartMs);
        }
        if (message.sendGiftProfitCoreStartMs !== "0") {
          writer.uint32(32).int64(message.sendGiftProfitCoreStartMs);
        }
        if (message.sendGiftReqStartMs !== "0") {
          writer.uint32(40).int64(message.sendGiftReqStartMs);
        }
        if (message.sendGiftSendMessageSuccessMs !== "0") {
          writer.uint32(48).int64(message.sendGiftSendMessageSuccessMs);
        }
        if (message.sendProfitApiDur !== "0") {
          writer.uint32(56).int64(message.sendProfitApiDur);
        }
        if (message.toUserId !== "0") {
          writer.uint32(64).int64(message.toUserId);
        }
        if (message.sendGiftStartClientLocalMs !== "0") {
          writer.uint32(72).int64(message.sendGiftStartClientLocalMs);
        }
        if (message.fromPlatform !== "") {
          writer.uint32(82).string(message.fromPlatform);
        }
        if (message.fromVersion !== "") {
          writer.uint32(90).string(message.fromVersion);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_GiftMonitorInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.anchorId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.profitApiMessageDur = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.sendGiftProfitApiStartMs = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.sendGiftProfitCoreStartMs = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.sendGiftReqStartMs = reader.int64().toString();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.sendGiftSendMessageSuccessMs = reader.int64().toString();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.sendProfitApiDur = reader.int64().toString();
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.toUserId = reader.int64().toString();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.sendGiftStartClientLocalMs = reader.int64().toString();
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              message.fromPlatform = reader.string();
              continue;
            }
            case 11: {
              if (tag !== 90) {
                break;
              }
              message.fromVersion = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage_MatchInfo() {
      return { critical: "0", effectCardInUse: false, multiplierType: 0, multiplierValue: "0" };
    }
    exports.WebcastGiftMessage_MatchInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.critical !== "0") {
          writer.uint32(8).int64(message.critical);
        }
        if (message.effectCardInUse !== false) {
          writer.uint32(16).bool(message.effectCardInUse);
        }
        if (message.multiplierType !== 0) {
          writer.uint32(24).int32(message.multiplierType);
        }
        if (message.multiplierValue !== "0") {
          writer.uint32(32).int64(message.multiplierValue);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_MatchInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.critical = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.effectCardInUse = reader.bool();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.multiplierType = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.multiplierValue = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage_GiftsBoxInfo() {
      return { gifts: [] };
    }
    exports.WebcastGiftMessage_GiftsBoxInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.gifts) {
          exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_GiftsBoxInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.gifts.push(exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox.decode(reader, reader.uint32()));
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox() {
      return { giftId: "0", effectId: "0", colorId: "0", remainTimes: 0, asset: void 0 };
    }
    exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.giftId !== "0") {
          writer.uint32(8).int64(message.giftId);
        }
        if (message.effectId !== "0") {
          writer.uint32(16).int64(message.effectId);
        }
        if (message.colorId !== "0") {
          writer.uint32(24).int64(message.colorId);
        }
        if (message.remainTimes !== 0) {
          writer.uint32(32).int32(message.remainTimes);
        }
        if (message.asset !== void 0) {
          exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel.encode(message.asset, writer.uint32(42).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.giftId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.effectId = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.colorId = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.remainTimes = reader.int32();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.asset = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel() {
      return {
        name: "",
        resourceUri: "",
        resourceModel: void 0,
        describe: "",
        id: "0",
        resourceType: 0,
        md5: "",
        size: "0",
        lokiExtraContent: void 0,
        downloadType: 0,
        resourceByteVC1Model: void 0,
        bytevc1Md5: "",
        videoResourceList: [],
        faceRecognitionArchiveMeta: void 0,
        lynxUrlSettingsKey: "",
        downgradeResourceType: 0,
        assetExtra: void 0,
        stickerAssetVariant: 0,
        immediateDownload: false,
        stickerAssetVariantReason: 0
      };
    }
    exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
          writer.uint32(10).string(message.name);
        }
        if (message.resourceUri !== "") {
          writer.uint32(18).string(message.resourceUri);
        }
        if (message.resourceModel !== void 0) {
          exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel.encode(message.resourceModel, writer.uint32(34).fork()).join();
        }
        if (message.describe !== "") {
          writer.uint32(42).string(message.describe);
        }
        if (message.id !== "0") {
          writer.uint32(48).int64(message.id);
        }
        if (message.resourceType !== 0) {
          writer.uint32(56).int32(message.resourceType);
        }
        if (message.md5 !== "") {
          writer.uint32(66).string(message.md5);
        }
        if (message.size !== "0") {
          writer.uint32(72).int64(message.size);
        }
        if (message.lokiExtraContent !== void 0) {
          exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent.encode(message.lokiExtraContent, writer.uint32(82).fork()).join();
        }
        if (message.downloadType !== 0) {
          writer.uint32(208).int32(message.downloadType);
        }
        if (message.resourceByteVC1Model !== void 0) {
          exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel.encode(message.resourceByteVC1Model, writer.uint32(226).fork()).join();
        }
        if (message.bytevc1Md5 !== "") {
          writer.uint32(234).string(message.bytevc1Md5);
        }
        for (const v of message.videoResourceList) {
          exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResource.encode(v, writer.uint32(242).fork()).join();
        }
        if (message.faceRecognitionArchiveMeta !== void 0) {
          exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMeta.encode(message.faceRecognitionArchiveMeta, writer.uint32(250).fork()).join();
        }
        if (message.lynxUrlSettingsKey !== "") {
          writer.uint32(258).string(message.lynxUrlSettingsKey);
        }
        if (message.downgradeResourceType !== 0) {
          writer.uint32(264).int32(message.downgradeResourceType);
        }
        if (message.assetExtra !== void 0) {
          exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtra.encode(message.assetExtra, writer.uint32(274).fork()).join();
        }
        if (message.stickerAssetVariant !== 0) {
          writer.uint32(280).int32(message.stickerAssetVariant);
        }
        if (message.immediateDownload !== false) {
          writer.uint32(288).bool(message.immediateDownload);
        }
        if (message.stickerAssetVariantReason !== 0) {
          writer.uint32(296).int32(message.stickerAssetVariantReason);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.name = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.resourceUri = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.resourceModel = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.describe = reader.string();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.id = reader.int64().toString();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.resourceType = reader.int32();
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.md5 = reader.string();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.size = reader.int64().toString();
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              message.lokiExtraContent = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent.decode(reader, reader.uint32());
              continue;
            }
            case 26: {
              if (tag !== 208) {
                break;
              }
              message.downloadType = reader.int32();
              continue;
            }
            case 28: {
              if (tag !== 226) {
                break;
              }
              message.resourceByteVC1Model = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel.decode(reader, reader.uint32());
              continue;
            }
            case 29: {
              if (tag !== 234) {
                break;
              }
              message.bytevc1Md5 = reader.string();
              continue;
            }
            case 30: {
              if (tag !== 242) {
                break;
              }
              message.videoResourceList.push(exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResource.decode(reader, reader.uint32()));
              continue;
            }
            case 31: {
              if (tag !== 250) {
                break;
              }
              message.faceRecognitionArchiveMeta = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMeta.decode(reader, reader.uint32());
              continue;
            }
            case 32: {
              if (tag !== 258) {
                break;
              }
              message.lynxUrlSettingsKey = reader.string();
              continue;
            }
            case 33: {
              if (tag !== 264) {
                break;
              }
              message.downgradeResourceType = reader.int32();
              continue;
            }
            case 34: {
              if (tag !== 274) {
                break;
              }
              message.assetExtra = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtra.decode(reader, reader.uint32());
              continue;
            }
            case 35: {
              if (tag !== 280) {
                break;
              }
              message.stickerAssetVariant = reader.int32();
              continue;
            }
            case 36: {
              if (tag !== 288) {
                break;
              }
              message.immediateDownload = reader.bool();
              continue;
            }
            case 37: {
              if (tag !== 296) {
                break;
              }
              message.stickerAssetVariantReason = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtra() {
      return { effectStarlingKey: "" };
    }
    exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtra = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.effectStarlingKey !== "") {
          writer.uint32(10).string(message.effectStarlingKey);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtra();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.effectStarlingKey = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel() {
      return { urlList: [], uri: "" };
    }
    exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.urlList) {
          writer.uint32(10).string(v);
        }
        if (message.uri !== "") {
          writer.uint32(18).string(message.uri);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.urlList.push(reader.string());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.uri = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent() {
      return {
        giftType: "",
        giftDuration: "0",
        needScreenShot: false,
        ismultiFrame: false,
        viewOverlay: "",
        befViewRenderSize: void 0,
        befViewRenderFPS: 0,
        befViewFitMode: 0,
        modelNames: "",
        requirements: []
      };
    }
    exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.giftType !== "") {
          writer.uint32(10).string(message.giftType);
        }
        if (message.giftDuration !== "0") {
          writer.uint32(16).int64(message.giftDuration);
        }
        if (message.needScreenShot !== false) {
          writer.uint32(24).bool(message.needScreenShot);
        }
        if (message.ismultiFrame !== false) {
          writer.uint32(32).bool(message.ismultiFrame);
        }
        if (message.viewOverlay !== "") {
          writer.uint32(42).string(message.viewOverlay);
        }
        if (message.befViewRenderSize !== void 0) {
          exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSize.encode(message.befViewRenderSize, writer.uint32(50).fork()).join();
        }
        if (message.befViewRenderFPS !== 0) {
          writer.uint32(56).int32(message.befViewRenderFPS);
        }
        if (message.befViewFitMode !== 0) {
          writer.uint32(64).int32(message.befViewFitMode);
        }
        if (message.modelNames !== "") {
          writer.uint32(74).string(message.modelNames);
        }
        for (const v of message.requirements) {
          writer.uint32(82).string(v);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.giftType = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.giftDuration = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.needScreenShot = reader.bool();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.ismultiFrame = reader.bool();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.viewOverlay = reader.string();
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.befViewRenderSize = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSize.decode(reader, reader.uint32());
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.befViewRenderFPS = reader.int32();
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.befViewFitMode = reader.int32();
              continue;
            }
            case 9: {
              if (tag !== 74) {
                break;
              }
              message.modelNames = reader.string();
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              message.requirements.push(reader.string());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSize() {
      return { with: 0, height: 0 };
    }
    exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSize = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.with !== 0) {
          writer.uint32(8).int32(message.with);
        }
        if (message.height !== 0) {
          writer.uint32(16).int32(message.height);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSize();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.with = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.height = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResource() {
      return { videoTypeName: "", videoUrl: void 0, videoMd5: "" };
    }
    exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResource = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.videoTypeName !== "") {
          writer.uint32(10).string(message.videoTypeName);
        }
        if (message.videoUrl !== void 0) {
          exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel.encode(message.videoUrl, writer.uint32(18).fork()).join();
        }
        if (message.videoMd5 !== "") {
          writer.uint32(26).string(message.videoMd5);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResource();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.videoTypeName = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.videoUrl = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.videoMd5 = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMeta() {
      return { version: "", requirements: [], modelNames: "", sdkExtra: "" };
    }
    exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMeta = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.version !== "") {
          writer.uint32(10).string(message.version);
        }
        for (const v of message.requirements) {
          writer.uint32(18).string(v);
        }
        if (message.modelNames !== "") {
          writer.uint32(26).string(message.modelNames);
        }
        if (message.sdkExtra !== "") {
          writer.uint32(34).string(message.sdkExtra);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMeta();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.version = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.requirements.push(reader.string());
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.modelNames = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.sdkExtra = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage_AssetsModel() {
      return {
        name: "",
        resourceUri: "",
        resourceModel: void 0,
        describe: "",
        id: "0",
        resourceType: 0,
        md5: "",
        size: "0",
        lokiExtraContent: void 0,
        downloadType: 0,
        resourceByteVC1Model: void 0,
        bytevc1Md5: "",
        videoResourceList: [],
        faceRecognitionArchiveMeta: void 0,
        lynxUrlSettingsKey: "",
        downgradeResourceType: 0,
        assetExtra: void 0,
        stickerAssetVariant: 0,
        immediateDownload: false,
        stickerAssetVariantReason: 0
      };
    }
    exports.WebcastGiftMessage_AssetsModel = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
          writer.uint32(10).string(message.name);
        }
        if (message.resourceUri !== "") {
          writer.uint32(18).string(message.resourceUri);
        }
        if (message.resourceModel !== void 0) {
          exports.WebcastGiftMessage_AssetsModel_ResourceModel.encode(message.resourceModel, writer.uint32(34).fork()).join();
        }
        if (message.describe !== "") {
          writer.uint32(42).string(message.describe);
        }
        if (message.id !== "0") {
          writer.uint32(48).int64(message.id);
        }
        if (message.resourceType !== 0) {
          writer.uint32(56).int32(message.resourceType);
        }
        if (message.md5 !== "") {
          writer.uint32(66).string(message.md5);
        }
        if (message.size !== "0") {
          writer.uint32(72).int64(message.size);
        }
        if (message.lokiExtraContent !== void 0) {
          exports.WebcastGiftMessage_AssetsModel_LokiExtraContent.encode(message.lokiExtraContent, writer.uint32(82).fork()).join();
        }
        if (message.downloadType !== 0) {
          writer.uint32(208).int32(message.downloadType);
        }
        if (message.resourceByteVC1Model !== void 0) {
          exports.WebcastGiftMessage_AssetsModel_ResourceModel.encode(message.resourceByteVC1Model, writer.uint32(226).fork()).join();
        }
        if (message.bytevc1Md5 !== "") {
          writer.uint32(234).string(message.bytevc1Md5);
        }
        for (const v of message.videoResourceList) {
          exports.WebcastGiftMessage_AssetsModel_VideoResource.encode(v, writer.uint32(242).fork()).join();
        }
        if (message.faceRecognitionArchiveMeta !== void 0) {
          exports.WebcastGiftMessage_AssetsModel_FaceRecognitionMeta.encode(message.faceRecognitionArchiveMeta, writer.uint32(250).fork()).join();
        }
        if (message.lynxUrlSettingsKey !== "") {
          writer.uint32(258).string(message.lynxUrlSettingsKey);
        }
        if (message.downgradeResourceType !== 0) {
          writer.uint32(264).int32(message.downgradeResourceType);
        }
        if (message.assetExtra !== void 0) {
          exports.WebcastGiftMessage_AssetsModel_AssetExtra.encode(message.assetExtra, writer.uint32(274).fork()).join();
        }
        if (message.stickerAssetVariant !== 0) {
          writer.uint32(280).int32(message.stickerAssetVariant);
        }
        if (message.immediateDownload !== false) {
          writer.uint32(288).bool(message.immediateDownload);
        }
        if (message.stickerAssetVariantReason !== 0) {
          writer.uint32(296).int32(message.stickerAssetVariantReason);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_AssetsModel();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.name = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.resourceUri = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.resourceModel = exports.WebcastGiftMessage_AssetsModel_ResourceModel.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.describe = reader.string();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.id = reader.int64().toString();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.resourceType = reader.int32();
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.md5 = reader.string();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.size = reader.int64().toString();
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              message.lokiExtraContent = exports.WebcastGiftMessage_AssetsModel_LokiExtraContent.decode(reader, reader.uint32());
              continue;
            }
            case 26: {
              if (tag !== 208) {
                break;
              }
              message.downloadType = reader.int32();
              continue;
            }
            case 28: {
              if (tag !== 226) {
                break;
              }
              message.resourceByteVC1Model = exports.WebcastGiftMessage_AssetsModel_ResourceModel.decode(reader, reader.uint32());
              continue;
            }
            case 29: {
              if (tag !== 234) {
                break;
              }
              message.bytevc1Md5 = reader.string();
              continue;
            }
            case 30: {
              if (tag !== 242) {
                break;
              }
              message.videoResourceList.push(exports.WebcastGiftMessage_AssetsModel_VideoResource.decode(reader, reader.uint32()));
              continue;
            }
            case 31: {
              if (tag !== 250) {
                break;
              }
              message.faceRecognitionArchiveMeta = exports.WebcastGiftMessage_AssetsModel_FaceRecognitionMeta.decode(reader, reader.uint32());
              continue;
            }
            case 32: {
              if (tag !== 258) {
                break;
              }
              message.lynxUrlSettingsKey = reader.string();
              continue;
            }
            case 33: {
              if (tag !== 264) {
                break;
              }
              message.downgradeResourceType = reader.int32();
              continue;
            }
            case 34: {
              if (tag !== 274) {
                break;
              }
              message.assetExtra = exports.WebcastGiftMessage_AssetsModel_AssetExtra.decode(reader, reader.uint32());
              continue;
            }
            case 35: {
              if (tag !== 280) {
                break;
              }
              message.stickerAssetVariant = reader.int32();
              continue;
            }
            case 36: {
              if (tag !== 288) {
                break;
              }
              message.immediateDownload = reader.bool();
              continue;
            }
            case 37: {
              if (tag !== 296) {
                break;
              }
              message.stickerAssetVariantReason = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage_AssetsModel_AssetExtra() {
      return { effectStarlingKey: "" };
    }
    exports.WebcastGiftMessage_AssetsModel_AssetExtra = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.effectStarlingKey !== "") {
          writer.uint32(10).string(message.effectStarlingKey);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_AssetsModel_AssetExtra();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.effectStarlingKey = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage_AssetsModel_ResourceModel() {
      return { urlList: [], uri: "" };
    }
    exports.WebcastGiftMessage_AssetsModel_ResourceModel = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.urlList) {
          writer.uint32(10).string(v);
        }
        if (message.uri !== "") {
          writer.uint32(18).string(message.uri);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_AssetsModel_ResourceModel();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.urlList.push(reader.string());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.uri = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage_AssetsModel_LokiExtraContent() {
      return {
        giftType: "",
        giftDuration: "0",
        needScreenShot: false,
        ismultiFrame: false,
        viewOverlay: "",
        befViewRenderSize: void 0,
        befViewRenderFPS: 0,
        befViewFitMode: 0,
        modelNames: "",
        requirements: []
      };
    }
    exports.WebcastGiftMessage_AssetsModel_LokiExtraContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.giftType !== "") {
          writer.uint32(10).string(message.giftType);
        }
        if (message.giftDuration !== "0") {
          writer.uint32(16).int64(message.giftDuration);
        }
        if (message.needScreenShot !== false) {
          writer.uint32(24).bool(message.needScreenShot);
        }
        if (message.ismultiFrame !== false) {
          writer.uint32(32).bool(message.ismultiFrame);
        }
        if (message.viewOverlay !== "") {
          writer.uint32(42).string(message.viewOverlay);
        }
        if (message.befViewRenderSize !== void 0) {
          exports.WebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSize.encode(message.befViewRenderSize, writer.uint32(50).fork()).join();
        }
        if (message.befViewRenderFPS !== 0) {
          writer.uint32(56).int32(message.befViewRenderFPS);
        }
        if (message.befViewFitMode !== 0) {
          writer.uint32(64).int32(message.befViewFitMode);
        }
        if (message.modelNames !== "") {
          writer.uint32(74).string(message.modelNames);
        }
        for (const v of message.requirements) {
          writer.uint32(82).string(v);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_AssetsModel_LokiExtraContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.giftType = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.giftDuration = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.needScreenShot = reader.bool();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.ismultiFrame = reader.bool();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.viewOverlay = reader.string();
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.befViewRenderSize = exports.WebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSize.decode(reader, reader.uint32());
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.befViewRenderFPS = reader.int32();
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.befViewFitMode = reader.int32();
              continue;
            }
            case 9: {
              if (tag !== 74) {
                break;
              }
              message.modelNames = reader.string();
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              message.requirements.push(reader.string());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSize() {
      return { with: 0, height: 0 };
    }
    exports.WebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSize = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.with !== 0) {
          writer.uint32(8).int32(message.with);
        }
        if (message.height !== 0) {
          writer.uint32(16).int32(message.height);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSize();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.with = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.height = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage_AssetsModel_VideoResource() {
      return { videoTypeName: "", videoUrl: void 0, videoMd5: "" };
    }
    exports.WebcastGiftMessage_AssetsModel_VideoResource = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.videoTypeName !== "") {
          writer.uint32(10).string(message.videoTypeName);
        }
        if (message.videoUrl !== void 0) {
          exports.WebcastGiftMessage_AssetsModel_ResourceModel.encode(message.videoUrl, writer.uint32(18).fork()).join();
        }
        if (message.videoMd5 !== "") {
          writer.uint32(26).string(message.videoMd5);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_AssetsModel_VideoResource();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.videoTypeName = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.videoUrl = exports.WebcastGiftMessage_AssetsModel_ResourceModel.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.videoMd5 = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage_AssetsModel_FaceRecognitionMeta() {
      return { version: "", requirements: [], modelNames: "", sdkExtra: "" };
    }
    exports.WebcastGiftMessage_AssetsModel_FaceRecognitionMeta = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.version !== "") {
          writer.uint32(10).string(message.version);
        }
        for (const v of message.requirements) {
          writer.uint32(18).string(v);
        }
        if (message.modelNames !== "") {
          writer.uint32(26).string(message.modelNames);
        }
        if (message.sdkExtra !== "") {
          writer.uint32(34).string(message.sdkExtra);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_AssetsModel_FaceRecognitionMeta();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.version = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.requirements.push(reader.string());
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.modelNames = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.sdkExtra = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage_LynxGiftExtra() {
      return { id: "0", code: "0", type: "0", params: [], extra: "" };
    }
    exports.WebcastGiftMessage_LynxGiftExtra = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "0") {
          writer.uint32(8).int64(message.id);
        }
        if (message.code !== "0") {
          writer.uint32(16).int64(message.code);
        }
        if (message.type !== "0") {
          writer.uint32(24).int64(message.type);
        }
        for (const v of message.params) {
          writer.uint32(34).string(v);
        }
        if (message.extra !== "") {
          writer.uint32(42).string(message.extra);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_LynxGiftExtra();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.id = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.code = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.type = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.params.push(reader.string());
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.extra = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage_FlyingMicResources() {
      return { pathImage: void 0, micImage: void 0, transitionConfigs: [] };
    }
    exports.WebcastGiftMessage_FlyingMicResources = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pathImage !== void 0) {
          exports.Image.encode(message.pathImage, writer.uint32(10).fork()).join();
        }
        if (message.micImage !== void 0) {
          exports.Image.encode(message.micImage, writer.uint32(18).fork()).join();
        }
        for (const v of message.transitionConfigs) {
          exports.WebcastGiftMessage_FlyingMicResources_TransitionConfig.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_FlyingMicResources();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.pathImage = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.micImage = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.transitionConfigs.push(exports.WebcastGiftMessage_FlyingMicResources_TransitionConfig.decode(reader, reader.uint32()));
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage_FlyingMicResources_TransitionConfig() {
      return { configId: "0", resourceImage: void 0 };
    }
    exports.WebcastGiftMessage_FlyingMicResources_TransitionConfig = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.configId !== "0") {
          writer.uint32(8).int64(message.configId);
        }
        if (message.resourceImage !== void 0) {
          exports.Image.encode(message.resourceImage, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_FlyingMicResources_TransitionConfig();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.configId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.resourceImage = exports.Image.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGiftMessage_SponsorshipInfo() {
      return {
        giftId: "0",
        sponsorId: "0",
        lightGiftUp: false,
        unlightedGiftIcon: "",
        giftGalleryDetailPageSchemeUrl: "",
        giftGalleryClickSponsor: false,
        becomeAllSponsored: false
      };
    }
    exports.WebcastGiftMessage_SponsorshipInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.giftId !== "0") {
          writer.uint32(8).int64(message.giftId);
        }
        if (message.sponsorId !== "0") {
          writer.uint32(16).int64(message.sponsorId);
        }
        if (message.lightGiftUp !== false) {
          writer.uint32(24).bool(message.lightGiftUp);
        }
        if (message.unlightedGiftIcon !== "") {
          writer.uint32(34).string(message.unlightedGiftIcon);
        }
        if (message.giftGalleryDetailPageSchemeUrl !== "") {
          writer.uint32(42).string(message.giftGalleryDetailPageSchemeUrl);
        }
        if (message.giftGalleryClickSponsor !== false) {
          writer.uint32(48).bool(message.giftGalleryClickSponsor);
        }
        if (message.becomeAllSponsored !== false) {
          writer.uint32(168).bool(message.becomeAllSponsored);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_SponsorshipInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.giftId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.sponsorId = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.lightGiftUp = reader.bool();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.unlightedGiftIcon = reader.string();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.giftGalleryDetailPageSchemeUrl = reader.string();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.giftGalleryClickSponsor = reader.bool();
              continue;
            }
            case 21: {
              if (tag !== 168) {
                break;
              }
              message.becomeAllSponsored = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicBattle() {
      return {
        common: void 0,
        battleId: "0",
        battleSetting: void 0,
        action: 0,
        battleResult: {},
        mBattleDisplayConfig: void 0,
        inviteeGiftPermissionType: 0,
        armies: {},
        anchorInfo: {},
        bubbleText: "",
        supportedActions: [],
        battleCombos: {},
        teamUsers: [],
        inviteeGiftPermissionTypes: [],
        actionByUserId: "0",
        teamBattleResult: [],
        teamArmies: [],
        abtestSettings: [],
        teamMatchCampaign: void 0,
        fuzzyDisplayConfigV2: void 0
      };
    }
    exports.WebcastLinkMicBattle = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.battleId !== "0") {
          writer.uint32(16).int64(message.battleId);
        }
        if (message.battleSetting !== void 0) {
          exports.BattleSetting.encode(message.battleSetting, writer.uint32(26).fork()).join();
        }
        if (message.action !== 0) {
          writer.uint32(32).int32(message.action);
        }
        Object.entries(message.battleResult).forEach(([key, value]) => {
          exports.WebcastLinkMicBattle_BattleResultEntry.encode({ key, value }, writer.uint32(42).fork()).join();
        });
        if (message.mBattleDisplayConfig !== void 0) {
          exports.WebcastLinkMicBattle_BattleDisplayConfig.encode(message.mBattleDisplayConfig, writer.uint32(50).fork()).join();
        }
        if (message.inviteeGiftPermissionType !== 0) {
          writer.uint32(64).int32(message.inviteeGiftPermissionType);
        }
        Object.entries(message.armies).forEach(([key, value]) => {
          exports.WebcastLinkMicBattle_ArmiesEntry.encode({ key, value }, writer.uint32(74).fork()).join();
        });
        Object.entries(message.anchorInfo).forEach(([key, value]) => {
          exports.WebcastLinkMicBattle_AnchorInfoEntry.encode({ key, value }, writer.uint32(82).fork()).join();
        });
        if (message.bubbleText !== "") {
          writer.uint32(90).string(message.bubbleText);
        }
        for (const v of message.supportedActions) {
          exports.WebcastLinkMicBattle_SupportedActionsWrapper.encode(v, writer.uint32(98).fork()).join();
        }
        Object.entries(message.battleCombos).forEach(([key, value]) => {
          exports.WebcastLinkMicBattle_BattleCombosEntry.encode({ key, value }, writer.uint32(106).fork()).join();
        });
        for (const v of message.teamUsers) {
          exports.WebcastLinkMicBattle_TeamUsersInfo.encode(v, writer.uint32(114).fork()).join();
        }
        for (const v of message.inviteeGiftPermissionTypes) {
          exports.WebcastLinkMicBattle_BattleInviteeGiftPermission.encode(v, writer.uint32(122).fork()).join();
        }
        if (message.actionByUserId !== "0") {
          writer.uint32(128).int64(message.actionByUserId);
        }
        for (const v of message.teamBattleResult) {
          exports.WebcastLinkMicBattle_BattleTeamResult.encode(v, writer.uint32(138).fork()).join();
        }
        for (const v of message.teamArmies) {
          exports.BattleTeamUserArmies.encode(v, writer.uint32(146).fork()).join();
        }
        for (const v of message.abtestSettings) {
          exports.WebcastLinkMicBattle_BattleABTestSetting.encode(v, writer.uint32(154).fork()).join();
        }
        if (message.teamMatchCampaign !== void 0) {
          exports.WebcastLinkMicBattle_TeamMatchCampaign.encode(message.teamMatchCampaign, writer.uint32(162).fork()).join();
        }
        if (message.fuzzyDisplayConfigV2 !== void 0) {
          exports.HighScoreControlCfg.encode(message.fuzzyDisplayConfigV2, writer.uint32(170).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.battleId = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.battleSetting = exports.BattleSetting.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.action = reader.int32();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              const entry5 = exports.WebcastLinkMicBattle_BattleResultEntry.decode(reader, reader.uint32());
              if (entry5.value !== void 0) {
                message.battleResult[entry5.key] = entry5.value;
              }
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.mBattleDisplayConfig = exports.WebcastLinkMicBattle_BattleDisplayConfig.decode(reader, reader.uint32());
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.inviteeGiftPermissionType = reader.int32();
              continue;
            }
            case 9: {
              if (tag !== 74) {
                break;
              }
              const entry9 = exports.WebcastLinkMicBattle_ArmiesEntry.decode(reader, reader.uint32());
              if (entry9.value !== void 0) {
                message.armies[entry9.key] = entry9.value;
              }
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              const entry10 = exports.WebcastLinkMicBattle_AnchorInfoEntry.decode(reader, reader.uint32());
              if (entry10.value !== void 0) {
                message.anchorInfo[entry10.key] = entry10.value;
              }
              continue;
            }
            case 11: {
              if (tag !== 90) {
                break;
              }
              message.bubbleText = reader.string();
              continue;
            }
            case 12: {
              if (tag !== 98) {
                break;
              }
              message.supportedActions.push(exports.WebcastLinkMicBattle_SupportedActionsWrapper.decode(reader, reader.uint32()));
              continue;
            }
            case 13: {
              if (tag !== 106) {
                break;
              }
              const entry13 = exports.WebcastLinkMicBattle_BattleCombosEntry.decode(reader, reader.uint32());
              if (entry13.value !== void 0) {
                message.battleCombos[entry13.key] = entry13.value;
              }
              continue;
            }
            case 14: {
              if (tag !== 114) {
                break;
              }
              message.teamUsers.push(exports.WebcastLinkMicBattle_TeamUsersInfo.decode(reader, reader.uint32()));
              continue;
            }
            case 15: {
              if (tag !== 122) {
                break;
              }
              message.inviteeGiftPermissionTypes.push(exports.WebcastLinkMicBattle_BattleInviteeGiftPermission.decode(reader, reader.uint32()));
              continue;
            }
            case 16: {
              if (tag !== 128) {
                break;
              }
              message.actionByUserId = reader.int64().toString();
              continue;
            }
            case 17: {
              if (tag !== 138) {
                break;
              }
              message.teamBattleResult.push(exports.WebcastLinkMicBattle_BattleTeamResult.decode(reader, reader.uint32()));
              continue;
            }
            case 18: {
              if (tag !== 146) {
                break;
              }
              message.teamArmies.push(exports.BattleTeamUserArmies.decode(reader, reader.uint32()));
              continue;
            }
            case 19: {
              if (tag !== 154) {
                break;
              }
              message.abtestSettings.push(exports.WebcastLinkMicBattle_BattleABTestSetting.decode(reader, reader.uint32()));
              continue;
            }
            case 20: {
              if (tag !== 162) {
                break;
              }
              message.teamMatchCampaign = exports.WebcastLinkMicBattle_TeamMatchCampaign.decode(reader, reader.uint32());
              continue;
            }
            case 21: {
              if (tag !== 170) {
                break;
              }
              message.fuzzyDisplayConfigV2 = exports.HighScoreControlCfg.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicBattle_BattleResultEntry() {
      return { key: "0", value: void 0 };
    }
    exports.WebcastLinkMicBattle_BattleResultEntry = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "0") {
          writer.uint32(8).int64(message.key);
        }
        if (message.value !== void 0) {
          exports.WebcastLinkMicBattle_BattleResult.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleResultEntry();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.key = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.value = exports.WebcastLinkMicBattle_BattleResult.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicBattle_ArmiesEntry() {
      return { key: "0", value: void 0 };
    }
    exports.WebcastLinkMicBattle_ArmiesEntry = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "0") {
          writer.uint32(8).int64(message.key);
        }
        if (message.value !== void 0) {
          exports.BattleUserArmies.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_ArmiesEntry();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.key = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.value = exports.BattleUserArmies.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicBattle_AnchorInfoEntry() {
      return { key: "0", value: void 0 };
    }
    exports.WebcastLinkMicBattle_AnchorInfoEntry = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "0") {
          writer.uint32(8).int64(message.key);
        }
        if (message.value !== void 0) {
          exports.WebcastLinkMicBattle_BattleUserInfo.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_AnchorInfoEntry();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.key = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.value = exports.WebcastLinkMicBattle_BattleUserInfo.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicBattle_BattleCombosEntry() {
      return { key: "0", value: void 0 };
    }
    exports.WebcastLinkMicBattle_BattleCombosEntry = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "0") {
          writer.uint32(8).int64(message.key);
        }
        if (message.value !== void 0) {
          exports.WebcastLinkMicBattle_BattleComboInfo.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleCombosEntry();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.key = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.value = exports.WebcastLinkMicBattle_BattleComboInfo.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicBattle_TeamMatchCampaign() {
      return { bestTeammateRelation: [], startSfxTeamId: [], hasTeamMatchMvpSfx: false };
    }
    exports.WebcastLinkMicBattle_TeamMatchCampaign = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.bestTeammateRelation) {
          exports.WebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelation.encode(v, writer.uint32(10).fork()).join();
        }
        writer.uint32(18).fork();
        for (const v of message.startSfxTeamId) {
          writer.int64(v);
        }
        writer.join();
        if (message.hasTeamMatchMvpSfx !== false) {
          writer.uint32(24).bool(message.hasTeamMatchMvpSfx);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_TeamMatchCampaign();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.bestTeammateRelation.push(exports.WebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelation.decode(reader, reader.uint32()));
              continue;
            }
            case 2: {
              if (tag === 16) {
                message.startSfxTeamId.push(reader.int64().toString());
                continue;
              }
              if (tag === 18) {
                const end2 = reader.uint32() + reader.pos;
                while (reader.pos < end2) {
                  message.startSfxTeamId.push(reader.int64().toString());
                }
                continue;
              }
              break;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.hasTeamMatchMvpSfx = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelation() {
      return { userId: "0", bestTeammateId: "0" };
    }
    exports.WebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelation = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
          writer.uint32(8).int64(message.userId);
        }
        if (message.bestTeammateId !== "0") {
          writer.uint32(16).int64(message.bestTeammateId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelation();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.userId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.bestTeammateId = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicBattle_BattleTeamResult() {
      return { teamId: "0", teamUsers: [], result: 0, totalScore: "0" };
    }
    exports.WebcastLinkMicBattle_BattleTeamResult = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.teamId !== "0") {
          writer.uint32(8).int64(message.teamId);
        }
        for (const v of message.teamUsers) {
          exports.BattleTeamUser.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.result !== 0) {
          writer.uint32(24).int32(message.result);
        }
        if (message.totalScore !== "0") {
          writer.uint32(32).int64(message.totalScore);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleTeamResult();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.teamId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.teamUsers.push(exports.BattleTeamUser.decode(reader, reader.uint32()));
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.result = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.totalScore = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicBattle_BattleInviteeGiftPermission() {
      return { userId: "0", giftPermissionType: 0 };
    }
    exports.WebcastLinkMicBattle_BattleInviteeGiftPermission = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
          writer.uint32(8).int64(message.userId);
        }
        if (message.giftPermissionType !== 0) {
          writer.uint32(16).int32(message.giftPermissionType);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleInviteeGiftPermission();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.userId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.giftPermissionType = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicBattle_SupportedActionsWrapper() {
      return { actionType: "0" };
    }
    exports.WebcastLinkMicBattle_SupportedActionsWrapper = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.actionType !== "0") {
          writer.uint32(8).int64(message.actionType);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_SupportedActionsWrapper();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.actionType = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicBattle_TeamUsersInfo() {
      return { teamId: "0", userIds: [] };
    }
    exports.WebcastLinkMicBattle_TeamUsersInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.teamId !== "0") {
          writer.uint32(8).int64(message.teamId);
        }
        writer.uint32(18).fork();
        for (const v of message.userIds) {
          writer.int64(v);
        }
        writer.join();
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_TeamUsersInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.teamId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag === 16) {
                message.userIds.push(reader.int64().toString());
                continue;
              }
              if (tag === 18) {
                const end2 = reader.uint32() + reader.pos;
                while (reader.pos < end2) {
                  message.userIds.push(reader.int64().toString());
                }
                continue;
              }
              break;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicBattle_BattleComboInfo() {
      return { userId: "0", comboStatus: "0", comboCount: "0", comboIconUrl: "", comboType: 0, comboRuleGuideSchema: "" };
    }
    exports.WebcastLinkMicBattle_BattleComboInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
          writer.uint32(8).int64(message.userId);
        }
        if (message.comboStatus !== "0") {
          writer.uint32(16).int64(message.comboStatus);
        }
        if (message.comboCount !== "0") {
          writer.uint32(24).int64(message.comboCount);
        }
        if (message.comboIconUrl !== "") {
          writer.uint32(34).string(message.comboIconUrl);
        }
        if (message.comboType !== 0) {
          writer.uint32(40).int32(message.comboType);
        }
        if (message.comboRuleGuideSchema !== "") {
          writer.uint32(50).string(message.comboRuleGuideSchema);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleComboInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.userId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.comboStatus = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.comboCount = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.comboIconUrl = reader.string();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.comboType = reader.int32();
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.comboRuleGuideSchema = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicBattle_BattleResult() {
      return { userId: "0", result: 0, score: "0" };
    }
    exports.WebcastLinkMicBattle_BattleResult = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
          writer.uint32(8).int64(message.userId);
        }
        if (message.result !== 0) {
          writer.uint32(16).int32(message.result);
        }
        if (message.score !== "0") {
          writer.uint32(24).int64(message.score);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleResult();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.userId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.result = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.score = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicBattle_BattleDisplayConfig() {
      return { threshold: 0, text: "", diffThreshold: 0, diffText: "", exemptStrategy: void 0 };
    }
    exports.WebcastLinkMicBattle_BattleDisplayConfig = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.threshold !== 0) {
          writer.uint32(8).int32(message.threshold);
        }
        if (message.text !== "") {
          writer.uint32(18).string(message.text);
        }
        if (message.diffThreshold !== 0) {
          writer.uint32(24).int32(message.diffThreshold);
        }
        if (message.diffText !== "") {
          writer.uint32(34).string(message.diffText);
        }
        if (message.exemptStrategy !== void 0) {
          exports.WebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategy.encode(message.exemptStrategy, writer.uint32(42).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleDisplayConfig();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.threshold = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.text = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.diffThreshold = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.diffText = reader.string();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.exemptStrategy = exports.WebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategy.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategy() {
      return { exemptBothHost: false, exemptAudienceTop: 0 };
    }
    exports.WebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategy = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.exemptBothHost !== false) {
          writer.uint32(8).bool(message.exemptBothHost);
        }
        if (message.exemptAudienceTop !== 0) {
          writer.uint32(16).int32(message.exemptAudienceTop);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategy();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.exemptBothHost = reader.bool();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.exemptAudienceTop = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicBattle_BattleUserInfo() {
      return { user: void 0, tags: [] };
    }
    exports.WebcastLinkMicBattle_BattleUserInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.user !== void 0) {
          exports.WebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfo.encode(message.user, writer.uint32(10).fork()).join();
        }
        for (const v of message.tags) {
          exports.WebcastLinkMicBattle_BattleUserInfo_BattleRivalTag.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleUserInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.user = exports.WebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfo.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.tags.push(exports.WebcastLinkMicBattle_BattleUserInfo_BattleRivalTag.decode(reader, reader.uint32()));
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfo() {
      return { userId: "0", nickName: "", avatarThumb: void 0, displayId: "" };
    }
    exports.WebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
          writer.uint32(8).int64(message.userId);
        }
        if (message.nickName !== "") {
          writer.uint32(18).string(message.nickName);
        }
        if (message.avatarThumb !== void 0) {
          exports.Image.encode(message.avatarThumb, writer.uint32(26).fork()).join();
        }
        if (message.displayId !== "") {
          writer.uint32(34).string(message.displayId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.userId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.nickName = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.avatarThumb = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.displayId = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicBattle_BattleUserInfo_BattleRivalTag() {
      return { bgImage: void 0, iconImage: void 0, content: "" };
    }
    exports.WebcastLinkMicBattle_BattleUserInfo_BattleRivalTag = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.bgImage !== void 0) {
          exports.Image.encode(message.bgImage, writer.uint32(10).fork()).join();
        }
        if (message.iconImage !== void 0) {
          exports.Image.encode(message.iconImage, writer.uint32(18).fork()).join();
        }
        if (message.content !== "") {
          writer.uint32(26).string(message.content);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleUserInfo_BattleRivalTag();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.bgImage = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.iconImage = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.content = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicBattle_BattleABTestSetting() {
      return { uid: "0", abTestList: void 0 };
    }
    exports.WebcastLinkMicBattle_BattleABTestSetting = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.uid !== "0") {
          writer.uint32(8).int64(message.uid);
        }
        if (message.abTestList !== void 0) {
          exports.WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList.encode(message.abTestList, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleABTestSetting();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.uid = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.abTestList = exports.WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicBattle_BattleABTestSetting_BattleABTestList() {
      return { abTestList: [] };
    }
    exports.WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.abTestList) {
          exports.WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTest.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleABTestSetting_BattleABTestList();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.abTestList.push(exports.WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTest.decode(reader, reader.uint32()));
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTest() {
      return { abTestType: 0, group: 0 };
    }
    exports.WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTest = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.abTestType !== 0) {
          writer.uint32(8).int32(message.abTestType);
        }
        if (message.group !== 0) {
          writer.uint32(16).int32(message.group);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTest();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.abTestType = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.group = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicArmies() {
      return {
        common: void 0,
        battleId: "0",
        battleItems: {},
        channelId: "0",
        giftSentTime: "0",
        scoreUpdateTime: "0",
        battleStatus: 0,
        fromUserId: "0",
        giftId: "0",
        giftCount: 0,
        gifIconImage: void 0,
        totalDiamondCount: 0,
        repeatCount: 0,
        teamArmies: [],
        triggerCriticalStrike: false,
        hasTeamMatchMvpSfx: false,
        logId: "",
        battleSettings: void 0,
        fuzzyDisplayConfigV2: void 0
      };
    }
    exports.WebcastLinkMicArmies = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.battleId !== "0") {
          writer.uint32(16).int64(message.battleId);
        }
        Object.entries(message.battleItems).forEach(([key, value]) => {
          exports.WebcastLinkMicArmies_BattleItemsEntry.encode({ key, value }, writer.uint32(26).fork()).join();
        });
        if (message.channelId !== "0") {
          writer.uint32(32).int64(message.channelId);
        }
        if (message.giftSentTime !== "0") {
          writer.uint32(40).int64(message.giftSentTime);
        }
        if (message.scoreUpdateTime !== "0") {
          writer.uint32(48).int64(message.scoreUpdateTime);
        }
        if (message.battleStatus !== 0) {
          writer.uint32(56).int32(message.battleStatus);
        }
        if (message.fromUserId !== "0") {
          writer.uint32(64).int64(message.fromUserId);
        }
        if (message.giftId !== "0") {
          writer.uint32(72).int64(message.giftId);
        }
        if (message.giftCount !== 0) {
          writer.uint32(80).int32(message.giftCount);
        }
        if (message.gifIconImage !== void 0) {
          exports.Image.encode(message.gifIconImage, writer.uint32(90).fork()).join();
        }
        if (message.totalDiamondCount !== 0) {
          writer.uint32(96).int32(message.totalDiamondCount);
        }
        if (message.repeatCount !== 0) {
          writer.uint32(104).int32(message.repeatCount);
        }
        for (const v of message.teamArmies) {
          exports.BattleTeamUserArmies.encode(v, writer.uint32(114).fork()).join();
        }
        if (message.triggerCriticalStrike !== false) {
          writer.uint32(120).bool(message.triggerCriticalStrike);
        }
        if (message.hasTeamMatchMvpSfx !== false) {
          writer.uint32(128).bool(message.hasTeamMatchMvpSfx);
        }
        if (message.logId !== "") {
          writer.uint32(138).string(message.logId);
        }
        if (message.battleSettings !== void 0) {
          exports.BattleSetting.encode(message.battleSettings, writer.uint32(146).fork()).join();
        }
        if (message.fuzzyDisplayConfigV2 !== void 0) {
          exports.HighScoreControlCfg.encode(message.fuzzyDisplayConfigV2, writer.uint32(154).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicArmies();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.battleId = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              const entry3 = exports.WebcastLinkMicArmies_BattleItemsEntry.decode(reader, reader.uint32());
              if (entry3.value !== void 0) {
                message.battleItems[entry3.key] = entry3.value;
              }
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.channelId = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.giftSentTime = reader.int64().toString();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.scoreUpdateTime = reader.int64().toString();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.battleStatus = reader.int32();
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.fromUserId = reader.int64().toString();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.giftId = reader.int64().toString();
              continue;
            }
            case 10: {
              if (tag !== 80) {
                break;
              }
              message.giftCount = reader.int32();
              continue;
            }
            case 11: {
              if (tag !== 90) {
                break;
              }
              message.gifIconImage = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 12: {
              if (tag !== 96) {
                break;
              }
              message.totalDiamondCount = reader.int32();
              continue;
            }
            case 13: {
              if (tag !== 104) {
                break;
              }
              message.repeatCount = reader.int32();
              continue;
            }
            case 14: {
              if (tag !== 114) {
                break;
              }
              message.teamArmies.push(exports.BattleTeamUserArmies.decode(reader, reader.uint32()));
              continue;
            }
            case 15: {
              if (tag !== 120) {
                break;
              }
              message.triggerCriticalStrike = reader.bool();
              continue;
            }
            case 16: {
              if (tag !== 128) {
                break;
              }
              message.hasTeamMatchMvpSfx = reader.bool();
              continue;
            }
            case 17: {
              if (tag !== 138) {
                break;
              }
              message.logId = reader.string();
              continue;
            }
            case 18: {
              if (tag !== 146) {
                break;
              }
              message.battleSettings = exports.BattleSetting.decode(reader, reader.uint32());
              continue;
            }
            case 19: {
              if (tag !== 154) {
                break;
              }
              message.fuzzyDisplayConfigV2 = exports.HighScoreControlCfg.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicArmies_BattleItemsEntry() {
      return { key: "0", value: void 0 };
    }
    exports.WebcastLinkMicArmies_BattleItemsEntry = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "0") {
          writer.uint32(8).int64(message.key);
        }
        if (message.value !== void 0) {
          exports.BattleUserArmies.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicArmies_BattleItemsEntry();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.key = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.value = exports.BattleUserArmies.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicArmiesItems() {
      return { hostUserId: "0", battleGroups: [] };
    }
    exports.WebcastLinkMicArmiesItems = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.hostUserId !== "0") {
          writer.uint32(8).uint64(message.hostUserId);
        }
        for (const v of message.battleGroups) {
          exports.WebcastLinkMicArmiesGroup.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicArmiesItems();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.hostUserId = reader.uint64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.battleGroups.push(exports.WebcastLinkMicArmiesGroup.decode(reader, reader.uint32()));
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicArmiesGroup() {
      return { users: [], points: 0 };
    }
    exports.WebcastLinkMicArmiesGroup = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.users) {
          exports.User.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.points !== 0) {
          writer.uint32(16).int32(message.points);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicArmiesGroup();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.users.push(exports.User.decode(reader, reader.uint32()));
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.points = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastSocialMessage() {
      return {
        common: void 0,
        user: void 0,
        shareType: "0",
        action: "0",
        shareTarget: "",
        followCount: 0,
        shareDisplayStyle: "0",
        shareCount: 0,
        publicAreaMessageCommon: void 0,
        signature: "",
        signatureVersion: "",
        showDurationMs: "0"
      };
    }
    exports.WebcastSocialMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.user !== void 0) {
          exports.User.encode(message.user, writer.uint32(18).fork()).join();
        }
        if (message.shareType !== "0") {
          writer.uint32(24).int64(message.shareType);
        }
        if (message.action !== "0") {
          writer.uint32(32).int64(message.action);
        }
        if (message.shareTarget !== "") {
          writer.uint32(42).string(message.shareTarget);
        }
        if (message.followCount !== 0) {
          writer.uint32(48).int32(message.followCount);
        }
        if (message.shareDisplayStyle !== "0") {
          writer.uint32(56).int64(message.shareDisplayStyle);
        }
        if (message.shareCount !== 0) {
          writer.uint32(64).int32(message.shareCount);
        }
        if (message.publicAreaMessageCommon !== void 0) {
          exports.PublicAreaMessageCommon.encode(message.publicAreaMessageCommon, writer.uint32(74).fork()).join();
        }
        if (message.signature !== "") {
          writer.uint32(82).string(message.signature);
        }
        if (message.signatureVersion !== "") {
          writer.uint32(90).string(message.signatureVersion);
        }
        if (message.showDurationMs !== "0") {
          writer.uint32(96).int64(message.showDurationMs);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastSocialMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.user = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.shareType = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.action = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.shareTarget = reader.string();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.followCount = reader.int32();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.shareDisplayStyle = reader.int64().toString();
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.shareCount = reader.int32();
              continue;
            }
            case 9: {
              if (tag !== 74) {
                break;
              }
              message.publicAreaMessageCommon = exports.PublicAreaMessageCommon.decode(reader, reader.uint32());
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              message.signature = reader.string();
              continue;
            }
            case 11: {
              if (tag !== 90) {
                break;
              }
              message.signatureVersion = reader.string();
              continue;
            }
            case 12: {
              if (tag !== 96) {
                break;
              }
              message.showDurationMs = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLikeMessage() {
      return {
        common: void 0,
        likeCount: 0,
        totalLikeCount: 0,
        color: 0,
        user: void 0,
        icon: "",
        icons: [],
        specifiedDisplayText: [],
        effectCnt: "0",
        likeEffect: [],
        publicAreaMessageCommon: void 0,
        roomMessageHeatLevel: "0"
      };
    }
    exports.WebcastLikeMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.likeCount !== 0) {
          writer.uint32(16).int32(message.likeCount);
        }
        if (message.totalLikeCount !== 0) {
          writer.uint32(24).int32(message.totalLikeCount);
        }
        if (message.color !== 0) {
          writer.uint32(32).int32(message.color);
        }
        if (message.user !== void 0) {
          exports.User.encode(message.user, writer.uint32(42).fork()).join();
        }
        if (message.icon !== "") {
          writer.uint32(50).string(message.icon);
        }
        for (const v of message.icons) {
          exports.Image.encode(v, writer.uint32(58).fork()).join();
        }
        for (const v of message.specifiedDisplayText) {
          exports.SpecifiedDisplayText.encode(v, writer.uint32(66).fork()).join();
        }
        if (message.effectCnt !== "0") {
          writer.uint32(72).int64(message.effectCnt);
        }
        for (const v of message.likeEffect) {
          exports.LikeEffect.encode(v, writer.uint32(82).fork()).join();
        }
        if (message.publicAreaMessageCommon !== void 0) {
          exports.PublicAreaMessageCommon.encode(message.publicAreaMessageCommon, writer.uint32(90).fork()).join();
        }
        if (message.roomMessageHeatLevel !== "0") {
          writer.uint32(96).int64(message.roomMessageHeatLevel);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLikeMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.likeCount = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.totalLikeCount = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.color = reader.int32();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.user = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.icon = reader.string();
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.icons.push(exports.Image.decode(reader, reader.uint32()));
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.specifiedDisplayText.push(exports.SpecifiedDisplayText.decode(reader, reader.uint32()));
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.effectCnt = reader.int64().toString();
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              message.likeEffect.push(exports.LikeEffect.decode(reader, reader.uint32()));
              continue;
            }
            case 11: {
              if (tag !== 90) {
                break;
              }
              message.publicAreaMessageCommon = exports.PublicAreaMessageCommon.decode(reader, reader.uint32());
              continue;
            }
            case 12: {
              if (tag !== 96) {
                break;
              }
              message.roomMessageHeatLevel = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseSpecifiedDisplayText() {
      return { uid: "0", displayText: void 0 };
    }
    exports.SpecifiedDisplayText = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.uid !== "0") {
          writer.uint32(8).int64(message.uid);
        }
        if (message.displayText !== void 0) {
          exports.Text.encode(message.displayText, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseSpecifiedDisplayText();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.uid = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.displayText = exports.Text.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseLikeEffect() {
      return { version: "0", effectCnt: "0", effectIntervalMs: "0", level: "0" };
    }
    exports.LikeEffect = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.version !== "0") {
          writer.uint32(8).int64(message.version);
        }
        if (message.effectCnt !== "0") {
          writer.uint32(16).int64(message.effectCnt);
        }
        if (message.effectIntervalMs !== "0") {
          writer.uint32(24).int64(message.effectIntervalMs);
        }
        if (message.level !== "0") {
          writer.uint32(32).int64(message.level);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseLikeEffect();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.version = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.effectCnt = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.effectIntervalMs = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.level = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastQuestionNewMessage() {
      return { common: void 0, details: void 0 };
    }
    exports.WebcastQuestionNewMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.details !== void 0) {
          exports.WebcastQuestionNewMessage_Question.encode(message.details, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastQuestionNewMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.details = exports.WebcastQuestionNewMessage_Question.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastQuestionNewMessage_Question() {
      return {
        questionId: "0",
        questionText: "",
        answerStatus: 0,
        createTime: "0",
        user: void 0,
        createFrom: 0,
        answerFrom: 0
      };
    }
    exports.WebcastQuestionNewMessage_Question = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.questionId !== "0") {
          writer.uint32(8).int64(message.questionId);
        }
        if (message.questionText !== "") {
          writer.uint32(18).string(message.questionText);
        }
        if (message.answerStatus !== 0) {
          writer.uint32(24).int32(message.answerStatus);
        }
        if (message.createTime !== "0") {
          writer.uint32(32).int64(message.createTime);
        }
        if (message.user !== void 0) {
          exports.User.encode(message.user, writer.uint32(42).fork()).join();
        }
        if (message.createFrom !== 0) {
          writer.uint32(160).int32(message.createFrom);
        }
        if (message.answerFrom !== 0) {
          writer.uint32(168).int32(message.answerFrom);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastQuestionNewMessage_Question();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.questionId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.questionText = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.answerStatus = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.createTime = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.user = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 20: {
              if (tag !== 160) {
                break;
              }
              message.createFrom = reader.int32();
              continue;
            }
            case 21: {
              if (tag !== 168) {
                break;
              }
              message.answerFrom = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastMessageEventDetails() {
      return { displayType: "", label: "" };
    }
    exports.WebcastMessageEventDetails = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.displayType !== "") {
          writer.uint32(10).string(message.displayType);
        }
        if (message.label !== "") {
          writer.uint32(18).string(message.label);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastMessageEventDetails();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.displayType = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.label = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLiveIntroMessage() {
      return {
        common: void 0,
        roomId: "0",
        auditStatus: 0,
        description: "",
        host: void 0,
        introMode: 0,
        badges: [],
        language: ""
      };
    }
    exports.WebcastLiveIntroMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.roomId !== "0") {
          writer.uint32(16).int64(message.roomId);
        }
        if (message.auditStatus !== 0) {
          writer.uint32(24).int32(message.auditStatus);
        }
        if (message.description !== "") {
          writer.uint32(34).string(message.description);
        }
        if (message.host !== void 0) {
          exports.User.encode(message.host, writer.uint32(42).fork()).join();
        }
        if (message.introMode !== 0) {
          writer.uint32(48).int32(message.introMode);
        }
        for (const v of message.badges) {
          exports.BadgeStruct.encode(v, writer.uint32(58).fork()).join();
        }
        if (message.language !== "") {
          writer.uint32(66).string(message.language);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLiveIntroMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.roomId = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.auditStatus = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.description = reader.string();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.host = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.introMode = reader.int32();
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.badges.push(exports.BadgeStruct.decode(reader, reader.uint32()));
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.language = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseSystemMessage() {
      return { description: "" };
    }
    exports.SystemMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.description !== "") {
          writer.uint32(18).string(message.description);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseSystemMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.description = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseRankItem() {
      return { colour: "", id: "0" };
    }
    exports.RankItem = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.colour !== "") {
          writer.uint32(10).string(message.colour);
        }
        if (message.id !== "0") {
          writer.uint32(32).uint64(message.id);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseRankItem();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.colour = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.id = reader.uint64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastHourlyRankMessage() {
      return { data: void 0, common: void 0, data2: 0 };
    }
    exports.WebcastHourlyRankMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.data !== void 0) {
          exports.WebcastHourlyRankMessage_RankContainer.encode(message.data, writer.uint32(18).fork()).join();
        }
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.data2 !== 0) {
          writer.uint32(24).uint32(message.data2);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastHourlyRankMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.data = exports.WebcastHourlyRankMessage_RankContainer.decode(reader, reader.uint32());
              continue;
            }
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.data2 = reader.uint32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastHourlyRankMessage_RankContainer() {
      return {
        data1: 0,
        rankingData: void 0,
        data2: 0,
        rankings: void 0,
        rankingData2: void 0,
        data3: 0,
        data4: 0
      };
    }
    exports.WebcastHourlyRankMessage_RankContainer = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.data1 !== 0) {
          writer.uint32(8).uint32(message.data1);
        }
        if (message.rankingData !== void 0) {
          exports.WebcastHourlyRankMessage_RankContainer_RankingData.encode(message.rankingData, writer.uint32(18).fork()).join();
        }
        if (message.data2 !== 0) {
          writer.uint32(24).uint32(message.data2);
        }
        if (message.rankings !== void 0) {
          exports.Ranking.encode(message.rankings, writer.uint32(34).fork()).join();
        }
        if (message.rankingData2 !== void 0) {
          exports.WebcastHourlyRankMessage_RankContainer_RankingData2.encode(message.rankingData2, writer.uint32(42).fork()).join();
        }
        if (message.data3 !== 0) {
          writer.uint32(48).uint32(message.data3);
        }
        if (message.data4 !== 0) {
          writer.uint32(56).uint32(message.data4);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastHourlyRankMessage_RankContainer();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.data1 = reader.uint32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.rankingData = exports.WebcastHourlyRankMessage_RankContainer_RankingData.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.data2 = reader.uint32();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.rankings = exports.Ranking.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.rankingData2 = exports.WebcastHourlyRankMessage_RankContainer_RankingData2.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.data3 = reader.uint32();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.data4 = reader.uint32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastHourlyRankMessage_RankContainer_RankingData() {
      return { data1: 0, rankdata: void 0, data2: "" };
    }
    exports.WebcastHourlyRankMessage_RankContainer_RankingData = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.data1 !== 0) {
          writer.uint32(8).uint32(message.data1);
        }
        if (message.rankdata !== void 0) {
          exports.Ranking.encode(message.rankdata, writer.uint32(18).fork()).join();
        }
        if (message.data2 !== "") {
          writer.uint32(26).string(message.data2);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastHourlyRankMessage_RankContainer_RankingData();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.data1 = reader.uint32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.rankdata = exports.Ranking.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.data2 = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastHourlyRankMessage_RankContainer_RankingData2() {
      return { data1: 0, data2: 0, rankdata: void 0, data3: "", data4: 0, data5: 0 };
    }
    exports.WebcastHourlyRankMessage_RankContainer_RankingData2 = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.data1 !== 0) {
          writer.uint32(8).uint32(message.data1);
        }
        if (message.data2 !== 0) {
          writer.uint32(16).uint32(message.data2);
        }
        if (message.rankdata !== void 0) {
          exports.Ranking.encode(message.rankdata, writer.uint32(26).fork()).join();
        }
        if (message.data3 !== "") {
          writer.uint32(34).string(message.data3);
        }
        if (message.data4 !== 0) {
          writer.uint32(40).uint32(message.data4);
        }
        if (message.data5 !== 0) {
          writer.uint32(48).uint32(message.data5);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastHourlyRankMessage_RankContainer_RankingData2();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.data1 = reader.uint32();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.data2 = reader.uint32();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.rankdata = exports.Ranking.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.data3 = reader.string();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.data4 = reader.uint32();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.data5 = reader.uint32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseEmoteDetails() {
      return { emoteId: "", image: void 0 };
    }
    exports.EmoteDetails = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.emoteId !== "") {
          writer.uint32(10).string(message.emoteId);
        }
        if (message.image !== void 0) {
          exports.EmoteImage.encode(message.image, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseEmoteDetails();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.emoteId = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.image = exports.EmoteImage.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseEmoteImage() {
      return { imageUrl: "" };
    }
    exports.EmoteImage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.imageUrl !== "") {
          writer.uint32(10).string(message.imageUrl);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseEmoteImage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.imageUrl = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastEnvelopeMessage() {
      return { common: void 0, envelopeInfo: void 0, display: 0 };
    }
    exports.WebcastEnvelopeMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.envelopeInfo !== void 0) {
          exports.WebcastEnvelopeMessage_EnvelopeInfo.encode(message.envelopeInfo, writer.uint32(18).fork()).join();
        }
        if (message.display !== 0) {
          writer.uint32(24).int32(message.display);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastEnvelopeMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.envelopeInfo = exports.WebcastEnvelopeMessage_EnvelopeInfo.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.display = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastEnvelopeMessage_EnvelopeInfo() {
      return {
        envelopeId: "",
        businessType: 0,
        envelopeIdc: "",
        sendUserName: "",
        diamondCount: 0,
        peopleCount: 0,
        unpackAt: 0,
        sendUserId: "",
        sendUserAvatar: void 0,
        createAt: "",
        roomId: "",
        followShowStatus: 0,
        skinId: 0
      };
    }
    exports.WebcastEnvelopeMessage_EnvelopeInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.envelopeId !== "") {
          writer.uint32(10).string(message.envelopeId);
        }
        if (message.businessType !== 0) {
          writer.uint32(16).int32(message.businessType);
        }
        if (message.envelopeIdc !== "") {
          writer.uint32(26).string(message.envelopeIdc);
        }
        if (message.sendUserName !== "") {
          writer.uint32(34).string(message.sendUserName);
        }
        if (message.diamondCount !== 0) {
          writer.uint32(40).int32(message.diamondCount);
        }
        if (message.peopleCount !== 0) {
          writer.uint32(48).int32(message.peopleCount);
        }
        if (message.unpackAt !== 0) {
          writer.uint32(56).int32(message.unpackAt);
        }
        if (message.sendUserId !== "") {
          writer.uint32(66).string(message.sendUserId);
        }
        if (message.sendUserAvatar !== void 0) {
          exports.Image.encode(message.sendUserAvatar, writer.uint32(74).fork()).join();
        }
        if (message.createAt !== "") {
          writer.uint32(82).string(message.createAt);
        }
        if (message.roomId !== "") {
          writer.uint32(90).string(message.roomId);
        }
        if (message.followShowStatus !== 0) {
          writer.uint32(96).int32(message.followShowStatus);
        }
        if (message.skinId !== 0) {
          writer.uint32(104).int32(message.skinId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastEnvelopeMessage_EnvelopeInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.envelopeId = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.businessType = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.envelopeIdc = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.sendUserName = reader.string();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.diamondCount = reader.int32();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.peopleCount = reader.int32();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.unpackAt = reader.int32();
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.sendUserId = reader.string();
              continue;
            }
            case 9: {
              if (tag !== 74) {
                break;
              }
              message.sendUserAvatar = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              message.createAt = reader.string();
              continue;
            }
            case 11: {
              if (tag !== 90) {
                break;
              }
              message.roomId = reader.string();
              continue;
            }
            case 12: {
              if (tag !== 96) {
                break;
              }
              message.followShowStatus = reader.int32();
              continue;
            }
            case 13: {
              if (tag !== 104) {
                break;
              }
              message.skinId = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseTreasureBoxData() {
      return { coins: 0, canOpen: 0, timestamp: "0" };
    }
    exports.TreasureBoxData = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.coins !== 0) {
          writer.uint32(40).uint32(message.coins);
        }
        if (message.canOpen !== 0) {
          writer.uint32(48).uint32(message.canOpen);
        }
        if (message.timestamp !== "0") {
          writer.uint32(56).uint64(message.timestamp);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseTreasureBoxData();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.coins = reader.uint32();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.canOpen = reader.uint32();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.timestamp = reader.uint64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastSubNotifyMessage() {
      return {
        common: void 0,
        user: void 0,
        exhibitionType: 0,
        subMonth: "0",
        subscribeType: 0,
        oldSubscribeStatus: 0,
        subscribeMessageType: void 0,
        subscribingStatus: 0,
        isSend: false,
        isCustom: false,
        giftSource: 0,
        messageDisplayStyle: 0,
        publicAreaMessageCommon: void 0,
        packageId: "",
        eventTracking: void 0
      };
    }
    exports.WebcastSubNotifyMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.user !== void 0) {
          exports.User.encode(message.user, writer.uint32(18).fork()).join();
        }
        if (message.exhibitionType !== 0) {
          writer.uint32(24).int32(message.exhibitionType);
        }
        if (message.subMonth !== "0") {
          writer.uint32(32).int64(message.subMonth);
        }
        if (message.subscribeType !== 0) {
          writer.uint32(40).int32(message.subscribeType);
        }
        if (message.oldSubscribeStatus !== 0) {
          writer.uint32(48).int32(message.oldSubscribeStatus);
        }
        if (message.subscribeMessageType !== void 0) {
          writer.uint32(56).int32(message.subscribeMessageType);
        }
        if (message.subscribingStatus !== 0) {
          writer.uint32(64).int32(message.subscribingStatus);
        }
        if (message.isSend !== false) {
          writer.uint32(72).bool(message.isSend);
        }
        if (message.isCustom !== false) {
          writer.uint32(80).bool(message.isCustom);
        }
        if (message.giftSource !== 0) {
          writer.uint32(88).int32(message.giftSource);
        }
        if (message.messageDisplayStyle !== 0) {
          writer.uint32(96).int32(message.messageDisplayStyle);
        }
        if (message.publicAreaMessageCommon !== void 0) {
          exports.PublicAreaMessageCommon.encode(message.publicAreaMessageCommon, writer.uint32(106).fork()).join();
        }
        if (message.packageId !== "") {
          writer.uint32(114).string(message.packageId);
        }
        if (message.eventTracking !== void 0) {
          exports.WebcastSubNotifyMessage_EventTracking.encode(message.eventTracking, writer.uint32(122).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastSubNotifyMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.user = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.exhibitionType = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.subMonth = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.subscribeType = reader.int32();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.oldSubscribeStatus = reader.int32();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.subscribeMessageType = reader.int32();
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.subscribingStatus = reader.int32();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.isSend = reader.bool();
              continue;
            }
            case 10: {
              if (tag !== 80) {
                break;
              }
              message.isCustom = reader.bool();
              continue;
            }
            case 11: {
              if (tag !== 88) {
                break;
              }
              message.giftSource = reader.int32();
              continue;
            }
            case 12: {
              if (tag !== 96) {
                break;
              }
              message.messageDisplayStyle = reader.int32();
              continue;
            }
            case 13: {
              if (tag !== 106) {
                break;
              }
              message.publicAreaMessageCommon = exports.PublicAreaMessageCommon.decode(reader, reader.uint32());
              continue;
            }
            case 14: {
              if (tag !== 114) {
                break;
              }
              message.packageId = reader.string();
              continue;
            }
            case 15: {
              if (tag !== 122) {
                break;
              }
              message.eventTracking = exports.WebcastSubNotifyMessage_EventTracking.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastSubNotifyMessage_EventTracking() {
      return { giftSubSenderId: "0", giftSubReceiverId: "0", anchorId: "0", giftSubOrderCreateTime: "0" };
    }
    exports.WebcastSubNotifyMessage_EventTracking = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.giftSubSenderId !== "0") {
          writer.uint32(8).int64(message.giftSubSenderId);
        }
        if (message.giftSubReceiverId !== "0") {
          writer.uint32(16).int64(message.giftSubReceiverId);
        }
        if (message.anchorId !== "0") {
          writer.uint32(24).int64(message.anchorId);
        }
        if (message.giftSubOrderCreateTime !== "0") {
          writer.uint32(32).int64(message.giftSubOrderCreateTime);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastSubNotifyMessage_EventTracking();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.giftSubSenderId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.giftSubReceiverId = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.anchorId = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.giftSubOrderCreateTime = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseFollowInfo() {
      return { followingCount: 0, followerCount: 0, followStatus: 0, pushStatus: 0 };
    }
    exports.FollowInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.followingCount !== 0) {
          writer.uint32(8).int32(message.followingCount);
        }
        if (message.followerCount !== 0) {
          writer.uint32(16).int32(message.followerCount);
        }
        if (message.followStatus !== 0) {
          writer.uint32(24).int32(message.followStatus);
        }
        if (message.pushStatus !== 0) {
          writer.uint32(32).int32(message.pushStatus);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseFollowInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.followingCount = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.followerCount = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.followStatus = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.pushStatus = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseProfilePicture() {
      return { urls: [] };
    }
    exports.ProfilePicture = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.urls) {
          writer.uint32(10).string(v);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseProfilePicture();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.urls.push(reader.string());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUserBadgesAttributes() {
      return { badgeSceneType: 0, imageBadges: [], badges: [], privilegeLogExtra: void 0 };
    }
    exports.UserBadgesAttributes = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.badgeSceneType !== 0) {
          writer.uint32(24).int32(message.badgeSceneType);
        }
        for (const v of message.imageBadges) {
          exports.UserImageBadge.encode(v, writer.uint32(162).fork()).join();
        }
        for (const v of message.badges) {
          exports.UserBadge.encode(v, writer.uint32(170).fork()).join();
        }
        if (message.privilegeLogExtra !== void 0) {
          exports.PrivilegeLogExtra.encode(message.privilegeLogExtra, writer.uint32(98).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUserBadgesAttributes();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.badgeSceneType = reader.int32();
              continue;
            }
            case 20: {
              if (tag !== 162) {
                break;
              }
              message.imageBadges.push(exports.UserImageBadge.decode(reader, reader.uint32()));
              continue;
            }
            case 21: {
              if (tag !== 170) {
                break;
              }
              message.badges.push(exports.UserBadge.decode(reader, reader.uint32()));
              continue;
            }
            case 12: {
              if (tag !== 98) {
                break;
              }
              message.privilegeLogExtra = exports.PrivilegeLogExtra.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUserBadge() {
      return { type: "", name: "" };
    }
    exports.UserBadge = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== "") {
          writer.uint32(18).string(message.type);
        }
        if (message.name !== "") {
          writer.uint32(26).string(message.name);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUserBadge();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.type = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.name = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUserImageBadge() {
      return { displayType: 0, image: void 0 };
    }
    exports.UserImageBadge = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.displayType !== 0) {
          writer.uint32(8).int32(message.displayType);
        }
        if (message.image !== void 0) {
          exports.UserImageBadgeImage.encode(message.image, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUserImageBadge();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.displayType = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.image = exports.UserImageBadgeImage.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseUserImageBadgeImage() {
      return { url: "" };
    }
    exports.UserImageBadgeImage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.url !== "") {
          writer.uint32(10).string(message.url);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseUserImageBadgeImage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.url = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastBarrageMessage() {
      return {
        common: void 0,
        event: void 0,
        msgType: void 0,
        icon: void 0,
        duration: "0",
        backGround: void 0,
        rightIcon: void 0,
        displayConfig: 0,
        galleryGiftId: "0",
        useMarquee: false,
        showType: void 0,
        renderType: void 0,
        leftIconDisplayType: void 0,
        ribbonAnimation: void 0,
        hybridUrl: "",
        schema: "",
        subType: "",
        privilegeLogExtra: void 0,
        content: void 0,
        scene: 0,
        control: void 0,
        rightLabel: void 0,
        badge: void 0,
        animationData: void 0,
        commonBarrageContent: void 0,
        userGradeParam: void 0,
        fansLevelParam: void 0,
        subscribeGiftParam: void 0,
        giftGalleryParams: void 0
      };
    }
    exports.WebcastBarrageMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.event !== void 0) {
          exports.WebcastBarrageMessage_BarrageEvent.encode(message.event, writer.uint32(18).fork()).join();
        }
        if (message.msgType !== void 0) {
          writer.uint32(24).int32(message.msgType);
        }
        if (message.icon !== void 0) {
          exports.ImageModel.encode(message.icon, writer.uint32(34).fork()).join();
        }
        if (message.duration !== "0") {
          writer.uint32(48).int64(message.duration);
        }
        if (message.backGround !== void 0) {
          exports.ImageModel.encode(message.backGround, writer.uint32(58).fork()).join();
        }
        if (message.rightIcon !== void 0) {
          exports.ImageModel.encode(message.rightIcon, writer.uint32(66).fork()).join();
        }
        if (message.displayConfig !== 0) {
          writer.uint32(72).int32(message.displayConfig);
        }
        if (message.galleryGiftId !== "0") {
          writer.uint32(80).int64(message.galleryGiftId);
        }
        if (message.useMarquee !== false) {
          writer.uint32(112).bool(message.useMarquee);
        }
        if (message.showType !== void 0) {
          writer.uint32(120).int32(message.showType);
        }
        if (message.renderType !== void 0) {
          writer.uint32(136).int32(message.renderType);
        }
        if (message.leftIconDisplayType !== void 0) {
          writer.uint32(144).int32(message.leftIconDisplayType);
        }
        if (message.ribbonAnimation !== void 0) {
          exports.ImageModel.encode(message.ribbonAnimation, writer.uint32(154).fork()).join();
        }
        if (message.hybridUrl !== "") {
          writer.uint32(170).string(message.hybridUrl);
        }
        if (message.schema !== "") {
          writer.uint32(178).string(message.schema);
        }
        if (message.subType !== "") {
          writer.uint32(186).string(message.subType);
        }
        if (message.privilegeLogExtra !== void 0) {
          exports.PrivilegeLogExtra.encode(message.privilegeLogExtra, writer.uint32(826).fork()).join();
        }
        if (message.content !== void 0) {
          exports.Text.encode(message.content, writer.uint32(42).fork()).join();
        }
        if (message.scene !== 0) {
          writer.uint32(88).int32(message.scene);
        }
        if (message.control !== void 0) {
          exports.WebcastBarrageMessage_DisplayControl.encode(message.control, writer.uint32(98).fork()).join();
        }
        if (message.rightLabel !== void 0) {
          exports.WebcastBarrageMessage_RightLabel.encode(message.rightLabel, writer.uint32(106).fork()).join();
        }
        if (message.badge !== void 0) {
          exports.BadgeStruct.encode(message.badge, writer.uint32(130).fork()).join();
        }
        if (message.animationData !== void 0) {
          exports.WebcastBarrageMessage_AnimationData.encode(message.animationData, writer.uint32(162).fork()).join();
        }
        if (message.commonBarrageContent !== void 0) {
          exports.Text.encode(message.commonBarrageContent, writer.uint32(194).fork()).join();
        }
        if (message.userGradeParam !== void 0) {
          exports.WebcastBarrageMessage_BarrageTypeUserGradeParam.encode(message.userGradeParam, writer.uint32(802).fork()).join();
        }
        if (message.fansLevelParam !== void 0) {
          exports.WebcastBarrageMessage_BarrageTypeFansLevelParam.encode(message.fansLevelParam, writer.uint32(810).fork()).join();
        }
        if (message.subscribeGiftParam !== void 0) {
          exports.WebcastBarrageMessage_BarrageTypeSubscribeGiftParam.encode(message.subscribeGiftParam, writer.uint32(818).fork()).join();
        }
        if (message.giftGalleryParams !== void 0) {
          exports.WebcastBarrageMessage_BarrageTypeGiftGalleryParam.encode(message.giftGalleryParams, writer.uint32(834).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.event = exports.WebcastBarrageMessage_BarrageEvent.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.msgType = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.icon = exports.ImageModel.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.duration = reader.int64().toString();
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.backGround = exports.ImageModel.decode(reader, reader.uint32());
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.rightIcon = exports.ImageModel.decode(reader, reader.uint32());
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.displayConfig = reader.int32();
              continue;
            }
            case 10: {
              if (tag !== 80) {
                break;
              }
              message.galleryGiftId = reader.int64().toString();
              continue;
            }
            case 14: {
              if (tag !== 112) {
                break;
              }
              message.useMarquee = reader.bool();
              continue;
            }
            case 15: {
              if (tag !== 120) {
                break;
              }
              message.showType = reader.int32();
              continue;
            }
            case 17: {
              if (tag !== 136) {
                break;
              }
              message.renderType = reader.int32();
              continue;
            }
            case 18: {
              if (tag !== 144) {
                break;
              }
              message.leftIconDisplayType = reader.int32();
              continue;
            }
            case 19: {
              if (tag !== 154) {
                break;
              }
              message.ribbonAnimation = exports.ImageModel.decode(reader, reader.uint32());
              continue;
            }
            case 21: {
              if (tag !== 170) {
                break;
              }
              message.hybridUrl = reader.string();
              continue;
            }
            case 22: {
              if (tag !== 178) {
                break;
              }
              message.schema = reader.string();
              continue;
            }
            case 23: {
              if (tag !== 186) {
                break;
              }
              message.subType = reader.string();
              continue;
            }
            case 103: {
              if (tag !== 826) {
                break;
              }
              message.privilegeLogExtra = exports.PrivilegeLogExtra.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.content = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 11: {
              if (tag !== 88) {
                break;
              }
              message.scene = reader.int32();
              continue;
            }
            case 12: {
              if (tag !== 98) {
                break;
              }
              message.control = exports.WebcastBarrageMessage_DisplayControl.decode(reader, reader.uint32());
              continue;
            }
            case 13: {
              if (tag !== 106) {
                break;
              }
              message.rightLabel = exports.WebcastBarrageMessage_RightLabel.decode(reader, reader.uint32());
              continue;
            }
            case 16: {
              if (tag !== 130) {
                break;
              }
              message.badge = exports.BadgeStruct.decode(reader, reader.uint32());
              continue;
            }
            case 20: {
              if (tag !== 162) {
                break;
              }
              message.animationData = exports.WebcastBarrageMessage_AnimationData.decode(reader, reader.uint32());
              continue;
            }
            case 24: {
              if (tag !== 194) {
                break;
              }
              message.commonBarrageContent = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 100: {
              if (tag !== 802) {
                break;
              }
              message.userGradeParam = exports.WebcastBarrageMessage_BarrageTypeUserGradeParam.decode(reader, reader.uint32());
              continue;
            }
            case 101: {
              if (tag !== 810) {
                break;
              }
              message.fansLevelParam = exports.WebcastBarrageMessage_BarrageTypeFansLevelParam.decode(reader, reader.uint32());
              continue;
            }
            case 102: {
              if (tag !== 818) {
                break;
              }
              message.subscribeGiftParam = exports.WebcastBarrageMessage_BarrageTypeSubscribeGiftParam.decode(reader, reader.uint32());
              continue;
            }
            case 104: {
              if (tag !== 834) {
                break;
              }
              message.giftGalleryParams = exports.WebcastBarrageMessage_BarrageTypeGiftGalleryParam.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastBarrageMessage_BarrageEvent() {
      return { eventName: "", params: {} };
    }
    exports.WebcastBarrageMessage_BarrageEvent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventName !== "") {
          writer.uint32(10).string(message.eventName);
        }
        Object.entries(message.params).forEach(([key, value]) => {
          exports.WebcastBarrageMessage_BarrageEvent_ParamsEntry.encode({ key, value }, writer.uint32(18).fork()).join();
        });
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessage_BarrageEvent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.eventName = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              const entry2 = exports.WebcastBarrageMessage_BarrageEvent_ParamsEntry.decode(reader, reader.uint32());
              if (entry2.value !== void 0) {
                message.params[entry2.key] = entry2.value;
              }
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastBarrageMessage_BarrageEvent_ParamsEntry() {
      return { key: "", value: "" };
    }
    exports.WebcastBarrageMessage_BarrageEvent_ParamsEntry = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
          writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
          writer.uint32(18).string(message.value);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessage_BarrageEvent_ParamsEntry();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.key = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.value = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastBarrageMessage_BarrageTypeUserGradeParam() {
      return { currentGrade: 0, displayConfig: 0, userId: "", user: void 0 };
    }
    exports.WebcastBarrageMessage_BarrageTypeUserGradeParam = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.currentGrade !== 0) {
          writer.uint32(8).int32(message.currentGrade);
        }
        if (message.displayConfig !== 0) {
          writer.uint32(16).int32(message.displayConfig);
        }
        if (message.userId !== "") {
          writer.uint32(26).string(message.userId);
        }
        if (message.user !== void 0) {
          exports.User.encode(message.user, writer.uint32(34).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessage_BarrageTypeUserGradeParam();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.currentGrade = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.displayConfig = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.userId = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.user = exports.User.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastBarrageMessage_BarrageTypeFansLevelParam() {
      return { currentGrade: 0, displayConfig: 0, user: void 0 };
    }
    exports.WebcastBarrageMessage_BarrageTypeFansLevelParam = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.currentGrade !== 0) {
          writer.uint32(8).int32(message.currentGrade);
        }
        if (message.displayConfig !== 0) {
          writer.uint32(16).int32(message.displayConfig);
        }
        if (message.user !== void 0) {
          exports.User.encode(message.user, writer.uint32(34).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessage_BarrageTypeFansLevelParam();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.currentGrade = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.displayConfig = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.user = exports.User.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastBarrageMessage_BarrageTypeSubscribeGiftParam() {
      return { giftSubCount: "0", showGiftSubCount: false };
    }
    exports.WebcastBarrageMessage_BarrageTypeSubscribeGiftParam = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.giftSubCount !== "0") {
          writer.uint32(8).int64(message.giftSubCount);
        }
        if (message.showGiftSubCount !== false) {
          writer.uint32(16).bool(message.showGiftSubCount);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessage_BarrageTypeSubscribeGiftParam();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.giftSubCount = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.showGiftSubCount = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastBarrageMessage_AnimationData() {
      return { geckoChannelName: "", fileName: "", height: "0", width: "0", rightOffset: "0" };
    }
    exports.WebcastBarrageMessage_AnimationData = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.geckoChannelName !== "") {
          writer.uint32(10).string(message.geckoChannelName);
        }
        if (message.fileName !== "") {
          writer.uint32(18).string(message.fileName);
        }
        if (message.height !== "0") {
          writer.uint32(24).int64(message.height);
        }
        if (message.width !== "0") {
          writer.uint32(32).int64(message.width);
        }
        if (message.rightOffset !== "0") {
          writer.uint32(40).int64(message.rightOffset);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessage_AnimationData();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.geckoChannelName = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.fileName = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.height = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.width = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.rightOffset = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastBarrageMessage_BarrageTypeGiftGalleryParam() {
      return { fromUserId: "0", toUserId: "0" };
    }
    exports.WebcastBarrageMessage_BarrageTypeGiftGalleryParam = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.fromUserId !== "0") {
          writer.uint32(8).int64(message.fromUserId);
        }
        if (message.toUserId !== "0") {
          writer.uint32(16).int64(message.toUserId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessage_BarrageTypeGiftGalleryParam();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.fromUserId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.toUserId = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastBarrageMessage_DisplayControl() {
      return { priority: 0, duration: "0", targetGroupShowRst: {}, horizontalTriggerType: 0 };
    }
    exports.WebcastBarrageMessage_DisplayControl = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.priority !== 0) {
          writer.uint32(8).int32(message.priority);
        }
        if (message.duration !== "0") {
          writer.uint32(16).int64(message.duration);
        }
        Object.entries(message.targetGroupShowRst).forEach(([key, value]) => {
          exports.WebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntry.encode({ key, value }, writer.uint32(26).fork()).join();
        });
        if (message.horizontalTriggerType !== 0) {
          writer.uint32(32).int32(message.horizontalTriggerType);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessage_DisplayControl();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.priority = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.duration = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              const entry3 = exports.WebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntry.decode(reader, reader.uint32());
              if (entry3.value !== void 0) {
                message.targetGroupShowRst[entry3.key] = entry3.value;
              }
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.horizontalTriggerType = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntry() {
      return { key: 0, value: void 0 };
    }
    exports.WebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntry = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== 0) {
          writer.uint32(8).int32(message.key);
        }
        if (message.value !== void 0) {
          exports.WebcastBarrageMessage_DisplayControl_ShowResult.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntry();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.key = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.value = exports.WebcastBarrageMessage_DisplayControl_ShowResult.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastBarrageMessage_DisplayControl_ShowResult() {
      return { banned: false };
    }
    exports.WebcastBarrageMessage_DisplayControl_ShowResult = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.banned !== false) {
          writer.uint32(8).bool(message.banned);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessage_DisplayControl_ShowResult();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.banned = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastBarrageMessage_RightLabel() {
      return { backgroundColor: "", content: void 0, height: "0" };
    }
    exports.WebcastBarrageMessage_RightLabel = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.backgroundColor !== "") {
          writer.uint32(10).string(message.backgroundColor);
        }
        if (message.content !== void 0) {
          exports.Text.encode(message.content, writer.uint32(18).fork()).join();
        }
        if (message.height !== "0") {
          writer.uint32(24).int64(message.height);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessage_RightLabel();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.backgroundColor = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.content = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.height = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseProtoMessageFetchResult() {
      return {
        messages: [],
        cursor: "",
        fetchInterval: "0",
        now: "0",
        internalExt: "",
        fetchType: 0,
        wsParams: {},
        heartBeatDuration: "0",
        needsAck: false,
        wsUrl: "",
        isFirst: false,
        historyCommentCursor: "",
        historyNoMore: false
      };
    }
    exports.ProtoMessageFetchResult = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.messages) {
          exports.BaseProtoMessage.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.cursor !== "") {
          writer.uint32(18).string(message.cursor);
        }
        if (message.fetchInterval !== "0") {
          writer.uint32(24).int64(message.fetchInterval);
        }
        if (message.now !== "0") {
          writer.uint32(32).int64(message.now);
        }
        if (message.internalExt !== "") {
          writer.uint32(42).string(message.internalExt);
        }
        if (message.fetchType !== 0) {
          writer.uint32(48).int32(message.fetchType);
        }
        Object.entries(message.wsParams).forEach(([key, value]) => {
          exports.ProtoMessageFetchResult_WsParamsEntry.encode({ key, value }, writer.uint32(58).fork()).join();
        });
        if (message.heartBeatDuration !== "0") {
          writer.uint32(64).int64(message.heartBeatDuration);
        }
        if (message.needsAck !== false) {
          writer.uint32(72).bool(message.needsAck);
        }
        if (message.wsUrl !== "") {
          writer.uint32(82).string(message.wsUrl);
        }
        if (message.isFirst !== false) {
          writer.uint32(88).bool(message.isFirst);
        }
        if (message.historyCommentCursor !== "") {
          writer.uint32(98).string(message.historyCommentCursor);
        }
        if (message.historyNoMore !== false) {
          writer.uint32(104).bool(message.historyNoMore);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseProtoMessageFetchResult();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.messages.push(exports.BaseProtoMessage.decode(reader, reader.uint32()));
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.cursor = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.fetchInterval = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.now = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.internalExt = reader.string();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.fetchType = reader.int32();
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              const entry7 = exports.ProtoMessageFetchResult_WsParamsEntry.decode(reader, reader.uint32());
              if (entry7.value !== void 0) {
                message.wsParams[entry7.key] = entry7.value;
              }
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.heartBeatDuration = reader.int64().toString();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.needsAck = reader.bool();
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              message.wsUrl = reader.string();
              continue;
            }
            case 11: {
              if (tag !== 88) {
                break;
              }
              message.isFirst = reader.bool();
              continue;
            }
            case 12: {
              if (tag !== 98) {
                break;
              }
              message.historyCommentCursor = reader.string();
              continue;
            }
            case 13: {
              if (tag !== 104) {
                break;
              }
              message.historyNoMore = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseProtoMessageFetchResult_WsParamsEntry() {
      return { key: "", value: "" };
    }
    exports.ProtoMessageFetchResult_WsParamsEntry = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
          writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
          writer.uint32(18).string(message.value);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseProtoMessageFetchResult_WsParamsEntry();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.key = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.value = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseBaseProtoMessage() {
      return { type: "", payload: new Uint8Array(0), msgId: "0", msgType: 0, offset: "0", isHistory: false };
    }
    exports.BaseProtoMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== "") {
          writer.uint32(10).string(message.type);
        }
        if (message.payload.length !== 0) {
          writer.uint32(18).bytes(message.payload);
        }
        if (message.msgId !== "0") {
          writer.uint32(24).int64(message.msgId);
        }
        if (message.msgType !== 0) {
          writer.uint32(32).int32(message.msgType);
        }
        if (message.offset !== "0") {
          writer.uint32(40).int64(message.offset);
        }
        if (message.isHistory !== false) {
          writer.uint32(48).bool(message.isHistory);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseBaseProtoMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.type = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.payload = reader.bytes();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.msgId = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.msgType = reader.int32();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.offset = reader.int64().toString();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.isHistory = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastRoomMessage() {
      return {
        common: void 0,
        content: "",
        supportLandscape: false,
        source: "0",
        icon: void 0,
        scene: 0,
        isWelcome: false,
        publicAreaCommon: void 0,
        showDurationMs: "0",
        subScene: ""
      };
    }
    exports.WebcastRoomMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.content !== "") {
          writer.uint32(18).string(message.content);
        }
        if (message.supportLandscape !== false) {
          writer.uint32(24).bool(message.supportLandscape);
        }
        if (message.source !== "0") {
          writer.uint32(32).int64(message.source);
        }
        if (message.icon !== void 0) {
          exports.Image.encode(message.icon, writer.uint32(42).fork()).join();
        }
        if (message.scene !== 0) {
          writer.uint32(48).int32(message.scene);
        }
        if (message.isWelcome !== false) {
          writer.uint32(56).bool(message.isWelcome);
        }
        if (message.publicAreaCommon !== void 0) {
          exports.PublicAreaMessageCommon.encode(message.publicAreaCommon, writer.uint32(66).fork()).join();
        }
        if (message.showDurationMs !== "0") {
          writer.uint32(72).int64(message.showDurationMs);
        }
        if (message.subScene !== "") {
          writer.uint32(82).string(message.subScene);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastRoomMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.content = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.supportLandscape = reader.bool();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.source = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.icon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.scene = reader.int32();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.isWelcome = reader.bool();
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.publicAreaCommon = exports.PublicAreaMessageCommon.decode(reader, reader.uint32());
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.showDurationMs = reader.int64().toString();
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              message.subScene = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastCaptionMessage() {
      return {
        common: void 0,
        timestampMs: "0",
        durationMs: "0",
        content: [],
        sentenceId: "0",
        sequenceId: "0",
        definite: false
      };
    }
    exports.WebcastCaptionMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.timestampMs !== "0") {
          writer.uint32(16).int64(message.timestampMs);
        }
        if (message.durationMs !== "0") {
          writer.uint32(24).int64(message.durationMs);
        }
        for (const v of message.content) {
          exports.WebcastCaptionMessage_CaptionContent.encode(v, writer.uint32(34).fork()).join();
        }
        if (message.sentenceId !== "0") {
          writer.uint32(40).int64(message.sentenceId);
        }
        if (message.sequenceId !== "0") {
          writer.uint32(48).int64(message.sequenceId);
        }
        if (message.definite !== false) {
          writer.uint32(56).bool(message.definite);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastCaptionMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.timestampMs = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.durationMs = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.content.push(exports.WebcastCaptionMessage_CaptionContent.decode(reader, reader.uint32()));
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.sentenceId = reader.int64().toString();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.sequenceId = reader.int64().toString();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.definite = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastCaptionMessage_CaptionContent() {
      return { lang: "", content: "" };
    }
    exports.WebcastCaptionMessage_CaptionContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.lang !== "") {
          writer.uint32(10).string(message.lang);
        }
        if (message.content !== "") {
          writer.uint32(18).string(message.content);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastCaptionMessage_CaptionContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.lang = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.content = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastControlMessage() {
      return {
        common: void 0,
        action: 0,
        tips: "",
        extra: void 0,
        perceptionDialog: void 0,
        perceptionAudienceText: void 0,
        punishInfo: void 0,
        floatText: void 0,
        floatStyle: 0
      };
    }
    exports.WebcastControlMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.action !== 0) {
          writer.uint32(16).int32(message.action);
        }
        if (message.tips !== "") {
          writer.uint32(26).string(message.tips);
        }
        if (message.extra !== void 0) {
          exports.WebcastControlMessage_Extra.encode(message.extra, writer.uint32(34).fork()).join();
        }
        if (message.perceptionDialog !== void 0) {
          exports.WebcastControlMessage_PerceptionDialogInfo.encode(message.perceptionDialog, writer.uint32(42).fork()).join();
        }
        if (message.perceptionAudienceText !== void 0) {
          exports.Text.encode(message.perceptionAudienceText, writer.uint32(50).fork()).join();
        }
        if (message.punishInfo !== void 0) {
          exports.PunishEventInfo.encode(message.punishInfo, writer.uint32(58).fork()).join();
        }
        if (message.floatText !== void 0) {
          exports.Text.encode(message.floatText, writer.uint32(66).fork()).join();
        }
        if (message.floatStyle !== 0) {
          writer.uint32(72).int32(message.floatStyle);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastControlMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.action = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.tips = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.extra = exports.WebcastControlMessage_Extra.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.perceptionDialog = exports.WebcastControlMessage_PerceptionDialogInfo.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.perceptionAudienceText = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.punishInfo = exports.PunishEventInfo.decode(reader, reader.uint32());
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.floatText = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.floatStyle = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastControlMessage_Extra() {
      return {
        banInfoUrl: "",
        reasonNo: "0",
        title: void 0,
        violationReason: void 0,
        content: void 0,
        gotItButton: void 0,
        banDetailButton: void 0,
        source: ""
      };
    }
    exports.WebcastControlMessage_Extra = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.banInfoUrl !== "") {
          writer.uint32(10).string(message.banInfoUrl);
        }
        if (message.reasonNo !== "0") {
          writer.uint32(16).int64(message.reasonNo);
        }
        if (message.title !== void 0) {
          exports.Text.encode(message.title, writer.uint32(26).fork()).join();
        }
        if (message.violationReason !== void 0) {
          exports.Text.encode(message.violationReason, writer.uint32(34).fork()).join();
        }
        if (message.content !== void 0) {
          exports.Text.encode(message.content, writer.uint32(42).fork()).join();
        }
        if (message.gotItButton !== void 0) {
          exports.Text.encode(message.gotItButton, writer.uint32(50).fork()).join();
        }
        if (message.banDetailButton !== void 0) {
          exports.Text.encode(message.banDetailButton, writer.uint32(58).fork()).join();
        }
        if (message.source !== "") {
          writer.uint32(66).string(message.source);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastControlMessage_Extra();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.banInfoUrl = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.reasonNo = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.title = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.violationReason = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.content = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.gotItButton = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.banDetailButton = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.source = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastControlMessage_PerceptionDialogInfo() {
      return {
        iconType: 0,
        title: void 0,
        subTitle: void 0,
        adviceActionText: void 0,
        defaultActionText: void 0,
        violationDetailUrl: "",
        scene: 0,
        targetUserId: "0",
        targetRoomId: "0",
        countDownTime: "0",
        showFeedback: false,
        feedbackOptions: [],
        policyTip: "0",
        appealPopup: 0
      };
    }
    exports.WebcastControlMessage_PerceptionDialogInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.iconType !== 0) {
          writer.uint32(8).int32(message.iconType);
        }
        if (message.title !== void 0) {
          exports.Text.encode(message.title, writer.uint32(18).fork()).join();
        }
        if (message.subTitle !== void 0) {
          exports.Text.encode(message.subTitle, writer.uint32(26).fork()).join();
        }
        if (message.adviceActionText !== void 0) {
          exports.Text.encode(message.adviceActionText, writer.uint32(34).fork()).join();
        }
        if (message.defaultActionText !== void 0) {
          exports.Text.encode(message.defaultActionText, writer.uint32(42).fork()).join();
        }
        if (message.violationDetailUrl !== "") {
          writer.uint32(50).string(message.violationDetailUrl);
        }
        if (message.scene !== 0) {
          writer.uint32(56).int32(message.scene);
        }
        if (message.targetUserId !== "0") {
          writer.uint32(64).int64(message.targetUserId);
        }
        if (message.targetRoomId !== "0") {
          writer.uint32(72).int64(message.targetRoomId);
        }
        if (message.countDownTime !== "0") {
          writer.uint32(80).int64(message.countDownTime);
        }
        if (message.showFeedback !== false) {
          writer.uint32(88).bool(message.showFeedback);
        }
        for (const v of message.feedbackOptions) {
          exports.WebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOption.encode(v, writer.uint32(98).fork()).join();
        }
        if (message.policyTip !== "0") {
          writer.uint32(104).int64(message.policyTip);
        }
        if (message.appealPopup !== 0) {
          writer.uint32(112).int32(message.appealPopup);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastControlMessage_PerceptionDialogInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.iconType = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.title = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.subTitle = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.adviceActionText = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.defaultActionText = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.violationDetailUrl = reader.string();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.scene = reader.int32();
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.targetUserId = reader.int64().toString();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.targetRoomId = reader.int64().toString();
              continue;
            }
            case 10: {
              if (tag !== 80) {
                break;
              }
              message.countDownTime = reader.int64().toString();
              continue;
            }
            case 11: {
              if (tag !== 88) {
                break;
              }
              message.showFeedback = reader.bool();
              continue;
            }
            case 12: {
              if (tag !== 98) {
                break;
              }
              message.feedbackOptions.push(exports.WebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOption.decode(reader, reader.uint32()));
              continue;
            }
            case 13: {
              if (tag !== 104) {
                break;
              }
              message.policyTip = reader.int64().toString();
              continue;
            }
            case 14: {
              if (tag !== 112) {
                break;
              }
              message.appealPopup = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOption() {
      return { id: "0", contentKey: "" };
    }
    exports.WebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOption = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "0") {
          writer.uint32(8).int64(message.id);
        }
        if (message.contentKey !== "") {
          writer.uint32(18).string(message.contentKey);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOption();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.id = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.contentKey = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGoalUpdateMessage() {
      return {
        common: void 0,
        indicator: void 0,
        goal: void 0,
        contributorId: "0",
        contributorAvatar: void 0,
        contributorDisplayId: "",
        contributeSubgoal: void 0,
        contributeCount: "0",
        contributeScore: "0",
        giftRepeatCount: "0",
        contributorIdStr: "",
        pin: false,
        unpin: false,
        pinInfo: void 0,
        updateSource: 0,
        goalExtra: ""
      };
    }
    exports.WebcastGoalUpdateMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.indicator !== void 0) {
          exports.LiveStreamGoalIndicator.encode(message.indicator, writer.uint32(18).fork()).join();
        }
        if (message.goal !== void 0) {
          exports.LiveStreamGoal.encode(message.goal, writer.uint32(26).fork()).join();
        }
        if (message.contributorId !== "0") {
          writer.uint32(32).int64(message.contributorId);
        }
        if (message.contributorAvatar !== void 0) {
          exports.Image.encode(message.contributorAvatar, writer.uint32(42).fork()).join();
        }
        if (message.contributorDisplayId !== "") {
          writer.uint32(50).string(message.contributorDisplayId);
        }
        if (message.contributeSubgoal !== void 0) {
          exports.WebcastGoalUpdateMessage_LiveStreamSubGoal.encode(message.contributeSubgoal, writer.uint32(58).fork()).join();
        }
        if (message.contributeCount !== "0") {
          writer.uint32(72).int64(message.contributeCount);
        }
        if (message.contributeScore !== "0") {
          writer.uint32(80).int64(message.contributeScore);
        }
        if (message.giftRepeatCount !== "0") {
          writer.uint32(88).int64(message.giftRepeatCount);
        }
        if (message.contributorIdStr !== "") {
          writer.uint32(98).string(message.contributorIdStr);
        }
        if (message.pin !== false) {
          writer.uint32(104).bool(message.pin);
        }
        if (message.unpin !== false) {
          writer.uint32(112).bool(message.unpin);
        }
        if (message.pinInfo !== void 0) {
          exports.WebcastGoalUpdateMessage_GoalPinInfo.encode(message.pinInfo, writer.uint32(122).fork()).join();
        }
        if (message.updateSource !== 0) {
          writer.uint32(128).int32(message.updateSource);
        }
        if (message.goalExtra !== "") {
          writer.uint32(138).string(message.goalExtra);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGoalUpdateMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.indicator = exports.LiveStreamGoalIndicator.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.goal = exports.LiveStreamGoal.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.contributorId = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.contributorAvatar = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.contributorDisplayId = reader.string();
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.contributeSubgoal = exports.WebcastGoalUpdateMessage_LiveStreamSubGoal.decode(reader, reader.uint32());
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.contributeCount = reader.int64().toString();
              continue;
            }
            case 10: {
              if (tag !== 80) {
                break;
              }
              message.contributeScore = reader.int64().toString();
              continue;
            }
            case 11: {
              if (tag !== 88) {
                break;
              }
              message.giftRepeatCount = reader.int64().toString();
              continue;
            }
            case 12: {
              if (tag !== 98) {
                break;
              }
              message.contributorIdStr = reader.string();
              continue;
            }
            case 13: {
              if (tag !== 104) {
                break;
              }
              message.pin = reader.bool();
              continue;
            }
            case 14: {
              if (tag !== 112) {
                break;
              }
              message.unpin = reader.bool();
              continue;
            }
            case 15: {
              if (tag !== 122) {
                break;
              }
              message.pinInfo = exports.WebcastGoalUpdateMessage_GoalPinInfo.decode(reader, reader.uint32());
              continue;
            }
            case 16: {
              if (tag !== 128) {
                break;
              }
              message.updateSource = reader.int32();
              continue;
            }
            case 17: {
              if (tag !== 138) {
                break;
              }
              message.goalExtra = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGoalUpdateMessage_LiveStreamSubGoal() {
      return {
        type: 0,
        id: "0",
        progress: "0",
        target: "0",
        gift: void 0,
        idStr: "",
        pinInfo: void 0,
        source: 0,
        recommendedText: "",
        recommendedCommon: ""
      };
    }
    exports.WebcastGoalUpdateMessage_LiveStreamSubGoal = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== 0) {
          writer.uint32(8).int32(message.type);
        }
        if (message.id !== "0") {
          writer.uint32(16).int64(message.id);
        }
        if (message.progress !== "0") {
          writer.uint32(24).int64(message.progress);
        }
        if (message.target !== "0") {
          writer.uint32(32).int64(message.target);
        }
        if (message.gift !== void 0) {
          exports.WebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGift.encode(message.gift, writer.uint32(42).fork()).join();
        }
        if (message.idStr !== "") {
          writer.uint32(50).string(message.idStr);
        }
        if (message.pinInfo !== void 0) {
          exports.WebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfo.encode(message.pinInfo, writer.uint32(58).fork()).join();
        }
        if (message.source !== 0) {
          writer.uint32(64).int32(message.source);
        }
        if (message.recommendedText !== "") {
          writer.uint32(74).string(message.recommendedText);
        }
        if (message.recommendedCommon !== "") {
          writer.uint32(82).string(message.recommendedCommon);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGoalUpdateMessage_LiveStreamSubGoal();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.type = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.id = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.progress = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.target = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.gift = exports.WebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGift.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.idStr = reader.string();
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.pinInfo = exports.WebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfo.decode(reader, reader.uint32());
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.source = reader.int32();
              continue;
            }
            case 9: {
              if (tag !== 74) {
                break;
              }
              message.recommendedText = reader.string();
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              message.recommendedCommon = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGift() {
      return { name: "", icon: void 0, diamondCount: "0", type: 0 };
    }
    exports.WebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGift = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
          writer.uint32(10).string(message.name);
        }
        if (message.icon !== void 0) {
          exports.Image.encode(message.icon, writer.uint32(18).fork()).join();
        }
        if (message.diamondCount !== "0") {
          writer.uint32(24).int64(message.diamondCount);
        }
        if (message.type !== 0) {
          writer.uint32(32).int32(message.type);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGift();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.name = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.icon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.diamondCount = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.type = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfo() {
      return { pinStartTime: "0", pinEndTime: "0", pinReadyTime: "0" };
    }
    exports.WebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pinStartTime !== "0") {
          writer.uint32(8).int64(message.pinStartTime);
        }
        if (message.pinEndTime !== "0") {
          writer.uint32(16).int64(message.pinEndTime);
        }
        if (message.pinReadyTime !== "0") {
          writer.uint32(24).int64(message.pinReadyTime);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.pinStartTime = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.pinEndTime = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.pinReadyTime = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastGoalUpdateMessage_GoalPinInfo() {
      return { pin: false, unpin: false, pinEndTime: "0", subGoalId: "0", subGoalIdStr: "" };
    }
    exports.WebcastGoalUpdateMessage_GoalPinInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pin !== false) {
          writer.uint32(8).bool(message.pin);
        }
        if (message.unpin !== false) {
          writer.uint32(16).bool(message.unpin);
        }
        if (message.pinEndTime !== "0") {
          writer.uint32(24).int64(message.pinEndTime);
        }
        if (message.subGoalId !== "0") {
          writer.uint32(32).int64(message.subGoalId);
        }
        if (message.subGoalIdStr !== "") {
          writer.uint32(42).string(message.subGoalIdStr);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastGoalUpdateMessage_GoalPinInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.pin = reader.bool();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.unpin = reader.bool();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.pinEndTime = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.subGoalId = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.subGoalIdStr = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastImDeleteMessage() {
      return { common: void 0, deleteMsgIdsList: [], deleteUserIdsList: [] };
    }
    exports.WebcastImDeleteMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        writer.uint32(18).fork();
        for (const v of message.deleteMsgIdsList) {
          writer.int64(v);
        }
        writer.join();
        writer.uint32(26).fork();
        for (const v of message.deleteUserIdsList) {
          writer.int64(v);
        }
        writer.join();
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastImDeleteMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag === 16) {
                message.deleteMsgIdsList.push(reader.int64().toString());
                continue;
              }
              if (tag === 18) {
                const end2 = reader.uint32() + reader.pos;
                while (reader.pos < end2) {
                  message.deleteMsgIdsList.push(reader.int64().toString());
                }
                continue;
              }
              break;
            }
            case 3: {
              if (tag === 24) {
                message.deleteUserIdsList.push(reader.int64().toString());
                continue;
              }
              if (tag === 26) {
                const end2 = reader.uint32() + reader.pos;
                while (reader.pos < end2) {
                  message.deleteUserIdsList.push(reader.int64().toString());
                }
                continue;
              }
              break;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastInRoomBannerMessage() {
      return { common: void 0, data: {}, position: 0, actionType: 0 };
    }
    exports.WebcastInRoomBannerMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        Object.entries(message.data).forEach(([key, value]) => {
          exports.WebcastInRoomBannerMessage_DataEntry.encode({ key, value }, writer.uint32(18).fork()).join();
        });
        if (message.position !== 0) {
          writer.uint32(24).int32(message.position);
        }
        if (message.actionType !== 0) {
          writer.uint32(32).int32(message.actionType);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastInRoomBannerMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              const entry2 = exports.WebcastInRoomBannerMessage_DataEntry.decode(reader, reader.uint32());
              if (entry2.value !== void 0) {
                message.data[entry2.key] = entry2.value;
              }
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.position = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.actionType = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastInRoomBannerMessage_DataEntry() {
      return { key: "", value: "" };
    }
    exports.WebcastInRoomBannerMessage_DataEntry = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
          writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
          writer.uint32(18).string(message.value);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastInRoomBannerMessage_DataEntry();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.key = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.value = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastRankUpdateMessage() {
      return {
        common: void 0,
        updatesList: [],
        groupType: "0",
        priority: "0",
        tabsList: [],
        isAnimationLoopPlay: false,
        animationLoopForOff: false,
        unionAnimation: [],
        tabInfo: []
      };
    }
    exports.WebcastRankUpdateMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        for (const v of message.updatesList) {
          exports.WebcastRankUpdateMessage_RankUpdate.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.groupType !== "0") {
          writer.uint32(24).int64(message.groupType);
        }
        if (message.priority !== "0") {
          writer.uint32(40).int64(message.priority);
        }
        for (const v of message.tabsList) {
          exports.WebcastRankUpdateMessage_RankTabInfo.encode(v, writer.uint32(50).fork()).join();
        }
        if (message.isAnimationLoopPlay !== false) {
          writer.uint32(56).bool(message.isAnimationLoopPlay);
        }
        if (message.animationLoopForOff !== false) {
          writer.uint32(64).bool(message.animationLoopForOff);
        }
        for (const v of message.unionAnimation) {
          exports.WebcastRankUpdateMessage_UnionAnimationInfo.encode(v, writer.uint32(74).fork()).join();
        }
        for (const v of message.tabInfo) {
          exports.WebcastRankUpdateMessage_RankListTabInfo.encode(v, writer.uint32(82).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastRankUpdateMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.updatesList.push(exports.WebcastRankUpdateMessage_RankUpdate.decode(reader, reader.uint32()));
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.groupType = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.priority = reader.int64().toString();
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.tabsList.push(exports.WebcastRankUpdateMessage_RankTabInfo.decode(reader, reader.uint32()));
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.isAnimationLoopPlay = reader.bool();
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.animationLoopForOff = reader.bool();
              continue;
            }
            case 9: {
              if (tag !== 74) {
                break;
              }
              message.unionAnimation.push(exports.WebcastRankUpdateMessage_UnionAnimationInfo.decode(reader, reader.uint32()));
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              message.tabInfo.push(exports.WebcastRankUpdateMessage_RankListTabInfo.decode(reader, reader.uint32()));
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastRankUpdateMessage_UnionAnimationInfo() {
      return { unionType: 0, rankTypeArray: 0, supportedVersion: "0" };
    }
    exports.WebcastRankUpdateMessage_UnionAnimationInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.unionType !== 0) {
          writer.uint32(8).int32(message.unionType);
        }
        if (message.rankTypeArray !== 0) {
          writer.uint32(16).int32(message.rankTypeArray);
        }
        if (message.supportedVersion !== "0") {
          writer.uint32(24).int64(message.supportedVersion);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastRankUpdateMessage_UnionAnimationInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.unionType = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.rankTypeArray = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.supportedVersion = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastRankUpdateMessage_RankListTabInfo() {
      return { tabs: [], supportedVersion: "0" };
    }
    exports.WebcastRankUpdateMessage_RankListTabInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.tabs) {
          exports.WebcastRankUpdateMessage_RankTabInfo.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.supportedVersion !== "0") {
          writer.uint32(16).int64(message.supportedVersion);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastRankUpdateMessage_RankListTabInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.tabs.push(exports.WebcastRankUpdateMessage_RankTabInfo.decode(reader, reader.uint32()));
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.supportedVersion = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastRankUpdateMessage_RankTabInfo() {
      return { rankType: 0, title: "", titleText: void 0, listLynxType: "0" };
    }
    exports.WebcastRankUpdateMessage_RankTabInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rankType !== 0) {
          writer.uint32(8).int32(message.rankType);
        }
        if (message.title !== "") {
          writer.uint32(18).string(message.title);
        }
        if (message.titleText !== void 0) {
          exports.Text.encode(message.titleText, writer.uint32(26).fork()).join();
        }
        if (message.listLynxType !== "0") {
          writer.uint32(32).int64(message.listLynxType);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastRankUpdateMessage_RankTabInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.rankType = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.title = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.titleText = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.listLynxType = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastRankUpdateMessage_RankUpdate() {
      return {
        rankType: "0",
        ownerRank: "0",
        defaultContent: void 0,
        showEntranceAnimation: false,
        countdown: "0",
        relatedTabRankType: "0",
        requestFirstShowType: "0",
        supportedVersion: "0",
        owneronrank: false
      };
    }
    exports.WebcastRankUpdateMessage_RankUpdate = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rankType !== "0") {
          writer.uint32(8).int64(message.rankType);
        }
        if (message.ownerRank !== "0") {
          writer.uint32(16).int64(message.ownerRank);
        }
        if (message.defaultContent !== void 0) {
          exports.Text.encode(message.defaultContent, writer.uint32(26).fork()).join();
        }
        if (message.showEntranceAnimation !== false) {
          writer.uint32(40).bool(message.showEntranceAnimation);
        }
        if (message.countdown !== "0") {
          writer.uint32(48).int64(message.countdown);
        }
        if (message.relatedTabRankType !== "0") {
          writer.uint32(64).int64(message.relatedTabRankType);
        }
        if (message.requestFirstShowType !== "0") {
          writer.uint32(72).int64(message.requestFirstShowType);
        }
        if (message.supportedVersion !== "0") {
          writer.uint32(80).int64(message.supportedVersion);
        }
        if (message.owneronrank !== false) {
          writer.uint32(88).bool(message.owneronrank);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastRankUpdateMessage_RankUpdate();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.rankType = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.ownerRank = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.defaultContent = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.showEntranceAnimation = reader.bool();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.countdown = reader.int64().toString();
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.relatedTabRankType = reader.int64().toString();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.requestFirstShowType = reader.int64().toString();
              continue;
            }
            case 10: {
              if (tag !== 80) {
                break;
              }
              message.supportedVersion = reader.int64().toString();
              continue;
            }
            case 11: {
              if (tag !== 88) {
                break;
              }
              message.owneronrank = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastPollMessage() {
      return {
        common: void 0,
        messageType: 0,
        pollId: "0",
        startContent: void 0,
        endContent: void 0,
        updateContent: void 0,
        pollKind: 0,
        pollBasicInfo: void 0,
        templateContent: void 0
      };
    }
    exports.WebcastPollMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.messageType !== 0) {
          writer.uint32(16).int32(message.messageType);
        }
        if (message.pollId !== "0") {
          writer.uint32(24).int64(message.pollId);
        }
        if (message.startContent !== void 0) {
          exports.PollStartContent.encode(message.startContent, writer.uint32(34).fork()).join();
        }
        if (message.endContent !== void 0) {
          exports.PollEndContent.encode(message.endContent, writer.uint32(42).fork()).join();
        }
        if (message.updateContent !== void 0) {
          exports.PollUpdateVotesContent.encode(message.updateContent, writer.uint32(50).fork()).join();
        }
        if (message.pollKind !== 0) {
          writer.uint32(56).int32(message.pollKind);
        }
        if (message.pollBasicInfo !== void 0) {
          exports.WebcastPollMessage_PollBasicInfo.encode(message.pollBasicInfo, writer.uint32(66).fork()).join();
        }
        if (message.templateContent !== void 0) {
          exports.WebcastPollMessage_TemplateContent.encode(message.templateContent, writer.uint32(74).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastPollMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.messageType = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.pollId = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.startContent = exports.PollStartContent.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.endContent = exports.PollEndContent.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.updateContent = exports.PollUpdateVotesContent.decode(reader, reader.uint32());
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.pollKind = reader.int32();
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.pollBasicInfo = exports.WebcastPollMessage_PollBasicInfo.decode(reader, reader.uint32());
              continue;
            }
            case 9: {
              if (tag !== 74) {
                break;
              }
              message.templateContent = exports.WebcastPollMessage_TemplateContent.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastPollMessage_TemplateContent() {
      return { templateId: "0", templateIdStr: "", status: 0, pollKind: 0, appealStatus: 0, violationIdStr: "" };
    }
    exports.WebcastPollMessage_TemplateContent = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.templateId !== "0") {
          writer.uint32(8).int64(message.templateId);
        }
        if (message.templateIdStr !== "") {
          writer.uint32(18).string(message.templateIdStr);
        }
        if (message.status !== 0) {
          writer.uint32(24).int32(message.status);
        }
        if (message.pollKind !== 0) {
          writer.uint32(32).int32(message.pollKind);
        }
        if (message.appealStatus !== 0) {
          writer.uint32(40).int32(message.appealStatus);
        }
        if (message.violationIdStr !== "") {
          writer.uint32(50).string(message.violationIdStr);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastPollMessage_TemplateContent();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.templateId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.templateIdStr = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.status = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.pollKind = reader.int32();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.appealStatus = reader.int32();
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.violationIdStr = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastPollMessage_PollBasicInfo() {
      return {
        pollSponsor: "",
        giftId: "0",
        title: "",
        isSuggestedQuestion: false,
        userCnt: "0",
        gift: void 0,
        pollIdStr: "",
        suggestedQuestionKey: "",
        pollDuration: "0",
        timeRemain: "0",
        pollIndex: "0",
        templateId: "0"
      };
    }
    exports.WebcastPollMessage_PollBasicInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pollSponsor !== "") {
          writer.uint32(10).string(message.pollSponsor);
        }
        if (message.giftId !== "0") {
          writer.uint32(16).int64(message.giftId);
        }
        if (message.title !== "") {
          writer.uint32(26).string(message.title);
        }
        if (message.isSuggestedQuestion !== false) {
          writer.uint32(32).bool(message.isSuggestedQuestion);
        }
        if (message.userCnt !== "0") {
          writer.uint32(40).int64(message.userCnt);
        }
        if (message.gift !== void 0) {
          exports.Gift.encode(message.gift, writer.uint32(50).fork()).join();
        }
        if (message.pollIdStr !== "") {
          writer.uint32(58).string(message.pollIdStr);
        }
        if (message.suggestedQuestionKey !== "") {
          writer.uint32(66).string(message.suggestedQuestionKey);
        }
        if (message.pollDuration !== "0") {
          writer.uint32(72).int64(message.pollDuration);
        }
        if (message.timeRemain !== "0") {
          writer.uint32(80).int64(message.timeRemain);
        }
        if (message.pollIndex !== "0") {
          writer.uint32(88).int64(message.pollIndex);
        }
        if (message.templateId !== "0") {
          writer.uint32(96).int64(message.templateId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastPollMessage_PollBasicInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.pollSponsor = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.giftId = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.title = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.isSuggestedQuestion = reader.bool();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.userCnt = reader.int64().toString();
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.gift = exports.Gift.decode(reader, reader.uint32());
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.pollIdStr = reader.string();
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.suggestedQuestionKey = reader.string();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.pollDuration = reader.int64().toString();
              continue;
            }
            case 10: {
              if (tag !== 80) {
                break;
              }
              message.timeRemain = reader.int64().toString();
              continue;
            }
            case 11: {
              if (tag !== 88) {
                break;
              }
              message.pollIndex = reader.int64().toString();
              continue;
            }
            case 12: {
              if (tag !== 96) {
                break;
              }
              message.templateId = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastRankTextMessage() {
      return {
        common: void 0,
        scene: 0,
        ownerIdxBeforeUpdate: "0",
        ownerIdxAfterUpdate: "0",
        selfGetBadgeMsg: void 0,
        otherGetBadgeMsg: void 0,
        curUserId: "0"
      };
    }
    exports.WebcastRankTextMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.scene !== 0) {
          writer.uint32(16).int32(message.scene);
        }
        if (message.ownerIdxBeforeUpdate !== "0") {
          writer.uint32(24).int64(message.ownerIdxBeforeUpdate);
        }
        if (message.ownerIdxAfterUpdate !== "0") {
          writer.uint32(32).int64(message.ownerIdxAfterUpdate);
        }
        if (message.selfGetBadgeMsg !== void 0) {
          exports.Text.encode(message.selfGetBadgeMsg, writer.uint32(42).fork()).join();
        }
        if (message.otherGetBadgeMsg !== void 0) {
          exports.Text.encode(message.otherGetBadgeMsg, writer.uint32(50).fork()).join();
        }
        if (message.curUserId !== "0") {
          writer.uint32(56).int64(message.curUserId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastRankTextMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.scene = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.ownerIdxBeforeUpdate = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.ownerIdxAfterUpdate = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.selfGetBadgeMsg = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.otherGetBadgeMsg = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.curUserId = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicBattlePunishFinish() {
      return { common: void 0, channelId: "0", opUid: "0", reason: 0, battleId: "0", battleSettings: void 0 };
    }
    exports.WebcastLinkMicBattlePunishFinish = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.channelId !== "0") {
          writer.uint32(16).int64(message.channelId);
        }
        if (message.opUid !== "0") {
          writer.uint32(24).int64(message.opUid);
        }
        if (message.reason !== 0) {
          writer.uint32(32).int32(message.reason);
        }
        if (message.battleId !== "0") {
          writer.uint32(40).int64(message.battleId);
        }
        if (message.battleSettings !== void 0) {
          exports.BattleSetting.encode(message.battleSettings, writer.uint32(50).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattlePunishFinish();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.channelId = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.opUid = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.reason = reader.int32();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.battleId = reader.int64().toString();
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.battleSettings = exports.BattleSetting.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkmicBattleTaskMessage() {
      return {
        common: void 0,
        battleTaskMessageType: 0,
        taskStart: void 0,
        taskUpdate: void 0,
        taskSettle: void 0,
        rewardSettle: void 0,
        battleId: "0"
      };
    }
    exports.WebcastLinkmicBattleTaskMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.battleTaskMessageType !== 0) {
          writer.uint32(16).int32(message.battleTaskMessageType);
        }
        if (message.taskStart !== void 0) {
          exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart.encode(message.taskStart, writer.uint32(26).fork()).join();
        }
        if (message.taskUpdate !== void 0) {
          exports.WebcastLinkmicBattleTaskMessage_BattleTaskUpdate.encode(message.taskUpdate, writer.uint32(34).fork()).join();
        }
        if (message.taskSettle !== void 0) {
          exports.WebcastLinkmicBattleTaskMessage_BattleTaskSettle.encode(message.taskSettle, writer.uint32(42).fork()).join();
        }
        if (message.rewardSettle !== void 0) {
          exports.WebcastLinkmicBattleTaskMessage_BattleRewardSettle.encode(message.rewardSettle, writer.uint32(50).fork()).join();
        }
        if (message.battleId !== "0") {
          writer.uint32(160).int64(message.battleId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkmicBattleTaskMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.battleTaskMessageType = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.taskStart = exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.taskUpdate = exports.WebcastLinkmicBattleTaskMessage_BattleTaskUpdate.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.taskSettle = exports.WebcastLinkmicBattleTaskMessage_BattleTaskSettle.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.rewardSettle = exports.WebcastLinkmicBattleTaskMessage_BattleRewardSettle.decode(reader, reader.uint32());
              continue;
            }
            case 20: {
              if (tag !== 160) {
                break;
              }
              message.battleId = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkmicBattleTaskMessage_BattlePrompt() {
      return { promptKey: "", promptElements: [] };
    }
    exports.WebcastLinkmicBattleTaskMessage_BattlePrompt = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.promptKey !== "") {
          writer.uint32(10).string(message.promptKey);
        }
        for (const v of message.promptElements) {
          exports.WebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElem.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkmicBattleTaskMessage_BattlePrompt();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.promptKey = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.promptElements.push(exports.WebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElem.decode(reader, reader.uint32()));
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElem() {
      return { promptFieldKey: "", promptFieldValue: "" };
    }
    exports.WebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElem = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.promptFieldKey !== "") {
          writer.uint32(10).string(message.promptFieldKey);
        }
        if (message.promptFieldValue !== "") {
          writer.uint32(18).string(message.promptFieldValue);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElem();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.promptFieldKey = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.promptFieldValue = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart() {
      return { battleBonusConfig: void 0 };
    }
    exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.battleBonusConfig !== void 0) {
          exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig.encode(message.battleBonusConfig, writer.uint32(10).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.battleBonusConfig = exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig() {
      return {
        previewStartTime: "0",
        previewPeriodConfig: [],
        taskPeriodConfig: void 0,
        rewardPeriodConfig: void 0,
        taskGiftGuide: {},
        previewStartTimestamp: "0",
        previewClickActionSchemaUrl: ""
      };
    }
    exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.previewStartTime !== "0") {
          writer.uint32(8).int64(message.previewStartTime);
        }
        for (const v of message.previewPeriodConfig) {
          exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriod.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.taskPeriodConfig !== void 0) {
          exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfig.encode(message.taskPeriodConfig, writer.uint32(26).fork()).join();
        }
        if (message.rewardPeriodConfig !== void 0) {
          exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfig.encode(message.rewardPeriodConfig, writer.uint32(34).fork()).join();
        }
        Object.entries(message.taskGiftGuide).forEach(([key, value]) => {
          exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntry.encode({
            key,
            value
          }, writer.uint32(42).fork()).join();
        });
        if (message.previewStartTimestamp !== "0") {
          writer.uint32(48).int64(message.previewStartTimestamp);
        }
        if (message.previewClickActionSchemaUrl !== "") {
          writer.uint32(58).string(message.previewClickActionSchemaUrl);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.previewStartTime = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.previewPeriodConfig.push(exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriod.decode(reader, reader.uint32()));
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.taskPeriodConfig = exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfig.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.rewardPeriodConfig = exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfig.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              const entry5 = exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntry.decode(reader, reader.uint32());
              if (entry5.value !== void 0) {
                message.taskGiftGuide[entry5.key] = entry5.value;
              }
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.previewStartTimestamp = reader.int64().toString();
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.previewClickActionSchemaUrl = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntry() {
      return { key: "0", value: void 0 };
    }
    exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntry = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "0") {
          writer.uint32(8).int64(message.key);
        }
        if (message.value !== void 0) {
          exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntry();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.key = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.value = exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriod() {
      return { duration: "0", promot: void 0, icon: void 0 };
    }
    exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriod = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.duration !== "0") {
          writer.uint32(8).int64(message.duration);
        }
        if (message.promot !== void 0) {
          exports.WebcastLinkmicBattleTaskMessage_BattlePrompt.encode(message.promot, writer.uint32(18).fork()).join();
        }
        if (message.icon !== void 0) {
          exports.Image.encode(message.icon, writer.uint32(202).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriod();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.duration = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.promot = exports.WebcastLinkmicBattleTaskMessage_BattlePrompt.decode(reader, reader.uint32());
              continue;
            }
            case 25: {
              if (tag !== 202) {
                break;
              }
              message.icon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfig() {
      return {
        taskStartTime: "0",
        duration: "0",
        targetStartTimestamp: "0",
        clickAction: 0,
        clickToastPrompt: void 0,
        promptType: 0,
        taskStaticPrompt: void 0,
        progressTarget: "0",
        targetType: 0,
        icon: void 0,
        clickActionSchemaUrl: ""
      };
    }
    exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfig = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.taskStartTime !== "0") {
          writer.uint32(8).int64(message.taskStartTime);
        }
        if (message.duration !== "0") {
          writer.uint32(16).int64(message.duration);
        }
        if (message.targetStartTimestamp !== "0") {
          writer.uint32(24).int64(message.targetStartTimestamp);
        }
        if (message.clickAction !== 0) {
          writer.uint32(88).int32(message.clickAction);
        }
        if (message.clickToastPrompt !== void 0) {
          exports.WebcastLinkmicBattleTaskMessage_BattlePrompt.encode(message.clickToastPrompt, writer.uint32(98).fork()).join();
        }
        if (message.promptType !== 0) {
          writer.uint32(168).int32(message.promptType);
        }
        if (message.taskStaticPrompt !== void 0) {
          exports.WebcastLinkmicBattleTaskMessage_BattlePrompt.encode(message.taskStaticPrompt, writer.uint32(178).fork()).join();
        }
        if (message.progressTarget !== "0") {
          writer.uint32(184).int64(message.progressTarget);
        }
        if (message.targetType !== 0) {
          writer.uint32(192).int32(message.targetType);
        }
        if (message.icon !== void 0) {
          exports.Image.encode(message.icon, writer.uint32(202).fork()).join();
        }
        if (message.clickActionSchemaUrl !== "") {
          writer.uint32(210).string(message.clickActionSchemaUrl);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfig();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.taskStartTime = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.duration = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.targetStartTimestamp = reader.int64().toString();
              continue;
            }
            case 11: {
              if (tag !== 88) {
                break;
              }
              message.clickAction = reader.int32();
              continue;
            }
            case 12: {
              if (tag !== 98) {
                break;
              }
              message.clickToastPrompt = exports.WebcastLinkmicBattleTaskMessage_BattlePrompt.decode(reader, reader.uint32());
              continue;
            }
            case 21: {
              if (tag !== 168) {
                break;
              }
              message.promptType = reader.int32();
              continue;
            }
            case 22: {
              if (tag !== 178) {
                break;
              }
              message.taskStaticPrompt = exports.WebcastLinkmicBattleTaskMessage_BattlePrompt.decode(reader, reader.uint32());
              continue;
            }
            case 23: {
              if (tag !== 184) {
                break;
              }
              message.progressTarget = reader.int64().toString();
              continue;
            }
            case 24: {
              if (tag !== 192) {
                break;
              }
              message.targetType = reader.int32();
              continue;
            }
            case 25: {
              if (tag !== 202) {
                break;
              }
              message.icon = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 26: {
              if (tag !== 210) {
                break;
              }
              message.clickActionSchemaUrl = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfig() {
      return {
        rewardStartTime: "0",
        duration: "0",
        rewardMultiple: 0,
        rewardStartTimestamp: "0",
        rewardPraparePrompt: void 0,
        rewardingPrompt: void 0,
        clickPrompt: void 0
      };
    }
    exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfig = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rewardStartTime !== "0") {
          writer.uint32(8).int64(message.rewardStartTime);
        }
        if (message.duration !== "0") {
          writer.uint32(16).int64(message.duration);
        }
        if (message.rewardMultiple !== 0) {
          writer.uint32(24).int32(message.rewardMultiple);
        }
        if (message.rewardStartTimestamp !== "0") {
          writer.uint32(32).int64(message.rewardStartTimestamp);
        }
        if (message.rewardPraparePrompt !== void 0) {
          exports.WebcastLinkmicBattleTaskMessage_BattlePrompt.encode(message.rewardPraparePrompt, writer.uint32(90).fork()).join();
        }
        if (message.rewardingPrompt !== void 0) {
          exports.WebcastLinkmicBattleTaskMessage_BattlePrompt.encode(message.rewardingPrompt, writer.uint32(98).fork()).join();
        }
        if (message.clickPrompt !== void 0) {
          exports.WebcastLinkmicBattleTaskMessage_BattlePrompt.encode(message.clickPrompt, writer.uint32(106).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfig();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.rewardStartTime = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.duration = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.rewardMultiple = reader.int32();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.rewardStartTimestamp = reader.int64().toString();
              continue;
            }
            case 11: {
              if (tag !== 90) {
                break;
              }
              message.rewardPraparePrompt = exports.WebcastLinkmicBattleTaskMessage_BattlePrompt.decode(reader, reader.uint32());
              continue;
            }
            case 12: {
              if (tag !== 98) {
                break;
              }
              message.rewardingPrompt = exports.WebcastLinkmicBattleTaskMessage_BattlePrompt.decode(reader, reader.uint32());
              continue;
            }
            case 13: {
              if (tag !== 106) {
                break;
              }
              message.clickPrompt = exports.WebcastLinkmicBattleTaskMessage_BattlePrompt.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide() {
      return {
        guidePrompt: void 0,
        promptType: 0,
        disappearDuration: 0,
        iconImage: void 0,
        giftImage: void 0,
        recommendGiftId: "0",
        recommendGiftCount: 0,
        guideContent: void 0
      };
    }
    exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.guidePrompt !== void 0) {
          exports.WebcastLinkmicBattleTaskMessage_BattlePrompt.encode(message.guidePrompt, writer.uint32(10).fork()).join();
        }
        if (message.promptType !== 0) {
          writer.uint32(16).int32(message.promptType);
        }
        if (message.disappearDuration !== 0) {
          writer.uint32(24).int32(message.disappearDuration);
        }
        if (message.iconImage !== void 0) {
          exports.Image.encode(message.iconImage, writer.uint32(90).fork()).join();
        }
        if (message.giftImage !== void 0) {
          exports.Image.encode(message.giftImage, writer.uint32(98).fork()).join();
        }
        if (message.recommendGiftId !== "0") {
          writer.uint32(168).int64(message.recommendGiftId);
        }
        if (message.recommendGiftCount !== 0) {
          writer.uint32(176).int32(message.recommendGiftCount);
        }
        if (message.guideContent !== void 0) {
          exports.Text.encode(message.guideContent, writer.uint32(186).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.guidePrompt = exports.WebcastLinkmicBattleTaskMessage_BattlePrompt.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.promptType = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.disappearDuration = reader.int32();
              continue;
            }
            case 11: {
              if (tag !== 90) {
                break;
              }
              message.iconImage = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 12: {
              if (tag !== 98) {
                break;
              }
              message.giftImage = exports.Image.decode(reader, reader.uint32());
              continue;
            }
            case 21: {
              if (tag !== 168) {
                break;
              }
              message.recommendGiftId = reader.int64().toString();
              continue;
            }
            case 22: {
              if (tag !== 176) {
                break;
              }
              message.recommendGiftCount = reader.int32();
              continue;
            }
            case 23: {
              if (tag !== 186) {
                break;
              }
              message.guideContent = exports.Text.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkmicBattleTaskMessage_BattleTaskUpdate() {
      return { taskProgress: "0", fromUserUid: "0", promptKey: "", logId: "" };
    }
    exports.WebcastLinkmicBattleTaskMessage_BattleTaskUpdate = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.taskProgress !== "0") {
          writer.uint32(8).int64(message.taskProgress);
        }
        if (message.fromUserUid !== "0") {
          writer.uint32(16).int64(message.fromUserUid);
        }
        if (message.promptKey !== "") {
          writer.uint32(26).string(message.promptKey);
        }
        if (message.logId !== "") {
          writer.uint32(170).string(message.logId);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskUpdate();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.taskProgress = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.fromUserUid = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.promptKey = reader.string();
              continue;
            }
            case 21: {
              if (tag !== 170) {
                break;
              }
              message.logId = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkmicBattleTaskMessage_BattleTaskSettle() {
      return { taskResult: 0, rewardStartTime: "0", rewardStartTimestamp: "0" };
    }
    exports.WebcastLinkmicBattleTaskMessage_BattleTaskSettle = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.taskResult !== 0) {
          writer.uint32(8).int32(message.taskResult);
        }
        if (message.rewardStartTime !== "0") {
          writer.uint32(16).int64(message.rewardStartTime);
        }
        if (message.rewardStartTimestamp !== "0") {
          writer.uint32(24).int64(message.rewardStartTimestamp);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskSettle();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.taskResult = reader.int32();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.rewardStartTime = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.rewardStartTimestamp = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkmicBattleTaskMessage_BattleRewardSettle() {
      return { rewardSettlePrompt: void 0, status: 0 };
    }
    exports.WebcastLinkmicBattleTaskMessage_BattleRewardSettle = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rewardSettlePrompt !== void 0) {
          exports.WebcastLinkmicBattleTaskMessage_BattlePrompt.encode(message.rewardSettlePrompt, writer.uint32(10).fork()).join();
        }
        if (message.status !== 0) {
          writer.uint32(16).int32(message.status);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkmicBattleTaskMessage_BattleRewardSettle();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.rewardSettlePrompt = exports.WebcastLinkmicBattleTaskMessage_BattlePrompt.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.status = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicFanTicketMethod() {
      return { common: void 0, FanTicketRoomNotice: void 0 };
    }
    exports.WebcastLinkMicFanTicketMethod = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.FanTicketRoomNotice !== void 0) {
          exports.FanTicketRoomNoticeContent.encode(message.FanTicketRoomNotice, writer.uint32(18).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicFanTicketMethod();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.FanTicketRoomNotice = exports.FanTicketRoomNoticeContent.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMicMethod() {
      return {
        common: void 0,
        messageType: 0,
        accessKey: "",
        anchorLinkmicId: "0",
        userId: "0",
        fanTicket: "0",
        totalLinkMicFanTicket: "0",
        channelId: "0",
        layout: "0",
        vendor: "0",
        dimension: "0",
        theme: "",
        inviteUid: "0",
        reply: 0,
        duration: 0,
        matchType: 0,
        win: false,
        prompts: "",
        toUserId: "0",
        tips: "",
        startTimeMs: "0",
        confluenceType: 0,
        fromRoomId: "0",
        inviteType: 0,
        subType: "0",
        rtcExtInfo: "",
        appId: "",
        appSign: "",
        anchorLinkMicIdStr: "",
        rivalAnchorId: "0",
        rivalLinkmicId: 0,
        rivalLinkmicIdStr: "",
        shouldShowPopup: false,
        rtcJoinChannel: false,
        fanTicketType: 0
      };
    }
    exports.WebcastLinkMicMethod = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.messageType !== 0) {
          writer.uint32(16).int32(message.messageType);
        }
        if (message.accessKey !== "") {
          writer.uint32(26).string(message.accessKey);
        }
        if (message.anchorLinkmicId !== "0") {
          writer.uint32(32).int64(message.anchorLinkmicId);
        }
        if (message.userId !== "0") {
          writer.uint32(40).int64(message.userId);
        }
        if (message.fanTicket !== "0") {
          writer.uint32(48).int64(message.fanTicket);
        }
        if (message.totalLinkMicFanTicket !== "0") {
          writer.uint32(56).int64(message.totalLinkMicFanTicket);
        }
        if (message.channelId !== "0") {
          writer.uint32(64).int64(message.channelId);
        }
        if (message.layout !== "0") {
          writer.uint32(72).int64(message.layout);
        }
        if (message.vendor !== "0") {
          writer.uint32(80).int64(message.vendor);
        }
        if (message.dimension !== "0") {
          writer.uint32(88).int64(message.dimension);
        }
        if (message.theme !== "") {
          writer.uint32(98).string(message.theme);
        }
        if (message.inviteUid !== "0") {
          writer.uint32(104).int64(message.inviteUid);
        }
        if (message.reply !== 0) {
          writer.uint32(112).int32(message.reply);
        }
        if (message.duration !== 0) {
          writer.uint32(128).int32(message.duration);
        }
        if (message.matchType !== 0) {
          writer.uint32(144).int32(message.matchType);
        }
        if (message.win !== false) {
          writer.uint32(152).bool(message.win);
        }
        if (message.prompts !== "") {
          writer.uint32(162).string(message.prompts);
        }
        if (message.toUserId !== "0") {
          writer.uint32(168).int64(message.toUserId);
        }
        if (message.tips !== "") {
          writer.uint32(202).string(message.tips);
        }
        if (message.startTimeMs !== "0") {
          writer.uint32(208).int64(message.startTimeMs);
        }
        if (message.confluenceType !== 0) {
          writer.uint32(216).int32(message.confluenceType);
        }
        if (message.fromRoomId !== "0") {
          writer.uint32(224).int64(message.fromRoomId);
        }
        if (message.inviteType !== 0) {
          writer.uint32(232).int32(message.inviteType);
        }
        if (message.subType !== "0") {
          writer.uint32(240).int64(message.subType);
        }
        if (message.rtcExtInfo !== "") {
          writer.uint32(258).string(message.rtcExtInfo);
        }
        if (message.appId !== "") {
          writer.uint32(274).string(message.appId);
        }
        if (message.appSign !== "") {
          writer.uint32(282).string(message.appSign);
        }
        if (message.anchorLinkMicIdStr !== "") {
          writer.uint32(298).string(message.anchorLinkMicIdStr);
        }
        if (message.rivalAnchorId !== "0") {
          writer.uint32(304).int64(message.rivalAnchorId);
        }
        if (message.rivalLinkmicId !== 0) {
          writer.uint32(312).int32(message.rivalLinkmicId);
        }
        if (message.rivalLinkmicIdStr !== "") {
          writer.uint32(322).string(message.rivalLinkmicIdStr);
        }
        if (message.shouldShowPopup !== false) {
          writer.uint32(328).bool(message.shouldShowPopup);
        }
        if (message.rtcJoinChannel !== false) {
          writer.uint32(408).bool(message.rtcJoinChannel);
        }
        if (message.fanTicketType !== 0) {
          writer.uint32(416).int32(message.fanTicketType);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicMethod();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.messageType = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.accessKey = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.anchorLinkmicId = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.userId = reader.int64().toString();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.fanTicket = reader.int64().toString();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.totalLinkMicFanTicket = reader.int64().toString();
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.channelId = reader.int64().toString();
              continue;
            }
            case 9: {
              if (tag !== 72) {
                break;
              }
              message.layout = reader.int64().toString();
              continue;
            }
            case 10: {
              if (tag !== 80) {
                break;
              }
              message.vendor = reader.int64().toString();
              continue;
            }
            case 11: {
              if (tag !== 88) {
                break;
              }
              message.dimension = reader.int64().toString();
              continue;
            }
            case 12: {
              if (tag !== 98) {
                break;
              }
              message.theme = reader.string();
              continue;
            }
            case 13: {
              if (tag !== 104) {
                break;
              }
              message.inviteUid = reader.int64().toString();
              continue;
            }
            case 14: {
              if (tag !== 112) {
                break;
              }
              message.reply = reader.int32();
              continue;
            }
            case 16: {
              if (tag !== 128) {
                break;
              }
              message.duration = reader.int32();
              continue;
            }
            case 18: {
              if (tag !== 144) {
                break;
              }
              message.matchType = reader.int32();
              continue;
            }
            case 19: {
              if (tag !== 152) {
                break;
              }
              message.win = reader.bool();
              continue;
            }
            case 20: {
              if (tag !== 162) {
                break;
              }
              message.prompts = reader.string();
              continue;
            }
            case 21: {
              if (tag !== 168) {
                break;
              }
              message.toUserId = reader.int64().toString();
              continue;
            }
            case 25: {
              if (tag !== 202) {
                break;
              }
              message.tips = reader.string();
              continue;
            }
            case 26: {
              if (tag !== 208) {
                break;
              }
              message.startTimeMs = reader.int64().toString();
              continue;
            }
            case 27: {
              if (tag !== 216) {
                break;
              }
              message.confluenceType = reader.int32();
              continue;
            }
            case 28: {
              if (tag !== 224) {
                break;
              }
              message.fromRoomId = reader.int64().toString();
              continue;
            }
            case 29: {
              if (tag !== 232) {
                break;
              }
              message.inviteType = reader.int32();
              continue;
            }
            case 30: {
              if (tag !== 240) {
                break;
              }
              message.subType = reader.int64().toString();
              continue;
            }
            case 32: {
              if (tag !== 258) {
                break;
              }
              message.rtcExtInfo = reader.string();
              continue;
            }
            case 34: {
              if (tag !== 274) {
                break;
              }
              message.appId = reader.string();
              continue;
            }
            case 35: {
              if (tag !== 282) {
                break;
              }
              message.appSign = reader.string();
              continue;
            }
            case 37: {
              if (tag !== 298) {
                break;
              }
              message.anchorLinkMicIdStr = reader.string();
              continue;
            }
            case 38: {
              if (tag !== 304) {
                break;
              }
              message.rivalAnchorId = reader.int64().toString();
              continue;
            }
            case 39: {
              if (tag !== 312) {
                break;
              }
              message.rivalLinkmicId = reader.int32();
              continue;
            }
            case 40: {
              if (tag !== 322) {
                break;
              }
              message.rivalLinkmicIdStr = reader.string();
              continue;
            }
            case 41: {
              if (tag !== 328) {
                break;
              }
              message.shouldShowPopup = reader.bool();
              continue;
            }
            case 51: {
              if (tag !== 408) {
                break;
              }
              message.rtcJoinChannel = reader.bool();
              continue;
            }
            case 52: {
              if (tag !== 416) {
                break;
              }
              message.fanTicketType = reader.int32();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastUnauthorizedMemberMessage() {
      return {
        common: void 0,
        action: 0,
        nickNamePrefix: void 0,
        nickName: "",
        enterText: void 0,
        publicAreaCommon: void 0
      };
    }
    exports.WebcastUnauthorizedMemberMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.action !== 0) {
          writer.uint32(16).int32(message.action);
        }
        if (message.nickNamePrefix !== void 0) {
          exports.Text.encode(message.nickNamePrefix, writer.uint32(26).fork()).join();
        }
        if (message.nickName !== "") {
          writer.uint32(34).string(message.nickName);
        }
        if (message.enterText !== void 0) {
          exports.Text.encode(message.enterText, writer.uint32(42).fork()).join();
        }
        if (message.publicAreaCommon !== void 0) {
          exports.PublicAreaMessageCommon.encode(message.publicAreaCommon, writer.uint32(50).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastUnauthorizedMemberMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.action = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.nickNamePrefix = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.nickName = reader.string();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.enterText = exports.Text.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.publicAreaCommon = exports.PublicAreaMessageCommon.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastMsgDetectMessage() {
      return {
        common: void 0,
        detectType: 0,
        triggerCondition: void 0,
        timeInfo: void 0,
        triggerBy: 0,
        fromRegion: ""
      };
    }
    exports.WebcastMsgDetectMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.detectType !== 0) {
          writer.uint32(16).int32(message.detectType);
        }
        if (message.triggerCondition !== void 0) {
          exports.WebcastMsgDetectMessage_TriggerCondition.encode(message.triggerCondition, writer.uint32(26).fork()).join();
        }
        if (message.timeInfo !== void 0) {
          exports.WebcastMsgDetectMessage_TimeInfo.encode(message.timeInfo, writer.uint32(34).fork()).join();
        }
        if (message.triggerBy !== 0) {
          writer.uint32(40).int32(message.triggerBy);
        }
        if (message.fromRegion !== "") {
          writer.uint32(50).string(message.fromRegion);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastMsgDetectMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.detectType = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.triggerCondition = exports.WebcastMsgDetectMessage_TriggerCondition.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.timeInfo = exports.WebcastMsgDetectMessage_TimeInfo.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.triggerBy = reader.int32();
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.fromRegion = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastMsgDetectMessage_TimeInfo() {
      return { clientStartMs: "0", apiRecvTimeMs: "0", apiSendToGoimMs: "0" };
    }
    exports.WebcastMsgDetectMessage_TimeInfo = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.clientStartMs !== "0") {
          writer.uint32(8).int64(message.clientStartMs);
        }
        if (message.apiRecvTimeMs !== "0") {
          writer.uint32(16).int64(message.apiRecvTimeMs);
        }
        if (message.apiSendToGoimMs !== "0") {
          writer.uint32(24).int64(message.apiSendToGoimMs);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastMsgDetectMessage_TimeInfo();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.clientStartMs = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.apiRecvTimeMs = reader.int64().toString();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.apiSendToGoimMs = reader.int64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastMsgDetectMessage_TriggerCondition() {
      return {
        uplinkDetectHttp: false,
        uplinkDetectWebSocket: false,
        detectP2PMsg: false,
        detectRoomMsg: false,
        httpOptimize: false
      };
    }
    exports.WebcastMsgDetectMessage_TriggerCondition = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.uplinkDetectHttp !== false) {
          writer.uint32(8).bool(message.uplinkDetectHttp);
        }
        if (message.uplinkDetectWebSocket !== false) {
          writer.uint32(16).bool(message.uplinkDetectWebSocket);
        }
        if (message.detectP2PMsg !== false) {
          writer.uint32(24).bool(message.detectP2PMsg);
        }
        if (message.detectRoomMsg !== false) {
          writer.uint32(32).bool(message.detectRoomMsg);
        }
        if (message.httpOptimize !== false) {
          writer.uint32(40).bool(message.httpOptimize);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastMsgDetectMessage_TriggerCondition();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.uplinkDetectHttp = reader.bool();
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.uplinkDetectWebSocket = reader.bool();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.detectP2PMsg = reader.bool();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.detectRoomMsg = reader.bool();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.httpOptimize = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastOecLiveShoppingMessage() {
      return { common: void 0, data1: 0, shopData: void 0, shopTimings: void 0, details: void 0 };
    }
    exports.WebcastOecLiveShoppingMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.data1 !== 0) {
          writer.uint32(16).uint32(message.data1);
        }
        if (message.shopData !== void 0) {
          exports.WebcastOecLiveShoppingMessage_LiveShoppingData.encode(message.shopData, writer.uint32(34).fork()).join();
        }
        if (message.shopTimings !== void 0) {
          exports.TimeStampContainer.encode(message.shopTimings, writer.uint32(42).fork()).join();
        }
        if (message.details !== void 0) {
          exports.WebcastOecLiveShoppingMessage_LiveShoppingDetails.encode(message.details, writer.uint32(74).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastOecLiveShoppingMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.data1 = reader.uint32();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.shopData = exports.WebcastOecLiveShoppingMessage_LiveShoppingData.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.shopTimings = exports.TimeStampContainer.decode(reader, reader.uint32());
              continue;
            }
            case 9: {
              if (tag !== 74) {
                break;
              }
              message.details = exports.WebcastOecLiveShoppingMessage_LiveShoppingDetails.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastOecLiveShoppingMessage_LiveShoppingData() {
      return {
        title: "",
        priceString: "",
        imageUrl: "",
        shopUrl: "",
        data1: "0",
        shopName: "",
        data2: "0",
        shopUrl2: "",
        data3: "0",
        data4: "0"
      };
    }
    exports.WebcastOecLiveShoppingMessage_LiveShoppingData = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.title !== "") {
          writer.uint32(10).string(message.title);
        }
        if (message.priceString !== "") {
          writer.uint32(18).string(message.priceString);
        }
        if (message.imageUrl !== "") {
          writer.uint32(26).string(message.imageUrl);
        }
        if (message.shopUrl !== "") {
          writer.uint32(34).string(message.shopUrl);
        }
        if (message.data1 !== "0") {
          writer.uint32(48).uint64(message.data1);
        }
        if (message.shopName !== "") {
          writer.uint32(58).string(message.shopName);
        }
        if (message.data2 !== "0") {
          writer.uint32(64).uint64(message.data2);
        }
        if (message.shopUrl2 !== "") {
          writer.uint32(74).string(message.shopUrl2);
        }
        if (message.data3 !== "0") {
          writer.uint32(80).uint64(message.data3);
        }
        if (message.data4 !== "0") {
          writer.uint32(88).uint64(message.data4);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastOecLiveShoppingMessage_LiveShoppingData();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.title = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.priceString = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.imageUrl = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.shopUrl = reader.string();
              continue;
            }
            case 6: {
              if (tag !== 48) {
                break;
              }
              message.data1 = reader.uint64().toString();
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.shopName = reader.string();
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.data2 = reader.uint64().toString();
              continue;
            }
            case 9: {
              if (tag !== 74) {
                break;
              }
              message.shopUrl2 = reader.string();
              continue;
            }
            case 10: {
              if (tag !== 80) {
                break;
              }
              message.data3 = reader.uint64().toString();
              continue;
            }
            case 11: {
              if (tag !== 88) {
                break;
              }
              message.data4 = reader.uint64().toString();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastOecLiveShoppingMessage_LiveShoppingDetails() {
      return { id1: "", data1: "", data2: 0, timestamp: "0", data: void 0 };
    }
    exports.WebcastOecLiveShoppingMessage_LiveShoppingDetails = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id1 !== "") {
          writer.uint32(10).string(message.id1);
        }
        if (message.data1 !== "") {
          writer.uint32(26).string(message.data1);
        }
        if (message.data2 !== 0) {
          writer.uint32(32).uint32(message.data2);
        }
        if (message.timestamp !== "0") {
          writer.uint32(40).uint64(message.timestamp);
        }
        if (message.data !== void 0) {
          exports.ValueLabel.encode(message.data, writer.uint32(50).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastOecLiveShoppingMessage_LiveShoppingDetails();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.id1 = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.data1 = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.data2 = reader.uint32();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.timestamp = reader.uint64().toString();
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.data = exports.ValueLabel.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastRoomPinMessage() {
      return {
        common: void 0,
        chatMessage: void 0,
        socialMessage: void 0,
        giftMessage: void 0,
        memberMessage: void 0,
        likeMessage: void 0,
        method: "",
        pinTime: "0",
        operator: void 0,
        action: 0,
        displayDuration: "0",
        pinId: "0",
        ecStreamerKey: ""
      };
    }
    exports.WebcastRoomPinMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.chatMessage !== void 0) {
          exports.WebcastChatMessage.encode(message.chatMessage, writer.uint32(18).fork()).join();
        }
        if (message.socialMessage !== void 0) {
          exports.WebcastSocialMessage.encode(message.socialMessage, writer.uint32(26).fork()).join();
        }
        if (message.giftMessage !== void 0) {
          exports.WebcastGiftMessage.encode(message.giftMessage, writer.uint32(34).fork()).join();
        }
        if (message.memberMessage !== void 0) {
          exports.WebcastMemberMessage.encode(message.memberMessage, writer.uint32(42).fork()).join();
        }
        if (message.likeMessage !== void 0) {
          exports.WebcastLikeMessage.encode(message.likeMessage, writer.uint32(50).fork()).join();
        }
        if (message.method !== "") {
          writer.uint32(242).string(message.method);
        }
        if (message.pinTime !== "0") {
          writer.uint32(248).int64(message.pinTime);
        }
        if (message.operator !== void 0) {
          exports.User.encode(message.operator, writer.uint32(258).fork()).join();
        }
        if (message.action !== 0) {
          writer.uint32(264).int32(message.action);
        }
        if (message.displayDuration !== "0") {
          writer.uint32(272).int64(message.displayDuration);
        }
        if (message.pinId !== "0") {
          writer.uint32(280).int64(message.pinId);
        }
        if (message.ecStreamerKey !== "") {
          writer.uint32(290).string(message.ecStreamerKey);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastRoomPinMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.chatMessage = exports.WebcastChatMessage.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.socialMessage = exports.WebcastSocialMessage.decode(reader, reader.uint32());
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.giftMessage = exports.WebcastGiftMessage.decode(reader, reader.uint32());
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.memberMessage = exports.WebcastMemberMessage.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.likeMessage = exports.WebcastLikeMessage.decode(reader, reader.uint32());
              continue;
            }
            case 30: {
              if (tag !== 242) {
                break;
              }
              message.method = reader.string();
              continue;
            }
            case 31: {
              if (tag !== 248) {
                break;
              }
              message.pinTime = reader.int64().toString();
              continue;
            }
            case 32: {
              if (tag !== 258) {
                break;
              }
              message.operator = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 33: {
              if (tag !== 264) {
                break;
              }
              message.action = reader.int32();
              continue;
            }
            case 34: {
              if (tag !== 272) {
                break;
              }
              message.displayDuration = reader.int64().toString();
              continue;
            }
            case 35: {
              if (tag !== 280) {
                break;
              }
              message.pinId = reader.int64().toString();
              continue;
            }
            case 36: {
              if (tag !== 290) {
                break;
              }
              message.ecStreamerKey = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkMessage() {
      return {
        common: void 0,
        MessageType: 0,
        LinkerId: "0",
        Scene: 0,
        InviteContent: void 0,
        ReplyContent: void 0,
        CreateContent: void 0,
        CloseContent: void 0,
        EnterContent: void 0,
        LeaveContent: void 0,
        CancelContent: void 0,
        KickOutContent: void 0,
        LinkedListChangeContent: void 0,
        UpdateUserContent: void 0,
        WaitingListChangeContent: void 0,
        MuteContent: void 0,
        RandomMatchContent: void 0,
        UpdateUserSettingContent: void 0,
        MicIdxUpdateContent: void 0,
        ListChangeContent: void 0,
        CohostListChangeContent: void 0,
        MediaChangeContent: void 0,
        AcceptNoticeContent: void 0,
        SysKickOutContent: void 0,
        UserToastContent: void 0,
        extra: "",
        expireTimestamp: "0",
        transferExtra: ""
      };
    }
    exports.WebcastLinkMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.MessageType !== 0) {
          writer.uint32(16).int32(message.MessageType);
        }
        if (message.LinkerId !== "0") {
          writer.uint32(24).int64(message.LinkerId);
        }
        if (message.Scene !== 0) {
          writer.uint32(32).int32(message.Scene);
        }
        if (message.InviteContent !== void 0) {
          exports.LinkerInviteContent.encode(message.InviteContent, writer.uint32(42).fork()).join();
        }
        if (message.ReplyContent !== void 0) {
          exports.LinkerReplyContent.encode(message.ReplyContent, writer.uint32(50).fork()).join();
        }
        if (message.CreateContent !== void 0) {
          exports.LinkerCreateContent.encode(message.CreateContent, writer.uint32(58).fork()).join();
        }
        if (message.CloseContent !== void 0) {
          exports.LinkerCloseContent.encode(message.CloseContent, writer.uint32(66).fork()).join();
        }
        if (message.EnterContent !== void 0) {
          exports.LinkerEnterContent.encode(message.EnterContent, writer.uint32(74).fork()).join();
        }
        if (message.LeaveContent !== void 0) {
          exports.LinkerLeaveContent.encode(message.LeaveContent, writer.uint32(82).fork()).join();
        }
        if (message.CancelContent !== void 0) {
          exports.LinkerCancelContent.encode(message.CancelContent, writer.uint32(90).fork()).join();
        }
        if (message.KickOutContent !== void 0) {
          exports.LinkerKickOutContent.encode(message.KickOutContent, writer.uint32(98).fork()).join();
        }
        if (message.LinkedListChangeContent !== void 0) {
          exports.LinkerLinkedListChangeContent.encode(message.LinkedListChangeContent, writer.uint32(106).fork()).join();
        }
        if (message.UpdateUserContent !== void 0) {
          exports.LinkerUpdateUserContent.encode(message.UpdateUserContent, writer.uint32(114).fork()).join();
        }
        if (message.WaitingListChangeContent !== void 0) {
          exports.LinkerWaitingListChangeContent.encode(message.WaitingListChangeContent, writer.uint32(122).fork()).join();
        }
        if (message.MuteContent !== void 0) {
          exports.LinkerMuteContent.encode(message.MuteContent, writer.uint32(130).fork()).join();
        }
        if (message.RandomMatchContent !== void 0) {
          exports.LinkerRandomMatchContent.encode(message.RandomMatchContent, writer.uint32(138).fork()).join();
        }
        if (message.UpdateUserSettingContent !== void 0) {
          exports.LinkerUpdateUserSettingContent.encode(message.UpdateUserSettingContent, writer.uint32(146).fork()).join();
        }
        if (message.MicIdxUpdateContent !== void 0) {
          exports.LinkerMicIdxUpdateContent.encode(message.MicIdxUpdateContent, writer.uint32(154).fork()).join();
        }
        if (message.ListChangeContent !== void 0) {
          exports.LinkerListChangeContent.encode(message.ListChangeContent, writer.uint32(162).fork()).join();
        }
        if (message.CohostListChangeContent !== void 0) {
          exports.CohostListChangeContent.encode(message.CohostListChangeContent, writer.uint32(170).fork()).join();
        }
        if (message.MediaChangeContent !== void 0) {
          exports.LinkerMediaChangeContent.encode(message.MediaChangeContent, writer.uint32(178).fork()).join();
        }
        if (message.AcceptNoticeContent !== void 0) {
          exports.LinkerAcceptNoticeContent.encode(message.AcceptNoticeContent, writer.uint32(186).fork()).join();
        }
        if (message.SysKickOutContent !== void 0) {
          exports.LinkerSysKickOutContent.encode(message.SysKickOutContent, writer.uint32(810).fork()).join();
        }
        if (message.UserToastContent !== void 0) {
          exports.LinkmicUserToastContent.encode(message.UserToastContent, writer.uint32(818).fork()).join();
        }
        if (message.extra !== "") {
          writer.uint32(1602).string(message.extra);
        }
        if (message.expireTimestamp !== "0") {
          writer.uint32(1608).int64(message.expireTimestamp);
        }
        if (message.transferExtra !== "") {
          writer.uint32(1618).string(message.transferExtra);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.MessageType = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.LinkerId = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.Scene = reader.int32();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.InviteContent = exports.LinkerInviteContent.decode(reader, reader.uint32());
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.ReplyContent = exports.LinkerReplyContent.decode(reader, reader.uint32());
              continue;
            }
            case 7: {
              if (tag !== 58) {
                break;
              }
              message.CreateContent = exports.LinkerCreateContent.decode(reader, reader.uint32());
              continue;
            }
            case 8: {
              if (tag !== 66) {
                break;
              }
              message.CloseContent = exports.LinkerCloseContent.decode(reader, reader.uint32());
              continue;
            }
            case 9: {
              if (tag !== 74) {
                break;
              }
              message.EnterContent = exports.LinkerEnterContent.decode(reader, reader.uint32());
              continue;
            }
            case 10: {
              if (tag !== 82) {
                break;
              }
              message.LeaveContent = exports.LinkerLeaveContent.decode(reader, reader.uint32());
              continue;
            }
            case 11: {
              if (tag !== 90) {
                break;
              }
              message.CancelContent = exports.LinkerCancelContent.decode(reader, reader.uint32());
              continue;
            }
            case 12: {
              if (tag !== 98) {
                break;
              }
              message.KickOutContent = exports.LinkerKickOutContent.decode(reader, reader.uint32());
              continue;
            }
            case 13: {
              if (tag !== 106) {
                break;
              }
              message.LinkedListChangeContent = exports.LinkerLinkedListChangeContent.decode(reader, reader.uint32());
              continue;
            }
            case 14: {
              if (tag !== 114) {
                break;
              }
              message.UpdateUserContent = exports.LinkerUpdateUserContent.decode(reader, reader.uint32());
              continue;
            }
            case 15: {
              if (tag !== 122) {
                break;
              }
              message.WaitingListChangeContent = exports.LinkerWaitingListChangeContent.decode(reader, reader.uint32());
              continue;
            }
            case 16: {
              if (tag !== 130) {
                break;
              }
              message.MuteContent = exports.LinkerMuteContent.decode(reader, reader.uint32());
              continue;
            }
            case 17: {
              if (tag !== 138) {
                break;
              }
              message.RandomMatchContent = exports.LinkerRandomMatchContent.decode(reader, reader.uint32());
              continue;
            }
            case 18: {
              if (tag !== 146) {
                break;
              }
              message.UpdateUserSettingContent = exports.LinkerUpdateUserSettingContent.decode(reader, reader.uint32());
              continue;
            }
            case 19: {
              if (tag !== 154) {
                break;
              }
              message.MicIdxUpdateContent = exports.LinkerMicIdxUpdateContent.decode(reader, reader.uint32());
              continue;
            }
            case 20: {
              if (tag !== 162) {
                break;
              }
              message.ListChangeContent = exports.LinkerListChangeContent.decode(reader, reader.uint32());
              continue;
            }
            case 21: {
              if (tag !== 170) {
                break;
              }
              message.CohostListChangeContent = exports.CohostListChangeContent.decode(reader, reader.uint32());
              continue;
            }
            case 22: {
              if (tag !== 178) {
                break;
              }
              message.MediaChangeContent = exports.LinkerMediaChangeContent.decode(reader, reader.uint32());
              continue;
            }
            case 23: {
              if (tag !== 186) {
                break;
              }
              message.AcceptNoticeContent = exports.LinkerAcceptNoticeContent.decode(reader, reader.uint32());
              continue;
            }
            case 101: {
              if (tag !== 810) {
                break;
              }
              message.SysKickOutContent = exports.LinkerSysKickOutContent.decode(reader, reader.uint32());
              continue;
            }
            case 102: {
              if (tag !== 818) {
                break;
              }
              message.UserToastContent = exports.LinkmicUserToastContent.decode(reader, reader.uint32());
              continue;
            }
            case 200: {
              if (tag !== 1602) {
                break;
              }
              message.extra = reader.string();
              continue;
            }
            case 201: {
              if (tag !== 1608) {
                break;
              }
              message.expireTimestamp = reader.int64().toString();
              continue;
            }
            case 202: {
              if (tag !== 1618) {
                break;
              }
              message.transferExtra = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastLinkLayerMessage() {
      return {
        common: void 0,
        messageType: 0,
        channelId: "0",
        scene: 0,
        source: "",
        centerizedIdc: "",
        rtcRoomId: "0",
        createChannelContent: void 0,
        listChangeContent: void 0,
        inviteContent: void 0,
        applyContent: void 0,
        permitApplyContent: void 0,
        replyInviteContent: void 0,
        kickOutContent: void 0,
        cancelApplyContent: void 0,
        cancelInviteContent: void 0,
        leaveContent: void 0,
        finishContent: void 0,
        joinDirectContent: void 0,
        joinGroupContent: void 0,
        permitGroupContent: void 0,
        cancelGroupContent: void 0,
        leaveGroupContent: void 0,
        p2pGroupChangeContent: void 0,
        groupChangeContent: void 0,
        businessContent: void 0
      };
    }
    exports.WebcastLinkLayerMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.messageType !== 0) {
          writer.uint32(16).int32(message.messageType);
        }
        if (message.channelId !== "0") {
          writer.uint32(24).int64(message.channelId);
        }
        if (message.scene !== 0) {
          writer.uint32(32).int32(message.scene);
        }
        if (message.source !== "") {
          writer.uint32(42).string(message.source);
        }
        if (message.centerizedIdc !== "") {
          writer.uint32(50).string(message.centerizedIdc);
        }
        if (message.rtcRoomId !== "0") {
          writer.uint32(56).int64(message.rtcRoomId);
        }
        if (message.createChannelContent !== void 0) {
          exports.CreateChannelContent.encode(message.createChannelContent, writer.uint32(802).fork()).join();
        }
        if (message.listChangeContent !== void 0) {
          exports.ListChangeContent.encode(message.listChangeContent, writer.uint32(818).fork()).join();
        }
        if (message.inviteContent !== void 0) {
          exports.InviteContent.encode(message.inviteContent, writer.uint32(826).fork()).join();
        }
        if (message.applyContent !== void 0) {
          exports.ApplyContent.encode(message.applyContent, writer.uint32(834).fork()).join();
        }
        if (message.permitApplyContent !== void 0) {
          exports.PermitApplyContent.encode(message.permitApplyContent, writer.uint32(842).fork()).join();
        }
        if (message.replyInviteContent !== void 0) {
          exports.ReplyInviteContent.encode(message.replyInviteContent, writer.uint32(850).fork()).join();
        }
        if (message.kickOutContent !== void 0) {
          exports.KickOutContent.encode(message.kickOutContent, writer.uint32(858).fork()).join();
        }
        if (message.cancelApplyContent !== void 0) {
          exports.CancelApplyContent.encode(message.cancelApplyContent, writer.uint32(866).fork()).join();
        }
        if (message.cancelInviteContent !== void 0) {
          exports.CancelInviteContent.encode(message.cancelInviteContent, writer.uint32(874).fork()).join();
        }
        if (message.leaveContent !== void 0) {
          exports.LeaveContent.encode(message.leaveContent, writer.uint32(882).fork()).join();
        }
        if (message.finishContent !== void 0) {
          exports.FinishChannelContent.encode(message.finishContent, writer.uint32(890).fork()).join();
        }
        if (message.joinDirectContent !== void 0) {
          exports.JoinDirectContent.encode(message.joinDirectContent, writer.uint32(898).fork()).join();
        }
        if (message.joinGroupContent !== void 0) {
          exports.JoinGroupContent.encode(message.joinGroupContent, writer.uint32(906).fork()).join();
        }
        if (message.permitGroupContent !== void 0) {
          exports.PermitJoinGroupContent.encode(message.permitGroupContent, writer.uint32(914).fork()).join();
        }
        if (message.cancelGroupContent !== void 0) {
          exports.CancelJoinGroupContent.encode(message.cancelGroupContent, writer.uint32(922).fork()).join();
        }
        if (message.leaveGroupContent !== void 0) {
          exports.LeaveJoinGroupContent.encode(message.leaveGroupContent, writer.uint32(930).fork()).join();
        }
        if (message.p2pGroupChangeContent !== void 0) {
          exports.P2PGroupChangeContent.encode(message.p2pGroupChangeContent, writer.uint32(938).fork()).join();
        }
        if (message.groupChangeContent !== void 0) {
          exports.GroupChangeContent.encode(message.groupChangeContent, writer.uint32(946).fork()).join();
        }
        if (message.businessContent !== void 0) {
          exports.BusinessContent.encode(message.businessContent, writer.uint32(1602).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkLayerMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.messageType = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.channelId = reader.int64().toString();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.scene = reader.int32();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.source = reader.string();
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.centerizedIdc = reader.string();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.rtcRoomId = reader.int64().toString();
              continue;
            }
            case 100: {
              if (tag !== 802) {
                break;
              }
              message.createChannelContent = exports.CreateChannelContent.decode(reader, reader.uint32());
              continue;
            }
            case 102: {
              if (tag !== 818) {
                break;
              }
              message.listChangeContent = exports.ListChangeContent.decode(reader, reader.uint32());
              continue;
            }
            case 103: {
              if (tag !== 826) {
                break;
              }
              message.inviteContent = exports.InviteContent.decode(reader, reader.uint32());
              continue;
            }
            case 104: {
              if (tag !== 834) {
                break;
              }
              message.applyContent = exports.ApplyContent.decode(reader, reader.uint32());
              continue;
            }
            case 105: {
              if (tag !== 842) {
                break;
              }
              message.permitApplyContent = exports.PermitApplyContent.decode(reader, reader.uint32());
              continue;
            }
            case 106: {
              if (tag !== 850) {
                break;
              }
              message.replyInviteContent = exports.ReplyInviteContent.decode(reader, reader.uint32());
              continue;
            }
            case 107: {
              if (tag !== 858) {
                break;
              }
              message.kickOutContent = exports.KickOutContent.decode(reader, reader.uint32());
              continue;
            }
            case 108: {
              if (tag !== 866) {
                break;
              }
              message.cancelApplyContent = exports.CancelApplyContent.decode(reader, reader.uint32());
              continue;
            }
            case 109: {
              if (tag !== 874) {
                break;
              }
              message.cancelInviteContent = exports.CancelInviteContent.decode(reader, reader.uint32());
              continue;
            }
            case 110: {
              if (tag !== 882) {
                break;
              }
              message.leaveContent = exports.LeaveContent.decode(reader, reader.uint32());
              continue;
            }
            case 111: {
              if (tag !== 890) {
                break;
              }
              message.finishContent = exports.FinishChannelContent.decode(reader, reader.uint32());
              continue;
            }
            case 112: {
              if (tag !== 898) {
                break;
              }
              message.joinDirectContent = exports.JoinDirectContent.decode(reader, reader.uint32());
              continue;
            }
            case 113: {
              if (tag !== 906) {
                break;
              }
              message.joinGroupContent = exports.JoinGroupContent.decode(reader, reader.uint32());
              continue;
            }
            case 114: {
              if (tag !== 914) {
                break;
              }
              message.permitGroupContent = exports.PermitJoinGroupContent.decode(reader, reader.uint32());
              continue;
            }
            case 115: {
              if (tag !== 922) {
                break;
              }
              message.cancelGroupContent = exports.CancelJoinGroupContent.decode(reader, reader.uint32());
              continue;
            }
            case 116: {
              if (tag !== 930) {
                break;
              }
              message.leaveGroupContent = exports.LeaveJoinGroupContent.decode(reader, reader.uint32());
              continue;
            }
            case 117: {
              if (tag !== 938) {
                break;
              }
              message.p2pGroupChangeContent = exports.P2PGroupChangeContent.decode(reader, reader.uint32());
              continue;
            }
            case 118: {
              if (tag !== 946) {
                break;
              }
              message.groupChangeContent = exports.GroupChangeContent.decode(reader, reader.uint32());
              continue;
            }
            case 200: {
              if (tag !== 1602) {
                break;
              }
              message.businessContent = exports.BusinessContent.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseRoomVerifyMessage() {
      return { common: void 0, action: 0, content: "", noticeType: "0", closeRoom: false };
    }
    exports.RoomVerifyMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== void 0) {
          exports.CommonMessageData.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.action !== 0) {
          writer.uint32(16).int32(message.action);
        }
        if (message.content !== "") {
          writer.uint32(26).string(message.content);
        }
        if (message.noticeType !== "0") {
          writer.uint32(32).int64(message.noticeType);
        }
        if (message.closeRoom !== false) {
          writer.uint32(40).bool(message.closeRoom);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseRoomVerifyMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.common = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.action = reader.int32();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.content = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.noticeType = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 40) {
                break;
              }
              message.closeRoom = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastBarrageMessageOld() {
      return { event: void 0, msgType: 0, content: void 0 };
    }
    exports.WebcastBarrageMessageOld = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.event !== void 0) {
          exports.CommonMessageData.encode(message.event, writer.uint32(10).fork()).join();
        }
        if (message.msgType !== 0) {
          writer.uint32(24).int32(message.msgType);
        }
        if (message.content !== void 0) {
          exports.WebcastBarrageMessageOld_Text.encode(message.content, writer.uint32(42).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessageOld();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.event = exports.CommonMessageData.decode(reader, reader.uint32());
              continue;
            }
            case 3: {
              if (tag !== 24) {
                break;
              }
              message.msgType = reader.int32();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.content = exports.WebcastBarrageMessageOld_Text.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastBarrageMessageOld_Text() {
      return { key: "", defaultPattern: "", pieces: [] };
    }
    exports.WebcastBarrageMessageOld_Text = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
          writer.uint32(10).string(message.key);
        }
        if (message.defaultPattern !== "") {
          writer.uint32(18).string(message.defaultPattern);
        }
        for (const v of message.pieces) {
          exports.WebcastBarrageMessageOld_TextPiece.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessageOld_Text();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.key = reader.string();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.defaultPattern = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 34) {
                break;
              }
              message.pieces.push(exports.WebcastBarrageMessageOld_TextPiece.decode(reader, reader.uint32()));
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastBarrageMessageOld_TextPiece() {
      return { type: 0, stringValue: "", userValue: void 0 };
    }
    exports.WebcastBarrageMessageOld_TextPiece = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== 0) {
          writer.uint32(8).int32(message.type);
        }
        if (message.stringValue !== "") {
          writer.uint32(90).string(message.stringValue);
        }
        if (message.userValue !== void 0) {
          exports.WebcastBarrageMessageOld_TextPieceUser.encode(message.userValue, writer.uint32(170).fork()).join();
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessageOld_TextPiece();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.type = reader.int32();
              continue;
            }
            case 11: {
              if (tag !== 90) {
                break;
              }
              message.stringValue = reader.string();
              continue;
            }
            case 21: {
              if (tag !== 170) {
                break;
              }
              message.userValue = exports.WebcastBarrageMessageOld_TextPieceUser.decode(reader, reader.uint32());
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastBarrageMessageOld_TextPieceUser() {
      return { user: void 0, withColon: false };
    }
    exports.WebcastBarrageMessageOld_TextPieceUser = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.user !== void 0) {
          exports.User.encode(message.user, writer.uint32(10).fork()).join();
        }
        if (message.withColon !== false) {
          writer.uint32(16).bool(message.withColon);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessageOld_TextPieceUser();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }
              message.user = exports.User.decode(reader, reader.uint32());
              continue;
            }
            case 2: {
              if (tag !== 16) {
                break;
              }
              message.withColon = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
    function createBaseWebcastImEnterRoomMessage() {
      return {
        roomId: "0",
        roomTag: "",
        liveRegion: "",
        liveId: "0",
        identity: "",
        cursor: "",
        accountType: "0",
        enterUniqueId: "0",
        filterWelcomeMsg: "",
        isAnchorContinueKeepMsg: false
      };
    }
    exports.WebcastImEnterRoomMessage = {
      encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.roomId !== "0") {
          writer.uint32(8).int64(message.roomId);
        }
        if (message.roomTag !== "") {
          writer.uint32(18).string(message.roomTag);
        }
        if (message.liveRegion !== "") {
          writer.uint32(26).string(message.liveRegion);
        }
        if (message.liveId !== "0") {
          writer.uint32(32).int64(message.liveId);
        }
        if (message.identity !== "") {
          writer.uint32(42).string(message.identity);
        }
        if (message.cursor !== "") {
          writer.uint32(50).string(message.cursor);
        }
        if (message.accountType !== "0") {
          writer.uint32(56).int64(message.accountType);
        }
        if (message.enterUniqueId !== "0") {
          writer.uint32(64).int64(message.enterUniqueId);
        }
        if (message.filterWelcomeMsg !== "") {
          writer.uint32(74).string(message.filterWelcomeMsg);
        }
        if (message.isAnchorContinueKeepMsg !== false) {
          writer.uint32(80).bool(message.isAnchorContinueKeepMsg);
        }
        return writer;
      },
      decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === void 0 ? reader.len : reader.pos + length;
        const message = createBaseWebcastImEnterRoomMessage();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 8) {
                break;
              }
              message.roomId = reader.int64().toString();
              continue;
            }
            case 2: {
              if (tag !== 18) {
                break;
              }
              message.roomTag = reader.string();
              continue;
            }
            case 3: {
              if (tag !== 26) {
                break;
              }
              message.liveRegion = reader.string();
              continue;
            }
            case 4: {
              if (tag !== 32) {
                break;
              }
              message.liveId = reader.int64().toString();
              continue;
            }
            case 5: {
              if (tag !== 42) {
                break;
              }
              message.identity = reader.string();
              continue;
            }
            case 6: {
              if (tag !== 50) {
                break;
              }
              message.cursor = reader.string();
              continue;
            }
            case 7: {
              if (tag !== 56) {
                break;
              }
              message.accountType = reader.int64().toString();
              continue;
            }
            case 8: {
              if (tag !== 64) {
                break;
              }
              message.enterUniqueId = reader.int64().toString();
              continue;
            }
            case 9: {
              if (tag !== 74) {
                break;
              }
              message.filterWelcomeMsg = reader.string();
              continue;
            }
            case 10: {
              if (tag !== 80) {
                break;
              }
              message.isAnchorContinueKeepMsg = reader.bool();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      }
    };
  }
});

// browser-external:node:zlib
var require_node_zlib = __commonJS({
  "browser-external:node:zlib"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node:zlib" has been externalized for browser compatibility. Cannot access "node:zlib.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:node:util
var require_node_util = __commonJS({
  "browser-external:node:util"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "node:util" has been externalized for browser compatibility. Cannot access "node:util.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/tiktok-live-connector/dist/lib/utilities.js
var require_utilities = __commonJS({
  "node_modules/tiktok-live-connector/dist/lib/utilities.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createBaseWebcastPushFrame = exports.generateDeviceId = exports.userAgentToDevicePreset = exports.validateAndNormalizeUniqueId = exports.deserializeWebSocketMessage = exports.deserializeMessage = exports.WebcastDeserializeConfig = void 0;
    var tikTokSchema = __importStar(require_tiktok_schema());
    var tiktok_schema_1 = require_tiktok_schema();
    var zlib = __importStar(require_node_zlib());
    var util = __importStar(require_node_util());
    var errors_1 = require_errors();
    var unzip = util.promisify(zlib.unzip);
    function hasProtoName(protoName) {
      return !!tikTokSchema[protoName];
    }
    exports.WebcastDeserializeConfig = {
      skipMessageTypes: []
    };
    function deserializeMessage(protoName, binaryMessage) {
      const messageFn = tikTokSchema[protoName];
      if (!messageFn)
        throw new errors_1.InvalidSchemaNameError(`Invalid schema name: ${protoName}`);
      let deserializedMessage;
      try {
        deserializedMessage = messageFn.decode(binaryMessage);
      } catch (ex) {
        throw new errors_1.SchemaDecodeError(`Failed to decode message type: ${protoName}: ` + ex.stack);
      }
      if (protoName === "ProtoMessageFetchResult") {
        for (const message of deserializedMessage.messages || []) {
          if (exports.WebcastDeserializeConfig.skipMessageTypes.includes(message.type)) {
            continue;
          }
          if (!hasProtoName(message.type)) {
            continue;
          }
          message.decodedData = {
            type: message.type,
            data: deserializeMessage(message.type, Buffer.from(message.payload))
          };
        }
      }
      return deserializedMessage;
    }
    exports.deserializeMessage = deserializeMessage;
    async function deserializeWebSocketMessage(binaryMessage) {
      const rawWebcastWebSocketMessage = tiktok_schema_1.WebcastPushFrame.decode(binaryMessage);
      let protoMessageFetchResult = void 0;
      if (rawWebcastWebSocketMessage.payloadEncoding === "pb" && rawWebcastWebSocketMessage.payload) {
        let binary = rawWebcastWebSocketMessage.payload;
        if (binary && binary.length > 2 && binary[0] === 31 && binary[1] === 139 && binary[2] === 8) {
          rawWebcastWebSocketMessage.payload = await unzip(binary);
        }
        protoMessageFetchResult = deserializeMessage("ProtoMessageFetchResult", Buffer.from(rawWebcastWebSocketMessage.payload));
      }
      const decodedContainer = rawWebcastWebSocketMessage;
      decodedContainer.protoMessageFetchResult = protoMessageFetchResult;
      return decodedContainer;
    }
    exports.deserializeWebSocketMessage = deserializeWebSocketMessage;
    function validateAndNormalizeUniqueId(uniqueId) {
      if (typeof uniqueId !== "string") {
        throw new errors_1.InvalidUniqueIdError("Missing or invalid value for 'uniqueId'. Please provide the username from TikTok URL.");
      }
      uniqueId = uniqueId.replace("https://www.tiktok.com/", "");
      uniqueId = uniqueId.replace("/live", "");
      uniqueId = uniqueId.replace("@", "");
      uniqueId = uniqueId.trim();
      return uniqueId;
    }
    exports.validateAndNormalizeUniqueId = validateAndNormalizeUniqueId;
    function userAgentToDevicePreset(userAgent) {
      const firstSlash = userAgent.indexOf("/");
      const browserName = userAgent.substring(0, firstSlash);
      const browserVersion = userAgent.substring(firstSlash + 1);
      return {
        user_agent: userAgent,
        browser_name: browserName,
        browser_version: browserVersion,
        browser_platform: userAgent.includes("Macintosh") ? "MacIntel" : "Win32",
        os: userAgent.includes("Macintosh") ? "mac" : "windows"
      };
    }
    exports.userAgentToDevicePreset = userAgentToDevicePreset;
    function generateDeviceId() {
      let digits = "";
      for (let i = 0; i < 19; i++) {
        digits += Math.floor(Math.random() * 10);
      }
      return digits;
    }
    exports.generateDeviceId = generateDeviceId;
    function createBaseWebcastPushFrame(overrides) {
      const undefinedNum = "0";
      overrides = Object.fromEntries(Object.entries(overrides).filter(([_, value]) => value !== void 0));
      return tiktok_schema_1.WebcastPushFrame.encode({
        seqId: undefinedNum,
        logId: undefinedNum,
        payloadEncoding: "pb",
        payloadType: "msg",
        payload: new Uint8Array(),
        service: undefinedNum,
        method: undefinedNum,
        headers: {},
        ...overrides
      });
    }
    exports.createBaseWebcastPushFrame = createBaseWebcastPushFrame;
  }
});

// node_modules/tiktok-live-connector/dist/version.js
var require_version = __commonJS({
  "node_modules/tiktok-live-connector/dist/version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VERSION = void 0;
    exports.VERSION = "2.0.7-beta1";
  }
});

// node_modules/tiktok-live-connector/dist/lib/config.js
var require_config = __commonJS({
  "node_modules/tiktok-live-connector/dist/lib/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SignConfig = exports.Screen = exports.Location = exports.Device = exports.Devices = exports.UserAgents = exports.Screens = exports.Locations = void 0;
    var utilities_1 = require_utilities();
    var version_1 = require_version();
    exports.Locations = [
      {
        "lang_country": "en-GB",
        "lang": "en",
        "country": "GB",
        "tz_name": "Europe/London"
      },
      {
        "lang_country": "en-CA",
        "lang": "en",
        "country": "CA",
        "tz_name": "America/Toronto"
      },
      {
        "lang_country": "en-AU",
        "lang": "en",
        "country": "AU",
        "tz_name": "Australia/Sydney"
      },
      {
        "lang_country": "en-NZ",
        "lang": "en",
        "country": "NZ",
        "tz_name": "Pacific/Auckland"
      },
      {
        "lang_country": "en-ZA",
        "lang": "en",
        "country": "ZA",
        "tz_name": "Africa/Johannesburg"
      },
      {
        "lang_country": "en-IE",
        "lang": "en",
        "country": "IE",
        "tz_name": "Europe/Dublin"
      },
      {
        "lang_country": "en-JM",
        "lang": "en",
        "country": "JM",
        "tz_name": "America/Jamaica"
      },
      {
        "lang_country": "en-BZ",
        "lang": "en",
        "country": "BZ",
        "tz_name": "America/Belize"
      },
      {
        "lang_country": "en-TT",
        "lang": "en",
        "country": "TT",
        "tz_name": "America/Port_of_Spain"
      }
    ];
    exports.Screens = [
      {
        "screen_width": 1920,
        "screen_height": 1080
      },
      {
        "screen_width": 2560,
        "screen_height": 1440
      },
      {
        "screen_width": 3840,
        "screen_height": 2160
      },
      {
        "screen_width": 4096,
        "screen_height": 2160
      },
      {
        "screen_width": 5120,
        "screen_height": 2880
      },
      {
        "screen_width": 7680,
        "screen_height": 4320
      },
      {
        "screen_width": 1152,
        "screen_height": 2048
      },
      {
        "screen_width": 1440,
        "screen_height": 2560
      },
      {
        "screen_width": 2160,
        "screen_height": 3840
      },
      {
        "screen_width": 4320,
        "screen_height": 7680
      }
    ];
    exports.UserAgents = [
      // Latest Chrome UA's -> https://www.whatismybrowser.com/guides/the-latest-user-agent/chrome
      "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36",
      "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36",
      // Latest Safari UA's -> https://www.whatismybrowser.com/guides/the-latest-user-agent/safari
      "Mozilla/5.0 (Macintosh; Intel Mac OS X 14_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15",
      // Latest Firefox UA's -> https://www.whatismybrowser.com/guides/the-latest-user-agent/firefox
      "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:130.0) Gecko/20100101 Firefox/130.0",
      "Mozilla/5.0 (Macintosh; Intel Mac OS X 14.7; rv:130.0) Gecko/20100101 Firefox/130.0",
      // Latest Edge UA's -> https://www.whatismybrowser.com/guides/the-latest-user-agent/edge
      "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36 Edg/128.0.2739.79",
      "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36 Edg/128.0.2739.79",
      // Latest Opera UA's -> https://www.whatismybrowser.com/guides/the-latest-user-agent/opera
      "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36 OPR/113.0.0.0",
      "Mozilla/5.0 (Macintosh; Intel Mac OS X 14_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36 OPR/113.0.0.0"
    ];
    exports.Devices = exports.UserAgents.map((userAgent) => (0, utilities_1.userAgentToDevicePreset)(userAgent));
    var _a;
    exports.Device = ((_a = process.env.RANDOMIZE_TIKTOK_DEVICE) == null ? void 0 : _a.toLowerCase()) === "true" ? exports.Devices[Math.floor(Math.random() * exports.Devices.length)] : exports.Devices[6];
    var _a2;
    exports.Location = ((_a2 = process.env.RANDOMIZE_TIKTOK_LOCATION) == null ? void 0 : _a2.toLowerCase()) === "true" ? exports.Locations[Math.floor(Math.random() * exports.Locations.length)] : {
      lang_country: "en-DE",
      lang: "en",
      country: "DE",
      tz_name: "Europe/Berlin"
    };
    var _a3;
    exports.Screen = ((_a3 = process.env.RANDOMIZE_TIKTOK_SCREEN) == null ? void 0 : _a3.toLowerCase()) === "true" ? exports.Screens[Math.floor(Math.random() * exports.Screens.length)] : {
      screen_width: 1920,
      screen_height: 1080
    };
    var Config = {
      TIKTOK_HOST_WEB: "www.tiktok.com",
      TIKTOK_HOST_WEBCAST: "webcast.tiktok.com",
      TIKTOK_HTTP_ORIGIN: "https://www.tiktok.com",
      DEFAULT_HTTP_CLIENT_COOKIES: { "tt-target-idc": "useast1a" },
      DEFAULT_HTTP_CLIENT_OPTIONS: {},
      DEFAULT_HTTP_CLIENT_PARAMS: {
        "aid": 1988 .toString(),
        "app_language": exports.Location["lang"],
        "app_name": "tiktok_web",
        "browser_language": exports.Location["lang_country"],
        "browser_name": exports.Device["browser_name"],
        "browser_online": "true",
        "browser_platform": exports.Device["browser_platform"],
        "browser_version": exports.Device["browser_version"],
        "cookie_enabled": "true",
        "device_platform": "web_pc",
        "focus_state": "true",
        "from_page": "user",
        "history_len": "10",
        "is_fullscreen": "false",
        "is_page_visible": "true",
        "screen_height": exports.Screen["screen_height"].toString(),
        "screen_width": exports.Screen["screen_width"].toString(),
        "tz_name": exports.Location["tz_name"],
        "referer": "https://www.tiktok.com/",
        "root_referer": "https://www.tiktok.com/",
        "channel": "tiktok_web",
        "data_collection_enabled": "true",
        "os": exports.Device["os"],
        "priority_region": exports.Location["country"],
        "region": exports.Location["country"],
        "user_is_login": "true",
        "webcast_language": exports.Location["lang"],
        "device_id": (0, utilities_1.generateDeviceId)()
      },
      DEFAULT_WS_CLIENT_PARAMS: {
        "version_code": "180800",
        "aid": 1988 .toString(),
        "app_language": exports.Location["lang"],
        "app_name": "tiktok_web",
        "browser_platform": exports.Device["browser_platform"],
        "browser_language": exports.Location["lang_country"],
        "browser_name": exports.Device["browser_name"],
        "browser_version": exports.Device["browser_version"],
        "browser_online": "true",
        "cookie_enabled": "true",
        "tz_name": exports.Location["tz_name"],
        "device_platform": "web",
        "debug": "false",
        "host": "https://webcast.tiktok.com",
        "identity": "audience",
        "live_id": "12",
        "sup_ws_ds_opt": "1",
        "update_version_code": "2.0.0",
        "did_rule": "3",
        "screen_height": exports.Screen["screen_height"].toString(),
        "screen_width": exports.Screen["screen_width"].toString(),
        "heartbeat_duration": "0",
        "resp_content_type": "protobuf",
        "history_comment_count": "6",
        "client_enter": "1",
        "last_rtt": (Math.random() * 100 + 100).toString()
      },
      DEFAULT_WS_CLIENT_PARAMS_APPEND_PARAMETER: "&version_code=270000",
      DEFAULT_HTTP_CLIENT_HEADERS: {
        "Connection": "keep-alive",
        "Cache-Control": "max-age=0",
        "User-Agent": exports.Device["user_agent"],
        "Accept": "text/html,application/json,application/protobuf",
        "Referer": "https://www.tiktok.com/",
        "Origin": "https://www.tiktok.com",
        "Accept-Language": "en-US,en;q=0.9",
        "Accept-Encoding": "gzip, deflate",
        "Sec-Fetch-Site": "same-site",
        "Sec-Fetch-Mode": "cors",
        "Sec-Fetch-Dest": "empty",
        "Sec-Fetch-Ua-Mobile": "?0"
      },
      DEFAULT_WS_CLIENT_HEADERS: {
        "User-Agent": exports.Device["user_agent"]
      }
    };
    exports.SignConfig = {
      basePath: process.env.SIGN_API_URL || "https://tiktok.eulerstream.com",
      apiKey: process.env.SIGN_API_KEY,
      baseOptions: {
        headers: { "User-Agent": `tiktok-live-connector/${version_1.VERSION} ${process.platform}` },
        validateStatus: () => true
      }
    };
    exports.default = Config;
  }
});

// node_modules/tiktok-live-connector/dist/types/client.js
var require_client = __commonJS({
  "node_modules/tiktok-live-connector/dist/types/client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/tiktok-live-connector/dist/types/events.js
var require_events = __commonJS({
  "node_modules/tiktok-live-connector/dist/types/events.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebcastEventMap = exports.ConnectState = exports.WebcastEvent = exports.ControlEvent = void 0;
    var ControlEvent;
    (function(ControlEvent2) {
      ControlEvent2["CONNECTED"] = "connected";
      ControlEvent2["DISCONNECTED"] = "disconnected";
      ControlEvent2["ERROR"] = "error";
      ControlEvent2["RAW_DATA"] = "rawData";
      ControlEvent2["DECODED_DATA"] = "decodedData";
      ControlEvent2["WEBSOCKET_CONNECTED"] = "websocketConnected";
      ControlEvent2["WEBSOCKET_DATA"] = "websocketData";
      ControlEvent2["ENTER_ROOM"] = "enterRoom";
    })(ControlEvent = exports.ControlEvent || (exports.ControlEvent = {}));
    var WebcastEvent;
    (function(WebcastEvent2) {
      WebcastEvent2["CHAT"] = "chat";
      WebcastEvent2["MEMBER"] = "member";
      WebcastEvent2["GIFT"] = "gift";
      WebcastEvent2["ROOM_USER"] = "roomUser";
      WebcastEvent2["SOCIAL"] = "social";
      WebcastEvent2["LIKE"] = "like";
      WebcastEvent2["QUESTION_NEW"] = "questionNew";
      WebcastEvent2["LINK_MIC_BATTLE"] = "linkMicBattle";
      WebcastEvent2["LINK_MIC_ARMIES"] = "linkMicArmies";
      WebcastEvent2["LIVE_INTRO"] = "liveIntro";
      WebcastEvent2["EMOTE"] = "emote";
      WebcastEvent2["ENVELOPE"] = "envelope";
      WebcastEvent2["SUBSCRIBE"] = "subscribe";
      WebcastEvent2["FOLLOW"] = "follow";
      WebcastEvent2["SHARE"] = "share";
      WebcastEvent2["STREAM_END"] = "streamEnd";
      WebcastEvent2["CONTROL_MESSAGE"] = "controlMessage";
      WebcastEvent2["BARRAGE"] = "barrage";
      WebcastEvent2["HOURLY_RANK"] = "hourlyRank";
      WebcastEvent2["GOAL_UPDATE"] = "goalUpdate";
      WebcastEvent2["ROOM_MESSAGE"] = "roomMessage";
      WebcastEvent2["CAPTION_MESSAGE"] = "captionMessage";
      WebcastEvent2["IM_DELETE"] = "imDelete";
      WebcastEvent2["IN_ROOM_BANNER"] = "inRoomBanner";
      WebcastEvent2["RANK_UPDATE"] = "rankUpdate";
      WebcastEvent2["POLL_MESSAGE"] = "pollMessage";
      WebcastEvent2["RANK_TEXT"] = "rankText";
      WebcastEvent2["LINK_MIC_BATTLE_PUNISH_FINISH"] = "linkMicBattlePunishFinish";
      WebcastEvent2["LINK_MIC_BATTLE_TASK"] = "linkMicBattleTask";
      WebcastEvent2["LINK_MIC_FAN_TICKET_METHOD"] = "linkMicFanTicketMethod";
      WebcastEvent2["LINK_MIC_METHOD"] = "linkMicMethod";
      WebcastEvent2["UNAUTHORIZED_MEMBER"] = "unauthorizedMember";
      WebcastEvent2["OEC_LIVE_SHOPPING"] = "oecLiveShopping";
      WebcastEvent2["MSG_DETECT"] = "msgDetect";
      WebcastEvent2["LINK_MESSAGE"] = "linkMessage";
      WebcastEvent2["ROOM_VERIFY"] = "roomVerify";
      WebcastEvent2["LINK_LAYER"] = "linkLayer";
      WebcastEvent2["ROOM_PIN"] = "roomPin";
    })(WebcastEvent = exports.WebcastEvent || (exports.WebcastEvent = {}));
    var ConnectState;
    (function(ConnectState2) {
      ConnectState2["DISCONNECTED"] = "DISCONNECTED";
      ConnectState2["CONNECTING"] = "CONNECTING";
      ConnectState2["CONNECTED"] = "CONNECTED";
    })(ConnectState = exports.ConnectState || (exports.ConnectState = {}));
    exports.WebcastEventMap = {
      // Old Events - Added 1.X.X
      "WebcastChatMessage": WebcastEvent.CHAT,
      "WebcastMemberMessage": WebcastEvent.MEMBER,
      "WebcastRoomUserSeqMessage": WebcastEvent.ROOM_USER,
      "WebcastSocialMessage": WebcastEvent.SOCIAL,
      "WebcastLikeMessage": WebcastEvent.LIKE,
      "WebcastQuestionNewMessage": WebcastEvent.QUESTION_NEW,
      "WebcastLinkMicBattle": WebcastEvent.LINK_MIC_BATTLE,
      "WebcastLinkMicArmies": WebcastEvent.LINK_MIC_ARMIES,
      "WebcastLiveIntroMessage": WebcastEvent.LIVE_INTRO,
      "WebcastEmoteChatMessage": WebcastEvent.EMOTE,
      "WebcastEnvelopeMessage": WebcastEvent.ENVELOPE,
      "WebcastSubNotifyMessage": WebcastEvent.SUBSCRIBE,
      "WebcastBarrageMessage": WebcastEvent.BARRAGE,
      // New Events - Added 2.0.4
      "WebcastHourlyRankMessage": WebcastEvent.HOURLY_RANK,
      "WebcastGoalUpdateMessage": WebcastEvent.GOAL_UPDATE,
      "WebcastRoomMessage": WebcastEvent.ROOM_MESSAGE,
      "WebcastCaptionMessage": WebcastEvent.CAPTION_MESSAGE,
      "WebcastControlMessage": WebcastEvent.CONTROL_MESSAGE,
      "WebcastImDeleteMessage": WebcastEvent.IM_DELETE,
      "WebcastInRoomBannerMessage": WebcastEvent.IN_ROOM_BANNER,
      "WebcastRankUpdateMessage": WebcastEvent.RANK_UPDATE,
      "WebcastPollMessage": WebcastEvent.POLL_MESSAGE,
      "WebcastRankTextMessage": WebcastEvent.RANK_TEXT,
      "WebcastLinkMicBattlePunishFinish": WebcastEvent.LINK_MIC_BATTLE_PUNISH_FINISH,
      "WebcastLinkmicBattleTaskMessage": WebcastEvent.LINK_MIC_BATTLE_TASK,
      "WebcastLinkMicFanTicketMethod": WebcastEvent.LINK_MIC_FAN_TICKET_METHOD,
      "WebcastLinkMicMethod": WebcastEvent.LINK_MIC_METHOD,
      "WebcastUnauthorizedMemberMessage": WebcastEvent.UNAUTHORIZED_MEMBER,
      "WebcastOecLiveShoppingMessage": WebcastEvent.OEC_LIVE_SHOPPING,
      "WebcastMsgDetectMessage": WebcastEvent.MSG_DETECT,
      "WebcastLinkMessage": WebcastEvent.LINK_MESSAGE,
      "RoomVerifyMessage": WebcastEvent.ROOM_VERIFY,
      "WebcastLinkLayerMessage": WebcastEvent.LINK_LAYER,
      "WebcastRoomPinMessage": WebcastEvent.ROOM_PIN
    };
  }
});

// node_modules/callable-instance/index.js
var require_callable_instance = __commonJS({
  "node_modules/callable-instance/index.js"(exports, module) {
    function CallableInstance(property) {
      var func = this.constructor.prototype[property];
      var apply = function() {
        return func.apply(apply, arguments);
      };
      Object.setPrototypeOf(apply, this.constructor.prototype);
      Object.getOwnPropertyNames(func).forEach(function(p) {
        Object.defineProperty(apply, p, Object.getOwnPropertyDescriptor(func, p));
      });
      return apply;
    }
    CallableInstance.prototype = Object.create(Function.prototype);
    module.exports = CallableInstance;
  }
});

// node_modules/tiktok-live-connector/dist/types/route.js
var require_route = __commonJS({
  "node_modules/tiktok-live-connector/dist/types/route.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Route = void 0;
    var callable_instance_1 = __importDefault(require_callable_instance());
    var Route = class extends callable_instance_1.default {
      constructor(webClient) {
        super("call");
        __publicField(this, "webClient");
        this.webClient = webClient;
      }
    };
    exports.Route = Route;
  }
});

// node_modules/tiktok-live-connector/dist/types/index.js
var require_types = __commonJS({
  "node_modules/tiktok-live-connector/dist/types/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_client(), exports);
    __exportStar(require_errors(), exports);
    __exportStar(require_events(), exports);
    __exportStar(require_route(), exports);
    __exportStar(require_tiktok_schema(), exports);
  }
});

// node_modules/ws/browser.js
var require_browser = __commonJS({
  "node_modules/ws/browser.js"(exports, module) {
    "use strict";
    module.exports = function() {
      throw new Error(
        "ws does not work in the browser. Browser clients must use the native WebSocket object"
      );
    };
  }
});

// node_modules/tiktok-live-connector/dist/lib/ws/lib/ws-client.js
var require_ws_client = __commonJS({
  "node_modules/tiktok-live-connector/dist/lib/ws/lib/ws-client.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var utilities_1 = require_utilities();
    var config_1 = __importDefault(require_config());
    var types_1 = require_types();
    var ws_1 = require_browser();
    var textEncoder = new TextEncoder();
    var TikTokWsClient = class extends ws_1.WebSocket {
      constructor(wsUrl, cookieJar, webSocketParams, webSocketHeaders, webSocketOptions, webSocketPingIntervalMs = 1e4) {
        const wsHeaders = { Cookie: cookieJar.getCookieString(), ...webSocketHeaders || {} };
        const wsUrlWithParams = `${wsUrl}?${new URLSearchParams(webSocketParams)}${config_1.default.DEFAULT_WS_CLIENT_PARAMS_APPEND_PARAMETER}`;
        super(wsUrlWithParams, {
          headers: wsHeaders,
          host: `https://${config_1.default.TIKTOK_HOST_WEB}`,
          ...webSocketOptions,
          autoPong: false
        });
        __publicField(this, "webSocketParams");
        __publicField(this, "webSocketPingIntervalMs");
        __publicField(this, "pingInterval");
        this.webSocketParams = webSocketParams;
        this.webSocketPingIntervalMs = webSocketPingIntervalMs;
        this.pingInterval = null;
        this.on("open", this.onOpen.bind(this));
        this.on("message", this.onMessage.bind(this));
        this.on("close", this.onDisconnect.bind(this));
      }
      onOpen() {
        this.sendHeartbeat();
        this.pingInterval = setInterval(() => this.sendHeartbeat(), this.webSocketPingIntervalMs);
      }
      get open() {
        return this.readyState === ws_1.WebSocket.OPEN;
      }
      /**
       * Send a message to the WebSocket server
       * @param data The message to send
       * @returns True if the message was sent, false otherwise
       */
      sendBytes(data) {
        if (this.open) {
          super.send(Buffer.from(data));
          return true;
        }
        return false;
      }
      onDisconnect() {
        clearInterval(this.pingInterval);
        this.pingInterval = null;
      }
      /**
       * Handle incoming messages
       * @param message The incoming WebSocket message (type => Buffer)
       * @protected
       */
      async onMessage(message) {
        this.emit("webSocketData", message);
        try {
          const decodedContainer = await (0, utilities_1.deserializeWebSocketMessage)(message);
          if (decodedContainer.protoMessageFetchResult) {
            if (decodedContainer.protoMessageFetchResult.needsAck) {
              this.sendAck(decodedContainer);
            }
            this.emit("protoMessageFetchResult", decodedContainer.protoMessageFetchResult);
          }
          if (decodedContainer.payloadType === "im_enter_room_resp") {
            this.emit("imEnteredRoom", decodedContainer);
          }
        } catch (err) {
          this.emit("messageDecodingFailed", err);
        }
      }
      /**
       * Static Keep-Alive ping
       */
      sendHeartbeat() {
        const { room_id } = this.webSocketParams;
        const hb = types_1.HeartbeatMessage.encode({ roomId: room_id });
        const webcastPushFrame = (0, utilities_1.createBaseWebcastPushFrame)({
          payloadEncoding: "pb",
          payloadType: "hb",
          payload: hb.finish(),
          service: void 0,
          method: void 0,
          headers: {}
        });
        this.sendBytes(Buffer.from(webcastPushFrame.finish()));
      }
      /**
       * EXPERIMENTAL: Switch to a different TikTok LIVE room while connected to the WebSocket
       * @param roomId The room ID to switch to
       */
      switchRooms(roomId) {
        const imEnterRoomMessage = types_1.WebcastImEnterRoomMessage.encode({
          roomId,
          roomTag: "",
          liveRegion: "",
          liveId: "12",
          identity: "audience",
          cursor: "",
          accountType: "0",
          enterUniqueId: "",
          filterWelcomeMsg: "0",
          isAnchorContinueKeepMsg: false
        });
        const webcastPushFrame = (0, utilities_1.createBaseWebcastPushFrame)({
          payloadEncoding: "pb",
          payloadType: "im_enter_room",
          payload: imEnterRoomMessage.finish()
        });
        this.sendBytes(Buffer.from(webcastPushFrame.finish()));
      }
      /**
       * Acknowledge the message was received
       */
      sendAck({ logId, protoMessageFetchResult: { internalExt } }) {
        if (!logId) {
          return;
        }
        const webcastPushFrame = (0, utilities_1.createBaseWebcastPushFrame)({
          logId,
          payloadEncoding: "pb",
          payloadType: "ack",
          payload: textEncoder.encode(internalExt)
        });
        this.sendBytes(Buffer.from(webcastPushFrame.finish()));
      }
    };
    exports.default = TikTokWsClient;
  }
});

// node_modules/axios/dist/browser/axios.cjs
var require_axios = __commonJS({
  "node_modules/axios/dist/browser/axios.cjs"(exports, module) {
    "use strict";
    function bind(fn, thisArg) {
      return function wrap() {
        return fn.apply(thisArg, arguments);
      };
    }
    var { toString } = Object.prototype;
    var { getPrototypeOf } = Object;
    var { iterator, toStringTag } = Symbol;
    var kindOf = ((cache) => (thing) => {
      const str = toString.call(thing);
      return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    })(/* @__PURE__ */ Object.create(null));
    var kindOfTest = (type) => {
      type = type.toLowerCase();
      return (thing) => kindOf(thing) === type;
    };
    var typeOfTest = (type) => (thing) => typeof thing === type;
    var { isArray } = Array;
    var isUndefined = typeOfTest("undefined");
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
    }
    var isArrayBuffer = kindOfTest("ArrayBuffer");
    function isArrayBufferView(val) {
      let result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result;
    }
    var isString = typeOfTest("string");
    var isFunction = typeOfTest("function");
    var isNumber = typeOfTest("number");
    var isObject = (thing) => thing !== null && typeof thing === "object";
    var isBoolean = (thing) => thing === true || thing === false;
    var isPlainObject = (val) => {
      if (kindOf(val) !== "object") {
        return false;
      }
      const prototype2 = getPrototypeOf(val);
      return (prototype2 === null || prototype2 === Object.prototype || Object.getPrototypeOf(prototype2) === null) && !(toStringTag in val) && !(iterator in val);
    };
    var isEmptyObject = (val) => {
      if (!isObject(val) || isBuffer(val)) {
        return false;
      }
      try {
        return Object.keys(val).length === 0 && Object.getPrototypeOf(val) === Object.prototype;
      } catch (e) {
        return false;
      }
    };
    var isDate = kindOfTest("Date");
    var isFile = kindOfTest("File");
    var isBlob = kindOfTest("Blob");
    var isFileList = kindOfTest("FileList");
    var isStream = (val) => isObject(val) && isFunction(val.pipe);
    var isFormData = (thing) => {
      let kind;
      return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
      kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
    };
    var isURLSearchParams = kindOfTest("URLSearchParams");
    var [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
    var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
    function forEach(obj, fn, { allOwnKeys = false } = {}) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      let i;
      let l;
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        if (isBuffer(obj)) {
          return;
        }
        const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
        const len = keys.length;
        let key;
        for (i = 0; i < len; i++) {
          key = keys[i];
          fn.call(null, obj[key], key, obj);
        }
      }
    }
    function findKey(obj, key) {
      if (isBuffer(obj)) {
        return null;
      }
      key = key.toLowerCase();
      const keys = Object.keys(obj);
      let i = keys.length;
      let _key;
      while (i-- > 0) {
        _key = keys[i];
        if (key === _key.toLowerCase()) {
          return _key;
        }
      }
      return null;
    }
    var _global = (() => {
      if (typeof globalThis !== "undefined")
        return globalThis;
      return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
    })();
    var isContextDefined = (context) => !isUndefined(context) && context !== _global;
    function merge() {
      const { caseless } = isContextDefined(this) && this || {};
      const result = {};
      const assignValue = (val, key) => {
        const targetKey = caseless && findKey(result, key) || key;
        if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
          result[targetKey] = merge(result[targetKey], val);
        } else if (isPlainObject(val)) {
          result[targetKey] = merge({}, val);
        } else if (isArray(val)) {
          result[targetKey] = val.slice();
        } else {
          result[targetKey] = val;
        }
      };
      for (let i = 0, l = arguments.length; i < l; i++) {
        arguments[i] && forEach(arguments[i], assignValue);
      }
      return result;
    }
    var extend = (a, b, thisArg, { allOwnKeys } = {}) => {
      forEach(b, (val, key) => {
        if (thisArg && isFunction(val)) {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      }, { allOwnKeys });
      return a;
    };
    var stripBOM = (content) => {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    };
    var inherits = (constructor, superConstructor, props, descriptors2) => {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
      constructor.prototype.constructor = constructor;
      Object.defineProperty(constructor, "super", {
        value: superConstructor.prototype
      });
      props && Object.assign(constructor.prototype, props);
    };
    var toFlatObject = (sourceObj, destObj, filter, propFilter) => {
      let props;
      let i;
      let prop;
      const merged = {};
      destObj = destObj || {};
      if (sourceObj == null)
        return destObj;
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = filter !== false && getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    };
    var endsWith = (str, searchString, position) => {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      const lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
    var toArray = (thing) => {
      if (!thing)
        return null;
      if (isArray(thing))
        return thing;
      let i = thing.length;
      if (!isNumber(i))
        return null;
      const arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    };
    var isTypedArray = ((TypedArray) => {
      return (thing) => {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
    var forEachEntry = (obj, fn) => {
      const generator = obj && obj[iterator];
      const _iterator = generator.call(obj);
      let result;
      while ((result = _iterator.next()) && !result.done) {
        const pair = result.value;
        fn.call(obj, pair[0], pair[1]);
      }
    };
    var matchAll = (regExp, str) => {
      let matches;
      const arr = [];
      while ((matches = regExp.exec(str)) !== null) {
        arr.push(matches);
      }
      return arr;
    };
    var isHTMLForm = kindOfTest("HTMLFormElement");
    var toCamelCase = (str) => {
      return str.toLowerCase().replace(
        /[-_\s]([a-z\d])(\w*)/g,
        function replacer(m, p1, p2) {
          return p1.toUpperCase() + p2;
        }
      );
    };
    var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
    var isRegExp = kindOfTest("RegExp");
    var reduceDescriptors = (obj, reducer) => {
      const descriptors2 = Object.getOwnPropertyDescriptors(obj);
      const reducedDescriptors = {};
      forEach(descriptors2, (descriptor, name) => {
        let ret;
        if ((ret = reducer(descriptor, name, obj)) !== false) {
          reducedDescriptors[name] = ret || descriptor;
        }
      });
      Object.defineProperties(obj, reducedDescriptors);
    };
    var freezeMethods = (obj) => {
      reduceDescriptors(obj, (descriptor, name) => {
        if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
          return false;
        }
        const value = obj[name];
        if (!isFunction(value))
          return;
        descriptor.enumerable = false;
        if ("writable" in descriptor) {
          descriptor.writable = false;
          return;
        }
        if (!descriptor.set) {
          descriptor.set = () => {
            throw Error("Can not rewrite read-only method '" + name + "'");
          };
        }
      });
    };
    var toObjectSet = (arrayOrString, delimiter) => {
      const obj = {};
      const define = (arr) => {
        arr.forEach((value) => {
          obj[value] = true;
        });
      };
      isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
      return obj;
    };
    var noop = () => {
    };
    var toFiniteNumber = (value, defaultValue) => {
      return value != null && Number.isFinite(value = +value) ? value : defaultValue;
    };
    function isSpecCompliantForm(thing) {
      return !!(thing && isFunction(thing.append) && thing[toStringTag] === "FormData" && thing[iterator]);
    }
    var toJSONObject = (obj) => {
      const stack = new Array(10);
      const visit = (source, i) => {
        if (isObject(source)) {
          if (stack.indexOf(source) >= 0) {
            return;
          }
          if (isBuffer(source)) {
            return source;
          }
          if (!("toJSON" in source)) {
            stack[i] = source;
            const target = isArray(source) ? [] : {};
            forEach(source, (value, key) => {
              const reducedValue = visit(value, i + 1);
              !isUndefined(reducedValue) && (target[key] = reducedValue);
            });
            stack[i] = void 0;
            return target;
          }
        }
        return source;
      };
      return visit(obj, 0);
    };
    var isAsyncFn = kindOfTest("AsyncFunction");
    var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
    var _setImmediate = ((setImmediateSupported, postMessageSupported) => {
      if (setImmediateSupported) {
        return setImmediate;
      }
      return postMessageSupported ? ((token, callbacks) => {
        _global.addEventListener("message", ({ source, data }) => {
          if (source === _global && data === token) {
            callbacks.length && callbacks.shift()();
          }
        }, false);
        return (cb) => {
          callbacks.push(cb);
          _global.postMessage(token, "*");
        };
      })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
    })(
      typeof setImmediate === "function",
      isFunction(_global.postMessage)
    );
    var asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
    var isIterable = (thing) => thing != null && isFunction(thing[iterator]);
    var utils$1 = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isBoolean,
      isObject,
      isPlainObject,
      isEmptyObject,
      isReadableStream,
      isRequest,
      isResponse,
      isHeaders,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isRegExp,
      isFunction,
      isStream,
      isURLSearchParams,
      isTypedArray,
      isFileList,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      forEachEntry,
      matchAll,
      isHTMLForm,
      hasOwnProperty,
      hasOwnProp: hasOwnProperty,
      // an alias to avoid ESLint no-prototype-builtins detection
      reduceDescriptors,
      freezeMethods,
      toObjectSet,
      toCamelCase,
      noop,
      toFiniteNumber,
      findKey,
      global: _global,
      isContextDefined,
      isSpecCompliantForm,
      toJSONObject,
      isAsyncFn,
      isThenable,
      setImmediate: _setImmediate,
      asap,
      isIterable
    };
    function AxiosError(message, code, config, request, response) {
      Error.call(this);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack;
      }
      this.message = message;
      this.name = "AxiosError";
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      if (response) {
        this.response = response;
        this.status = response.status ? response.status : null;
      }
    }
    utils$1.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: utils$1.toJSONObject(this.config),
          code: this.code,
          status: this.status
        };
      }
    });
    var prototype$1 = AxiosError.prototype;
    var descriptors = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED",
      "ERR_NOT_SUPPORT",
      "ERR_INVALID_URL"
      // eslint-disable-next-line func-names
    ].forEach((code) => {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype$1, "isAxiosError", { value: true });
    AxiosError.from = (error, code, config, request, response, customProps) => {
      const axiosError = Object.create(prototype$1);
      utils$1.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      }, (prop) => {
        return prop !== "isAxiosError";
      });
      AxiosError.call(axiosError, error.message, code, config, request, response);
      axiosError.cause = error;
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    var httpAdapter = null;
    function isVisitable(thing) {
      return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
    }
    function removeBrackets(key) {
      return utils$1.endsWith(key, "[]") ? key.slice(0, -2) : key;
    }
    function renderKey(path, key, dots) {
      if (!path)
        return key;
      return path.concat(key).map(function each(token, i) {
        token = removeBrackets(token);
        return !dots && i ? "[" + token + "]" : token;
      }).join(dots ? "." : "");
    }
    function isFlatArray(arr) {
      return utils$1.isArray(arr) && !arr.some(isVisitable);
    }
    var predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {
      return /^is[A-Z]/.test(prop);
    });
    function toFormData(obj, formData, options) {
      if (!utils$1.isObject(obj)) {
        throw new TypeError("target must be an object");
      }
      formData = formData || new FormData();
      options = utils$1.toFlatObject(options, {
        metaTokens: true,
        dots: false,
        indexes: false
      }, false, function defined(option, source) {
        return !utils$1.isUndefined(source[option]);
      });
      const metaTokens = options.metaTokens;
      const visitor = options.visitor || defaultVisitor;
      const dots = options.dots;
      const indexes = options.indexes;
      const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
      const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);
      if (!utils$1.isFunction(visitor)) {
        throw new TypeError("visitor must be a function");
      }
      function convertValue(value) {
        if (value === null)
          return "";
        if (utils$1.isDate(value)) {
          return value.toISOString();
        }
        if (utils$1.isBoolean(value)) {
          return value.toString();
        }
        if (!useBlob && utils$1.isBlob(value)) {
          throw new AxiosError("Blob is not supported. Use a Buffer instead.");
        }
        if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
          return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
        }
        return value;
      }
      function defaultVisitor(value, key, path) {
        let arr = value;
        if (value && !path && typeof value === "object") {
          if (utils$1.endsWith(key, "{}")) {
            key = metaTokens ? key : key.slice(0, -2);
            value = JSON.stringify(value);
          } else if (utils$1.isArray(value) && isFlatArray(value) || (utils$1.isFileList(value) || utils$1.endsWith(key, "[]")) && (arr = utils$1.toArray(value))) {
            key = removeBrackets(key);
            arr.forEach(function each(el, index) {
              !(utils$1.isUndefined(el) || el === null) && formData.append(
                // eslint-disable-next-line no-nested-ternary
                indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
                convertValue(el)
              );
            });
            return false;
          }
        }
        if (isVisitable(value)) {
          return true;
        }
        formData.append(renderKey(path, key, dots), convertValue(value));
        return false;
      }
      const stack = [];
      const exposedHelpers = Object.assign(predicates, {
        defaultVisitor,
        convertValue,
        isVisitable
      });
      function build(value, path) {
        if (utils$1.isUndefined(value))
          return;
        if (stack.indexOf(value) !== -1) {
          throw Error("Circular reference detected in " + path.join("."));
        }
        stack.push(value);
        utils$1.forEach(value, function each(el, key) {
          const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(
            formData,
            el,
            utils$1.isString(key) ? key.trim() : key,
            path,
            exposedHelpers
          );
          if (result === true) {
            build(el, path ? path.concat(key) : [key]);
          }
        });
        stack.pop();
      }
      if (!utils$1.isObject(obj)) {
        throw new TypeError("data must be an object");
      }
      build(obj);
      return formData;
    }
    function encode$1(str) {
      const charMap = {
        "!": "%21",
        "'": "%27",
        "(": "%28",
        ")": "%29",
        "~": "%7E",
        "%20": "+",
        "%00": "\0"
      };
      return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
        return charMap[match];
      });
    }
    function AxiosURLSearchParams(params, options) {
      this._pairs = [];
      params && toFormData(params, this, options);
    }
    var prototype = AxiosURLSearchParams.prototype;
    prototype.append = function append(name, value) {
      this._pairs.push([name, value]);
    };
    prototype.toString = function toString2(encoder) {
      const _encode = encoder ? function(value) {
        return encoder.call(this, value, encode$1);
      } : encode$1;
      return this._pairs.map(function each(pair) {
        return _encode(pair[0]) + "=" + _encode(pair[1]);
      }, "").join("&");
    };
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    function buildURL(url, params, options) {
      if (!params) {
        return url;
      }
      const _encode = options && options.encode || encode;
      if (utils$1.isFunction(options)) {
        options = {
          serialize: options
        };
      }
      const serializeFn = options && options.serialize;
      let serializedParams;
      if (serializeFn) {
        serializedParams = serializeFn(params, options);
      } else {
        serializedParams = utils$1.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);
      }
      if (serializedParams) {
        const hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    }
    var InterceptorManager = class {
      constructor() {
        this.handlers = [];
      }
      /**
       * Add a new interceptor to the stack
       *
       * @param {Function} fulfilled The function to handle `then` for a `Promise`
       * @param {Function} rejected The function to handle `reject` for a `Promise`
       *
       * @return {Number} An ID used to remove interceptor later
       */
      use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      }
      /**
       * Remove an interceptor from the stack
       *
       * @param {Number} id The ID that was returned by `use`
       *
       * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
       */
      eject(id) {
        if (this.handlers[id]) {
          this.handlers[id] = null;
        }
      }
      /**
       * Clear all interceptors from the stack
       *
       * @returns {void}
       */
      clear() {
        if (this.handlers) {
          this.handlers = [];
        }
      }
      /**
       * Iterate over all the registered interceptors
       *
       * This method is particularly useful for skipping over any
       * interceptors that may have become `null` calling `eject`.
       *
       * @param {Function} fn The function to call for each interceptor
       *
       * @returns {void}
       */
      forEach(fn) {
        utils$1.forEach(this.handlers, function forEachHandler(h) {
          if (h !== null) {
            fn(h);
          }
        });
      }
    };
    var InterceptorManager$1 = InterceptorManager;
    var transitionalDefaults = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
    var URLSearchParams$1 = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams;
    var FormData$1 = typeof FormData !== "undefined" ? FormData : null;
    var Blob$1 = typeof Blob !== "undefined" ? Blob : null;
    var platform$1 = {
      isBrowser: true,
      classes: {
        URLSearchParams: URLSearchParams$1,
        FormData: FormData$1,
        Blob: Blob$1
      },
      protocols: ["http", "https", "file", "blob", "url", "data"]
    };
    var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
    var _navigator = typeof navigator === "object" && navigator || void 0;
    var hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
    var hasStandardBrowserWebWorkerEnv = (() => {
      return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
      self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
    })();
    var origin = hasBrowserEnv && window.location.href || "http://localhost";
    var utils = Object.freeze({
      __proto__: null,
      hasBrowserEnv,
      hasStandardBrowserWebWorkerEnv,
      hasStandardBrowserEnv,
      navigator: _navigator,
      origin
    });
    var platform = {
      ...utils,
      ...platform$1
    };
    function toURLEncodedForm(data, options) {
      return toFormData(data, new platform.classes.URLSearchParams(), {
        visitor: function(value, key, path, helpers) {
          if (platform.isNode && utils$1.isBuffer(value)) {
            this.append(key, value.toString("base64"));
            return false;
          }
          return helpers.defaultVisitor.apply(this, arguments);
        },
        ...options
      });
    }
    function parsePropPath(name) {
      return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
        return match[0] === "[]" ? "" : match[1] || match[0];
      });
    }
    function arrayToObject(arr) {
      const obj = {};
      const keys = Object.keys(arr);
      let i;
      const len = keys.length;
      let key;
      for (i = 0; i < len; i++) {
        key = keys[i];
        obj[key] = arr[key];
      }
      return obj;
    }
    function formDataToJSON(formData) {
      function buildPath(path, value, target, index) {
        let name = path[index++];
        if (name === "__proto__")
          return true;
        const isNumericKey = Number.isFinite(+name);
        const isLast = index >= path.length;
        name = !name && utils$1.isArray(target) ? target.length : name;
        if (isLast) {
          if (utils$1.hasOwnProp(target, name)) {
            target[name] = [target[name], value];
          } else {
            target[name] = value;
          }
          return !isNumericKey;
        }
        if (!target[name] || !utils$1.isObject(target[name])) {
          target[name] = [];
        }
        const result = buildPath(path, value, target[name], index);
        if (result && utils$1.isArray(target[name])) {
          target[name] = arrayToObject(target[name]);
        }
        return !isNumericKey;
      }
      if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
        const obj = {};
        utils$1.forEachEntry(formData, (name, value) => {
          buildPath(parsePropPath(name), value, obj, 0);
        });
        return obj;
      }
      return null;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils$1.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils$1.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: transitionalDefaults,
      adapter: ["xhr", "http", "fetch"],
      transformRequest: [function transformRequest(data, headers) {
        const contentType = headers.getContentType() || "";
        const hasJSONContentType = contentType.indexOf("application/json") > -1;
        const isObjectPayload = utils$1.isObject(data);
        if (isObjectPayload && utils$1.isHTMLForm(data)) {
          data = new FormData(data);
        }
        const isFormData2 = utils$1.isFormData(data);
        if (isFormData2) {
          return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
        }
        if (utils$1.isArrayBuffer(data) || utils$1.isBuffer(data) || utils$1.isStream(data) || utils$1.isFile(data) || utils$1.isBlob(data) || utils$1.isReadableStream(data)) {
          return data;
        }
        if (utils$1.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils$1.isURLSearchParams(data)) {
          headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
          return data.toString();
        }
        let isFileList2;
        if (isObjectPayload) {
          if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
            return toURLEncodedForm(data, this.formSerializer).toString();
          }
          if ((isFileList2 = utils$1.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
            const _FormData = this.env && this.env.FormData;
            return toFormData(
              isFileList2 ? { "files[]": data } : data,
              _FormData && new _FormData(),
              this.formSerializer
            );
          }
        }
        if (isObjectPayload || hasJSONContentType) {
          headers.setContentType("application/json", false);
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        const transitional = this.transitional || defaults.transitional;
        const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        const JSONRequested = this.responseType === "json";
        if (utils$1.isResponse(data) || utils$1.isReadableStream(data)) {
          return data;
        }
        if (data && utils$1.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
          const silentJSONParsing = transitional && transitional.silentJSONParsing;
          const strictJSONParsing = !silentJSONParsing && JSONRequested;
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: platform.classes.FormData,
        Blob: platform.classes.Blob
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*",
          "Content-Type": void 0
        }
      }
    };
    utils$1.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
      defaults.headers[method] = {};
    });
    var defaults$1 = defaults;
    var ignoreDuplicateOf = utils$1.toObjectSet([
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ]);
    var parseHeaders = (rawHeaders) => {
      const parsed = {};
      let key;
      let val;
      let i;
      rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
        i = line.indexOf(":");
        key = line.substring(0, i).trim().toLowerCase();
        val = line.substring(i + 1).trim();
        if (!key || parsed[key] && ignoreDuplicateOf[key]) {
          return;
        }
        if (key === "set-cookie") {
          if (parsed[key]) {
            parsed[key].push(val);
          } else {
            parsed[key] = [val];
          }
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
      });
      return parsed;
    };
    var $internals = Symbol("internals");
    function normalizeHeader(header) {
      return header && String(header).trim().toLowerCase();
    }
    function normalizeValue(value) {
      if (value === false || value == null) {
        return value;
      }
      return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
    }
    function parseTokens(str) {
      const tokens = /* @__PURE__ */ Object.create(null);
      const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
      let match;
      while (match = tokensRE.exec(str)) {
        tokens[match[1]] = match[2];
      }
      return tokens;
    }
    var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
    function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
      if (utils$1.isFunction(filter)) {
        return filter.call(this, value, header);
      }
      if (isHeaderNameFilter) {
        value = header;
      }
      if (!utils$1.isString(value))
        return;
      if (utils$1.isString(filter)) {
        return value.indexOf(filter) !== -1;
      }
      if (utils$1.isRegExp(filter)) {
        return filter.test(value);
      }
    }
    function formatHeader(header) {
      return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
        return char.toUpperCase() + str;
      });
    }
    function buildAccessors(obj, header) {
      const accessorName = utils$1.toCamelCase(" " + header);
      ["get", "set", "has"].forEach((methodName) => {
        Object.defineProperty(obj, methodName + accessorName, {
          value: function(arg1, arg2, arg3) {
            return this[methodName].call(this, header, arg1, arg2, arg3);
          },
          configurable: true
        });
      });
    }
    var AxiosHeaders = class {
      constructor(headers) {
        headers && this.set(headers);
      }
      set(header, valueOrRewrite, rewrite) {
        const self2 = this;
        function setHeader(_value, _header, _rewrite) {
          const lHeader = normalizeHeader(_header);
          if (!lHeader) {
            throw new Error("header name must be a non-empty string");
          }
          const key = utils$1.findKey(self2, lHeader);
          if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
            self2[key || _header] = normalizeValue(_value);
          }
        }
        const setHeaders = (headers, _rewrite) => utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
        if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
          setHeaders(header, valueOrRewrite);
        } else if (utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
          setHeaders(parseHeaders(header), valueOrRewrite);
        } else if (utils$1.isObject(header) && utils$1.isIterable(header)) {
          let obj = {}, dest, key;
          for (const entry of header) {
            if (!utils$1.isArray(entry)) {
              throw TypeError("Object iterator must return a key-value pair");
            }
            obj[key = entry[0]] = (dest = obj[key]) ? utils$1.isArray(dest) ? [...dest, entry[1]] : [dest, entry[1]] : entry[1];
          }
          setHeaders(obj, valueOrRewrite);
        } else {
          header != null && setHeader(valueOrRewrite, header, rewrite);
        }
        return this;
      }
      get(header, parser) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          if (key) {
            const value = this[key];
            if (!parser) {
              return value;
            }
            if (parser === true) {
              return parseTokens(value);
            }
            if (utils$1.isFunction(parser)) {
              return parser.call(this, value, key);
            }
            if (utils$1.isRegExp(parser)) {
              return parser.exec(value);
            }
            throw new TypeError("parser must be boolean|regexp|function");
          }
        }
      }
      has(header, matcher) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
        }
        return false;
      }
      delete(header, matcher) {
        const self2 = this;
        let deleted = false;
        function deleteHeader(_header) {
          _header = normalizeHeader(_header);
          if (_header) {
            const key = utils$1.findKey(self2, _header);
            if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
              delete self2[key];
              deleted = true;
            }
          }
        }
        if (utils$1.isArray(header)) {
          header.forEach(deleteHeader);
        } else {
          deleteHeader(header);
        }
        return deleted;
      }
      clear(matcher) {
        const keys = Object.keys(this);
        let i = keys.length;
        let deleted = false;
        while (i--) {
          const key = keys[i];
          if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
            delete this[key];
            deleted = true;
          }
        }
        return deleted;
      }
      normalize(format) {
        const self2 = this;
        const headers = {};
        utils$1.forEach(this, (value, header) => {
          const key = utils$1.findKey(headers, header);
          if (key) {
            self2[key] = normalizeValue(value);
            delete self2[header];
            return;
          }
          const normalized = format ? formatHeader(header) : String(header).trim();
          if (normalized !== header) {
            delete self2[header];
          }
          self2[normalized] = normalizeValue(value);
          headers[normalized] = true;
        });
        return this;
      }
      concat(...targets) {
        return this.constructor.concat(this, ...targets);
      }
      toJSON(asStrings) {
        const obj = /* @__PURE__ */ Object.create(null);
        utils$1.forEach(this, (value, header) => {
          value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(", ") : value);
        });
        return obj;
      }
      [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
      }
      toString() {
        return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
      }
      getSetCookie() {
        return this.get("set-cookie") || [];
      }
      get [Symbol.toStringTag]() {
        return "AxiosHeaders";
      }
      static from(thing) {
        return thing instanceof this ? thing : new this(thing);
      }
      static concat(first, ...targets) {
        const computed = new this(first);
        targets.forEach((target) => computed.set(target));
        return computed;
      }
      static accessor(header) {
        const internals = this[$internals] = this[$internals] = {
          accessors: {}
        };
        const accessors = internals.accessors;
        const prototype2 = this.prototype;
        function defineAccessor(_header) {
          const lHeader = normalizeHeader(_header);
          if (!accessors[lHeader]) {
            buildAccessors(prototype2, _header);
            accessors[lHeader] = true;
          }
        }
        utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
        return this;
      }
    };
    AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
    utils$1.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
      let mapped = key[0].toUpperCase() + key.slice(1);
      return {
        get: () => value,
        set(headerValue) {
          this[mapped] = headerValue;
        }
      };
    });
    utils$1.freezeMethods(AxiosHeaders);
    var AxiosHeaders$1 = AxiosHeaders;
    function transformData(fns, response) {
      const config = this || defaults$1;
      const context = response || config;
      const headers = AxiosHeaders$1.from(context.headers);
      let data = context.data;
      utils$1.forEach(fns, function transform(fn) {
        data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
      });
      headers.normalize();
      return data;
    }
    function isCancel(value) {
      return !!(value && value.__CANCEL__);
    }
    function CanceledError(message, config, request) {
      AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED, config, request);
      this.name = "CanceledError";
    }
    utils$1.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });
    function settle(resolve, reject, response) {
      const validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError(
          "Request failed with status code " + response.status,
          [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    }
    function parseProtocol(url) {
      const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || "";
    }
    function speedometer(samplesCount, min) {
      samplesCount = samplesCount || 10;
      const bytes = new Array(samplesCount);
      const timestamps = new Array(samplesCount);
      let head = 0;
      let tail = 0;
      let firstSampleTS;
      min = min !== void 0 ? min : 1e3;
      return function push(chunkLength) {
        const now = Date.now();
        const startedAt = timestamps[tail];
        if (!firstSampleTS) {
          firstSampleTS = now;
        }
        bytes[head] = chunkLength;
        timestamps[head] = now;
        let i = tail;
        let bytesCount = 0;
        while (i !== head) {
          bytesCount += bytes[i++];
          i = i % samplesCount;
        }
        head = (head + 1) % samplesCount;
        if (head === tail) {
          tail = (tail + 1) % samplesCount;
        }
        if (now - firstSampleTS < min) {
          return;
        }
        const passed = startedAt && now - startedAt;
        return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
      };
    }
    function throttle(fn, freq) {
      let timestamp = 0;
      let threshold = 1e3 / freq;
      let lastArgs;
      let timer;
      const invoke = (args, now = Date.now()) => {
        timestamp = now;
        lastArgs = null;
        if (timer) {
          clearTimeout(timer);
          timer = null;
        }
        fn(...args);
      };
      const throttled = (...args) => {
        const now = Date.now();
        const passed = now - timestamp;
        if (passed >= threshold) {
          invoke(args, now);
        } else {
          lastArgs = args;
          if (!timer) {
            timer = setTimeout(() => {
              timer = null;
              invoke(lastArgs);
            }, threshold - passed);
          }
        }
      };
      const flush = () => lastArgs && invoke(lastArgs);
      return [throttled, flush];
    }
    var progressEventReducer = (listener, isDownloadStream, freq = 3) => {
      let bytesNotified = 0;
      const _speedometer = speedometer(50, 250);
      return throttle((e) => {
        const loaded = e.loaded;
        const total = e.lengthComputable ? e.total : void 0;
        const progressBytes = loaded - bytesNotified;
        const rate = _speedometer(progressBytes);
        const inRange = loaded <= total;
        bytesNotified = loaded;
        const data = {
          loaded,
          total,
          progress: total ? loaded / total : void 0,
          bytes: progressBytes,
          rate: rate ? rate : void 0,
          estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
          event: e,
          lengthComputable: total != null,
          [isDownloadStream ? "download" : "upload"]: true
        };
        listener(data);
      }, freq);
    };
    var progressEventDecorator = (total, throttled) => {
      const lengthComputable = total != null;
      return [(loaded) => throttled[0]({
        lengthComputable,
        total,
        loaded
      }), throttled[1]];
    };
    var asyncDecorator = (fn) => (...args) => utils$1.asap(() => fn(...args));
    var isURLSameOrigin = platform.hasStandardBrowserEnv ? ((origin2, isMSIE) => (url) => {
      url = new URL(url, platform.origin);
      return origin2.protocol === url.protocol && origin2.host === url.host && (isMSIE || origin2.port === url.port);
    })(
      new URL(platform.origin),
      platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent)
    ) : () => true;
    var cookies = platform.hasStandardBrowserEnv ? (
      // Standard browser envs support document.cookie
      {
        write(name, value, expires, path, domain, secure) {
          const cookie = [name + "=" + encodeURIComponent(value)];
          utils$1.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
          utils$1.isString(path) && cookie.push("path=" + path);
          utils$1.isString(domain) && cookie.push("domain=" + domain);
          secure === true && cookie.push("secure");
          document.cookie = cookie.join("; ");
        },
        read(name) {
          const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      }
    ) : (
      // Non-standard browser env (web workers, react-native) lack needed support.
      {
        write() {
        },
        read() {
          return null;
        },
        remove() {
        }
      }
    );
    function isAbsoluteURL(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    }
    function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    }
    function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {
      let isRelativeUrl = !isAbsoluteURL(requestedURL);
      if (baseURL && (isRelativeUrl || allowAbsoluteUrls == false)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    }
    var headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;
    function mergeConfig(config1, config2) {
      config2 = config2 || {};
      const config = {};
      function getMergedValue(target, source, prop, caseless) {
        if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
          return utils$1.merge.call({ caseless }, target, source);
        } else if (utils$1.isPlainObject(source)) {
          return utils$1.merge({}, source);
        } else if (utils$1.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(a, b, prop, caseless) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(a, b, prop, caseless);
        } else if (!utils$1.isUndefined(a)) {
          return getMergedValue(void 0, a, prop, caseless);
        }
      }
      function valueFromConfig2(a, b) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(void 0, b);
        }
      }
      function defaultToConfig2(a, b) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(void 0, b);
        } else if (!utils$1.isUndefined(a)) {
          return getMergedValue(void 0, a);
        }
      }
      function mergeDirectKeys(a, b, prop) {
        if (prop in config2) {
          return getMergedValue(a, b);
        } else if (prop in config1) {
          return getMergedValue(void 0, a);
        }
      }
      const mergeMap = {
        url: valueFromConfig2,
        method: valueFromConfig2,
        data: valueFromConfig2,
        baseURL: defaultToConfig2,
        transformRequest: defaultToConfig2,
        transformResponse: defaultToConfig2,
        paramsSerializer: defaultToConfig2,
        timeout: defaultToConfig2,
        timeoutMessage: defaultToConfig2,
        withCredentials: defaultToConfig2,
        withXSRFToken: defaultToConfig2,
        adapter: defaultToConfig2,
        responseType: defaultToConfig2,
        xsrfCookieName: defaultToConfig2,
        xsrfHeaderName: defaultToConfig2,
        onUploadProgress: defaultToConfig2,
        onDownloadProgress: defaultToConfig2,
        decompress: defaultToConfig2,
        maxContentLength: defaultToConfig2,
        maxBodyLength: defaultToConfig2,
        beforeRedirect: defaultToConfig2,
        transport: defaultToConfig2,
        httpAgent: defaultToConfig2,
        httpsAgent: defaultToConfig2,
        cancelToken: defaultToConfig2,
        socketPath: defaultToConfig2,
        responseEncoding: defaultToConfig2,
        validateStatus: mergeDirectKeys,
        headers: (a, b, prop) => mergeDeepProperties(headersToObject(a), headersToObject(b), prop, true)
      };
      utils$1.forEach(Object.keys({ ...config1, ...config2 }), function computeConfigValue(prop) {
        const merge2 = mergeMap[prop] || mergeDeepProperties;
        const configValue = merge2(config1[prop], config2[prop], prop);
        utils$1.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    }
    var resolveConfig = (config) => {
      const newConfig = mergeConfig({}, config);
      let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
      newConfig.headers = headers = AxiosHeaders$1.from(headers);
      newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);
      if (auth) {
        headers.set(
          "Authorization",
          "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
        );
      }
      let contentType;
      if (utils$1.isFormData(data)) {
        if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
          headers.setContentType(void 0);
        } else if ((contentType = headers.getContentType()) !== false) {
          const [type, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
          headers.setContentType([type || "multipart/form-data", ...tokens].join("; "));
        }
      }
      if (platform.hasStandardBrowserEnv) {
        withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
        if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(newConfig.url)) {
          const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);
          if (xsrfValue) {
            headers.set(xsrfHeaderName, xsrfValue);
          }
        }
      }
      return newConfig;
    };
    var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
    var xhrAdapter = isXHRAdapterSupported && function(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        const _config = resolveConfig(config);
        let requestData = _config.data;
        const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize();
        let { responseType, onUploadProgress, onDownloadProgress } = _config;
        let onCanceled;
        let uploadThrottled, downloadThrottled;
        let flushUpload, flushDownload;
        function done() {
          flushUpload && flushUpload();
          flushDownload && flushDownload();
          _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
          _config.signal && _config.signal.removeEventListener("abort", onCanceled);
        }
        let request = new XMLHttpRequest();
        request.open(_config.method.toUpperCase(), _config.url, true);
        request.timeout = _config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          const responseHeaders = AxiosHeaders$1.from(
            "getAllResponseHeaders" in request && request.getAllResponseHeaders()
          );
          const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
          const transitional = _config.transitional || transitionalDefaults;
          if (_config.timeoutErrorMessage) {
            timeoutErrorMessage = _config.timeoutErrorMessage;
          }
          reject(new AxiosError(
            timeoutErrorMessage,
            transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
            config,
            request
          ));
          request = null;
        };
        requestData === void 0 && requestHeaders.setContentType(null);
        if ("setRequestHeader" in request) {
          utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
          });
        }
        if (!utils$1.isUndefined(_config.withCredentials)) {
          request.withCredentials = !!_config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = _config.responseType;
        }
        if (onDownloadProgress) {
          [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
          request.addEventListener("progress", downloadThrottled);
        }
        if (onUploadProgress && request.upload) {
          [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
          request.upload.addEventListener("progress", uploadThrottled);
          request.upload.addEventListener("loadend", flushUpload);
        }
        if (_config.cancelToken || _config.signal) {
          onCanceled = (cancel) => {
            if (!request) {
              return;
            }
            reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
            request.abort();
            request = null;
          };
          _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
          if (_config.signal) {
            _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
          }
        }
        const protocol = parseProtocol(_config.url);
        if (protocol && platform.protocols.indexOf(protocol) === -1) {
          reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
          return;
        }
        request.send(requestData || null);
      });
    };
    var composeSignals = (signals, timeout) => {
      const { length } = signals = signals ? signals.filter(Boolean) : [];
      if (timeout || length) {
        let controller = new AbortController();
        let aborted;
        const onabort = function(reason) {
          if (!aborted) {
            aborted = true;
            unsubscribe();
            const err = reason instanceof Error ? reason : this.reason;
            controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));
          }
        };
        let timer = timeout && setTimeout(() => {
          timer = null;
          onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT));
        }, timeout);
        const unsubscribe = () => {
          if (signals) {
            timer && clearTimeout(timer);
            timer = null;
            signals.forEach((signal2) => {
              signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
            });
            signals = null;
          }
        };
        signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
        const { signal } = controller;
        signal.unsubscribe = () => utils$1.asap(unsubscribe);
        return signal;
      }
    };
    var composeSignals$1 = composeSignals;
    var streamChunk = function* (chunk, chunkSize) {
      let len = chunk.byteLength;
      if (!chunkSize || len < chunkSize) {
        yield chunk;
        return;
      }
      let pos = 0;
      let end;
      while (pos < len) {
        end = pos + chunkSize;
        yield chunk.slice(pos, end);
        pos = end;
      }
    };
    var readBytes = async function* (iterable, chunkSize) {
      for await (const chunk of readStream(iterable)) {
        yield* streamChunk(chunk, chunkSize);
      }
    };
    var readStream = async function* (stream) {
      if (stream[Symbol.asyncIterator]) {
        yield* stream;
        return;
      }
      const reader = stream.getReader();
      try {
        for (; ; ) {
          const { done, value } = await reader.read();
          if (done) {
            break;
          }
          yield value;
        }
      } finally {
        await reader.cancel();
      }
    };
    var trackStream = (stream, chunkSize, onProgress, onFinish) => {
      const iterator2 = readBytes(stream, chunkSize);
      let bytes = 0;
      let done;
      let _onFinish = (e) => {
        if (!done) {
          done = true;
          onFinish && onFinish(e);
        }
      };
      return new ReadableStream({
        async pull(controller) {
          try {
            const { done: done2, value } = await iterator2.next();
            if (done2) {
              _onFinish();
              controller.close();
              return;
            }
            let len = value.byteLength;
            if (onProgress) {
              let loadedBytes = bytes += len;
              onProgress(loadedBytes);
            }
            controller.enqueue(new Uint8Array(value));
          } catch (err) {
            _onFinish(err);
            throw err;
          }
        },
        cancel(reason) {
          _onFinish(reason);
          return iterator2.return();
        }
      }, {
        highWaterMark: 2
      });
    };
    var isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
    var isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
    var encodeText = isFetchSupported && (typeof TextEncoder === "function" ? ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
    var test = (fn, ...args) => {
      try {
        return !!fn(...args);
      } catch (e) {
        return false;
      }
    };
    var supportsRequestStream = isReadableStreamSupported && test(() => {
      let duplexAccessed = false;
      const hasContentType = new Request(platform.origin, {
        body: new ReadableStream(),
        method: "POST",
        get duplex() {
          duplexAccessed = true;
          return "half";
        }
      }).headers.has("Content-Type");
      return duplexAccessed && !hasContentType;
    });
    var DEFAULT_CHUNK_SIZE = 64 * 1024;
    var supportsResponseStream = isReadableStreamSupported && test(() => utils$1.isReadableStream(new Response("").body));
    var resolvers = {
      stream: supportsResponseStream && ((res) => res.body)
    };
    isFetchSupported && ((res) => {
      ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {
        !resolvers[type] && (resolvers[type] = utils$1.isFunction(res[type]) ? (res2) => res2[type]() : (_, config) => {
          throw new AxiosError(`Response type '${type}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);
        });
      });
    })(new Response());
    var getBodyLength = async (body) => {
      if (body == null) {
        return 0;
      }
      if (utils$1.isBlob(body)) {
        return body.size;
      }
      if (utils$1.isSpecCompliantForm(body)) {
        const _request = new Request(platform.origin, {
          method: "POST",
          body
        });
        return (await _request.arrayBuffer()).byteLength;
      }
      if (utils$1.isArrayBufferView(body) || utils$1.isArrayBuffer(body)) {
        return body.byteLength;
      }
      if (utils$1.isURLSearchParams(body)) {
        body = body + "";
      }
      if (utils$1.isString(body)) {
        return (await encodeText(body)).byteLength;
      }
    };
    var resolveBodyLength = async (headers, body) => {
      const length = utils$1.toFiniteNumber(headers.getContentLength());
      return length == null ? getBodyLength(body) : length;
    };
    var fetchAdapter = isFetchSupported && (async (config) => {
      let {
        url,
        method,
        data,
        signal,
        cancelToken,
        timeout,
        onDownloadProgress,
        onUploadProgress,
        responseType,
        headers,
        withCredentials = "same-origin",
        fetchOptions
      } = resolveConfig(config);
      responseType = responseType ? (responseType + "").toLowerCase() : "text";
      let composedSignal = composeSignals$1([signal, cancelToken && cancelToken.toAbortSignal()], timeout);
      let request;
      const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
        composedSignal.unsubscribe();
      });
      let requestContentLength;
      try {
        if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
          let _request = new Request(url, {
            method: "POST",
            body: data,
            duplex: "half"
          });
          let contentTypeHeader;
          if (utils$1.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
            headers.setContentType(contentTypeHeader);
          }
          if (_request.body) {
            const [onProgress, flush] = progressEventDecorator(
              requestContentLength,
              progressEventReducer(asyncDecorator(onUploadProgress))
            );
            data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
          }
        }
        if (!utils$1.isString(withCredentials)) {
          withCredentials = withCredentials ? "include" : "omit";
        }
        const isCredentialsSupported = "credentials" in Request.prototype;
        request = new Request(url, {
          ...fetchOptions,
          signal: composedSignal,
          method: method.toUpperCase(),
          headers: headers.normalize().toJSON(),
          body: data,
          duplex: "half",
          credentials: isCredentialsSupported ? withCredentials : void 0
        });
        let response = await fetch(request, fetchOptions);
        const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
        if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
          const options = {};
          ["status", "statusText", "headers"].forEach((prop) => {
            options[prop] = response[prop];
          });
          const responseContentLength = utils$1.toFiniteNumber(response.headers.get("content-length"));
          const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
            responseContentLength,
            progressEventReducer(asyncDecorator(onDownloadProgress), true)
          ) || [];
          response = new Response(
            trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
              flush && flush();
              unsubscribe && unsubscribe();
            }),
            options
          );
        }
        responseType = responseType || "text";
        let responseData = await resolvers[utils$1.findKey(resolvers, responseType) || "text"](response, config);
        !isStreamResponse && unsubscribe && unsubscribe();
        return await new Promise((resolve, reject) => {
          settle(resolve, reject, {
            data: responseData,
            headers: AxiosHeaders$1.from(response.headers),
            status: response.status,
            statusText: response.statusText,
            config,
            request
          });
        });
      } catch (err) {
        unsubscribe && unsubscribe();
        if (err && err.name === "TypeError" && /Load failed|fetch/i.test(err.message)) {
          throw Object.assign(
            new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request),
            {
              cause: err.cause || err
            }
          );
        }
        throw AxiosError.from(err, err && err.code, config, request);
      }
    });
    var knownAdapters = {
      http: httpAdapter,
      xhr: xhrAdapter,
      fetch: fetchAdapter
    };
    utils$1.forEach(knownAdapters, (fn, value) => {
      if (fn) {
        try {
          Object.defineProperty(fn, "name", { value });
        } catch (e) {
        }
        Object.defineProperty(fn, "adapterName", { value });
      }
    });
    var renderReason = (reason) => `- ${reason}`;
    var isResolvedHandle = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;
    var adapters = {
      getAdapter: (adapters2) => {
        adapters2 = utils$1.isArray(adapters2) ? adapters2 : [adapters2];
        const { length } = adapters2;
        let nameOrAdapter;
        let adapter;
        const rejectedReasons = {};
        for (let i = 0; i < length; i++) {
          nameOrAdapter = adapters2[i];
          let id;
          adapter = nameOrAdapter;
          if (!isResolvedHandle(nameOrAdapter)) {
            adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
            if (adapter === void 0) {
              throw new AxiosError(`Unknown adapter '${id}'`);
            }
          }
          if (adapter) {
            break;
          }
          rejectedReasons[id || "#" + i] = adapter;
        }
        if (!adapter) {
          const reasons = Object.entries(rejectedReasons).map(
            ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
          );
          let s = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
          throw new AxiosError(
            `There is no suitable adapter to dispatch the request ` + s,
            "ERR_NOT_SUPPORT"
          );
        }
        return adapter;
      },
      adapters: knownAdapters
    };
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new CanceledError(null, config);
      }
    }
    function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = AxiosHeaders$1.from(config.headers);
      config.data = transformData.call(
        config,
        config.transformRequest
      );
      if (["post", "put", "patch"].indexOf(config.method) !== -1) {
        config.headers.setContentType("application/x-www-form-urlencoded", false);
      }
      const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          config.transformResponse,
          response
        );
        response.headers = AxiosHeaders$1.from(response.headers);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              config.transformResponse,
              reason.response
            );
            reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
          }
        }
        return Promise.reject(reason);
      });
    }
    var VERSION = "1.11.0";
    var validators$1 = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
      validators$1[type] = function validator2(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators$1.transitional = function transitional(validator2, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return (value, opt, opts) => {
        if (validator2 === false) {
          throw new AxiosError(
            formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
            AxiosError.ERR_DEPRECATED
          );
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator2 ? validator2(value, opt, opts) : true;
      };
    };
    validators$1.spelling = function spelling(correctSpelling) {
      return (value, opt) => {
        console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
        return true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
      }
      const keys = Object.keys(options);
      let i = keys.length;
      while (i-- > 0) {
        const opt = keys[i];
        const validator2 = schema[opt];
        if (validator2) {
          const value = options[opt];
          const result = value === void 0 || validator2(value, opt, options);
          if (result !== true) {
            throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
        }
      }
    }
    var validator = {
      assertOptions,
      validators: validators$1
    };
    var validators = validator.validators;
    var Axios = class {
      constructor(instanceConfig) {
        this.defaults = instanceConfig || {};
        this.interceptors = {
          request: new InterceptorManager$1(),
          response: new InterceptorManager$1()
        };
      }
      /**
       * Dispatch a request
       *
       * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
       * @param {?Object} config
       *
       * @returns {Promise} The Promise to be fulfilled
       */
      async request(configOrUrl, config) {
        try {
          return await this._request(configOrUrl, config);
        } catch (err) {
          if (err instanceof Error) {
            let dummy = {};
            Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error();
            const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
            try {
              if (!err.stack) {
                err.stack = stack;
              } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
                err.stack += "\n" + stack;
              }
            } catch (e) {
            }
          }
          throw err;
        }
      }
      _request(configOrUrl, config) {
        if (typeof configOrUrl === "string") {
          config = config || {};
          config.url = configOrUrl;
        } else {
          config = configOrUrl || {};
        }
        config = mergeConfig(this.defaults, config);
        const { transitional, paramsSerializer, headers } = config;
        if (transitional !== void 0) {
          validator.assertOptions(transitional, {
            silentJSONParsing: validators.transitional(validators.boolean),
            forcedJSONParsing: validators.transitional(validators.boolean),
            clarifyTimeoutError: validators.transitional(validators.boolean)
          }, false);
        }
        if (paramsSerializer != null) {
          if (utils$1.isFunction(paramsSerializer)) {
            config.paramsSerializer = {
              serialize: paramsSerializer
            };
          } else {
            validator.assertOptions(paramsSerializer, {
              encode: validators.function,
              serialize: validators.function
            }, true);
          }
        }
        if (config.allowAbsoluteUrls !== void 0)
          ;
        else if (this.defaults.allowAbsoluteUrls !== void 0) {
          config.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;
        } else {
          config.allowAbsoluteUrls = true;
        }
        validator.assertOptions(config, {
          baseUrl: validators.spelling("baseURL"),
          withXsrfToken: validators.spelling("withXSRFToken")
        }, true);
        config.method = (config.method || this.defaults.method || "get").toLowerCase();
        let contextHeaders = headers && utils$1.merge(
          headers.common,
          headers[config.method]
        );
        headers && utils$1.forEach(
          ["delete", "get", "head", "post", "put", "patch", "common"],
          (method) => {
            delete headers[method];
          }
        );
        config.headers = AxiosHeaders$1.concat(contextHeaders, headers);
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        let promise;
        let i = 0;
        let len;
        if (!synchronousRequestInterceptors) {
          const chain = [dispatchRequest.bind(this), void 0];
          chain.unshift(...requestInterceptorChain);
          chain.push(...responseInterceptorChain);
          len = chain.length;
          promise = Promise.resolve(config);
          while (i < len) {
            promise = promise.then(chain[i++], chain[i++]);
          }
          return promise;
        }
        len = requestInterceptorChain.length;
        let newConfig = config;
        i = 0;
        while (i < len) {
          const onFulfilled = requestInterceptorChain[i++];
          const onRejected = requestInterceptorChain[i++];
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected.call(this, error);
            break;
          }
        }
        try {
          promise = dispatchRequest.call(this, newConfig);
        } catch (error) {
          return Promise.reject(error);
        }
        i = 0;
        len = responseInterceptorChain.length;
        while (i < len) {
          promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
        }
        return promise;
      }
      getUri(config) {
        config = mergeConfig(this.defaults, config);
        const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);
        return buildURL(fullPath, config.params, config.paramsSerializer);
      }
    };
    utils$1.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils$1.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url,
            data
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    var Axios$1 = Axios;
    var CancelToken = class _CancelToken {
      constructor(executor) {
        if (typeof executor !== "function") {
          throw new TypeError("executor must be a function.");
        }
        let resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });
        const token = this;
        this.promise.then((cancel) => {
          if (!token._listeners)
            return;
          let i = token._listeners.length;
          while (i-- > 0) {
            token._listeners[i](cancel);
          }
          token._listeners = null;
        });
        this.promise.then = (onfulfilled) => {
          let _resolve;
          const promise = new Promise((resolve) => {
            token.subscribe(resolve);
            _resolve = resolve;
          }).then(onfulfilled);
          promise.cancel = function reject() {
            token.unsubscribe(_resolve);
          };
          return promise;
        };
        executor(function cancel(message, config, request) {
          if (token.reason) {
            return;
          }
          token.reason = new CanceledError(message, config, request);
          resolvePromise(token.reason);
        });
      }
      /**
       * Throws a `CanceledError` if cancellation has been requested.
       */
      throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }
      /**
       * Subscribe to the cancel signal
       */
      subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }
        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      }
      /**
       * Unsubscribe from the cancel signal
       */
      unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        const index = this._listeners.indexOf(listener);
        if (index !== -1) {
          this._listeners.splice(index, 1);
        }
      }
      toAbortSignal() {
        const controller = new AbortController();
        const abort = (err) => {
          controller.abort(err);
        };
        this.subscribe(abort);
        controller.signal.unsubscribe = () => this.unsubscribe(abort);
        return controller.signal;
      }
      /**
       * Returns an object that contains a new `CancelToken` and a function that, when called,
       * cancels the `CancelToken`.
       */
      static source() {
        let cancel;
        const token = new _CancelToken(function executor(c) {
          cancel = c;
        });
        return {
          token,
          cancel
        };
      }
    };
    var CancelToken$1 = CancelToken;
    function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    }
    function isAxiosError(payload) {
      return utils$1.isObject(payload) && payload.isAxiosError === true;
    }
    var HttpStatusCode = {
      Continue: 100,
      SwitchingProtocols: 101,
      Processing: 102,
      EarlyHints: 103,
      Ok: 200,
      Created: 201,
      Accepted: 202,
      NonAuthoritativeInformation: 203,
      NoContent: 204,
      ResetContent: 205,
      PartialContent: 206,
      MultiStatus: 207,
      AlreadyReported: 208,
      ImUsed: 226,
      MultipleChoices: 300,
      MovedPermanently: 301,
      Found: 302,
      SeeOther: 303,
      NotModified: 304,
      UseProxy: 305,
      Unused: 306,
      TemporaryRedirect: 307,
      PermanentRedirect: 308,
      BadRequest: 400,
      Unauthorized: 401,
      PaymentRequired: 402,
      Forbidden: 403,
      NotFound: 404,
      MethodNotAllowed: 405,
      NotAcceptable: 406,
      ProxyAuthenticationRequired: 407,
      RequestTimeout: 408,
      Conflict: 409,
      Gone: 410,
      LengthRequired: 411,
      PreconditionFailed: 412,
      PayloadTooLarge: 413,
      UriTooLong: 414,
      UnsupportedMediaType: 415,
      RangeNotSatisfiable: 416,
      ExpectationFailed: 417,
      ImATeapot: 418,
      MisdirectedRequest: 421,
      UnprocessableEntity: 422,
      Locked: 423,
      FailedDependency: 424,
      TooEarly: 425,
      UpgradeRequired: 426,
      PreconditionRequired: 428,
      TooManyRequests: 429,
      RequestHeaderFieldsTooLarge: 431,
      UnavailableForLegalReasons: 451,
      InternalServerError: 500,
      NotImplemented: 501,
      BadGateway: 502,
      ServiceUnavailable: 503,
      GatewayTimeout: 504,
      HttpVersionNotSupported: 505,
      VariantAlsoNegotiates: 506,
      InsufficientStorage: 507,
      LoopDetected: 508,
      NotExtended: 510,
      NetworkAuthenticationRequired: 511
    };
    Object.entries(HttpStatusCode).forEach(([key, value]) => {
      HttpStatusCode[value] = key;
    });
    var HttpStatusCode$1 = HttpStatusCode;
    function createInstance(defaultConfig) {
      const context = new Axios$1(defaultConfig);
      const instance = bind(Axios$1.prototype.request, context);
      utils$1.extend(instance, Axios$1.prototype, context, { allOwnKeys: true });
      utils$1.extend(instance, context, null, { allOwnKeys: true });
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults$1);
    axios.Axios = Axios$1;
    axios.CanceledError = CanceledError;
    axios.CancelToken = CancelToken$1;
    axios.isCancel = isCancel;
    axios.VERSION = VERSION;
    axios.toFormData = toFormData;
    axios.AxiosError = AxiosError;
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = spread;
    axios.isAxiosError = isAxiosError;
    axios.mergeConfig = mergeConfig;
    axios.AxiosHeaders = AxiosHeaders$1;
    axios.formToJSON = (thing) => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);
    axios.getAdapter = adapters.getAdapter;
    axios.HttpStatusCode = HttpStatusCode$1;
    axios.default = axios;
    module.exports = axios;
  }
});

// node_modules/tiktok-live-connector/dist/lib/web/lib/cookie-jar.js
var require_cookie_jar = __commonJS({
  "node_modules/tiktok-live-connector/dist/lib/web/lib/cookie-jar.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var config_1 = __importDefault(require_config());
    var CookieJar = class {
      /**
       * Constructor
       *
       * @param axiosInstance The axios instance to attach the cookie jar to
       * @param cookies The initial cookies to set
       */
      constructor(axiosInstance, cookies = config_1.default.DEFAULT_HTTP_CLIENT_COOKIES) {
        __publicField(this, "axiosInstance");
        __publicField(this, "cookies");
        this.axiosInstance = axiosInstance;
        this.cookies = cookies;
        this.axiosInstance.interceptors.response.use((response) => {
          this.readCookies(response);
          return response;
        });
        this.axiosInstance.interceptors.request.use((request) => {
          this.appendCookies(request);
          return request;
        });
        return new Proxy(this, {
          get(target, p) {
            if (p in target) {
              return target[p];
            } else {
              return target.cookies[p];
            }
          },
          set(target, p, value) {
            if (value === null) {
              delete target.cookies[p];
              return true;
            }
            if (p in target) {
              target[p] = value;
            } else {
              target.cookies[p] = value;
            }
            return true;
          },
          deleteProperty(target, p) {
            delete target.cookies[p];
            return true;
          }
        });
      }
      /**
       * Set the session ID and tt-target-idc
       *
       * @param sessionId The session ID to set
       * @param ttTargetIdc The tt-target-idc to set
       */
      setSession(sessionId, ttTargetIdc) {
        if (sessionId && !ttTargetIdc) {
          throw new Error("tt-target-idc is required when sessionId is set");
        }
        this.cookies["sessionid"] = sessionId;
        this.cookies["sessionid_ss"] = sessionId;
        this.cookies["sid_tt"] = sessionId;
        this.cookies["sid_guard"] = sessionId;
        this.cookies["tt-target-idc"] = ttTargetIdc;
      }
      /**
       * Get the tt-target-idc cookie
       */
      get ttTargetIdc() {
        return this.cookies["tt-target-idc"] || null;
      }
      /**
       * Get the session ID
       */
      get sessionId() {
        return this.cookies["sessionid"] || this.cookies["sessionid_ss"] || this.cookies["sid_tt"] || this.cookies["sid_guard"] || null;
      }
      /**
       * Read cookies from response headers
       * @param response The axios response
       */
      readCookies(response) {
        const setCookieHeaders = response.headers["set-cookie"];
        if (Array.isArray(setCookieHeaders)) {
          setCookieHeaders.forEach((setCookieHeader) => this.processSetCookieHeader(setCookieHeader));
        } else if (typeof setCookieHeaders === "string") {
          this.processSetCookieHeader(setCookieHeaders);
        }
      }
      /**
       * Append cookies to request headers
       * @param request The axios request
       */
      appendCookies(request) {
        if (request.headers["cookie"]) {
          request.headers["Cookie"] = request.headers["cookie"];
          delete request.headers["cookie"];
        }
        const headerCookie = request.headers["Cookie"];
        if (typeof headerCookie === "string") {
          Object.assign(this.cookies, this.parseCookie(headerCookie), this.cookies);
        }
        request.headers["Cookie"] = this.getCookieString();
      }
      /**
       * Parse cookie string
       * @param str The cookie string
       */
      parseCookie(str) {
        const cookies = {};
        if (!str)
          return cookies;
        str.split("; ").forEach((v) => {
          if (!v)
            return;
          const parts = String(v).split("=");
          const cookieName = decodeURIComponent(parts.shift());
          cookies[cookieName] = parts.join("=");
        });
        return cookies;
      }
      /**
       * Process a single set-cookie header
       * @param setCookieHeader The set-cookie header
       */
      processSetCookieHeader(setCookieHeader) {
        const nameValuePart = setCookieHeader.split(";")[0];
        const parts = nameValuePart.split("=");
        const cookieName = parts.shift();
        const cookieValue = parts.join("=");
        if (typeof cookieName === "string" && cookieName !== "" && typeof cookieValue === "string") {
          this.cookies[decodeURIComponent(cookieName)] = cookieValue;
        }
      }
      /**
       * Get the cookie string
       */
      getCookieString() {
        let cookieParams = [];
        for (const [cookieName, cookieValue] of Object.entries(this.cookies)) {
          if (!cookieValue)
            continue;
          cookieParams.push(cookieName + "=" + cookieValue);
        }
        return cookieParams.join("; ");
      }
    };
    exports.default = CookieJar;
  }
});

// node_modules/@eulerstream/euler-api-sdk/dist/sdk/base.js
var require_base = __commonJS({
  "node_modules/@eulerstream/euler-api-sdk/dist/sdk/base.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.operationServerMap = exports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = exports.BASE_PATH = void 0;
    var axios_1 = __importDefault(require_axios());
    exports.BASE_PATH = "https://tiktok.eulerstream.com".replace(/\/+$/, "");
    exports.COLLECTION_FORMATS = {
      csv: ",",
      ssv: " ",
      tsv: "	",
      pipes: "|"
    };
    var BaseAPI = class {
      constructor(configuration, basePath = exports.BASE_PATH, axios = axios_1.default) {
        __publicField(this, "basePath");
        __publicField(this, "axios");
        __publicField(this, "configuration");
        this.basePath = basePath;
        this.axios = axios;
        if (configuration) {
          this.configuration = configuration;
          this.basePath = configuration.basePath ?? basePath;
        }
      }
    };
    exports.BaseAPI = BaseAPI;
    var RequiredError = class extends Error {
      constructor(field, msg) {
        super(msg);
        __publicField(this, "field");
        this.field = field;
        this.name = "RequiredError";
      }
    };
    exports.RequiredError = RequiredError;
    exports.operationServerMap = {};
  }
});

// node_modules/@eulerstream/euler-api-sdk/dist/sdk/common.js
var require_common = __commonJS({
  "node_modules/@eulerstream/euler-api-sdk/dist/sdk/common.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createRequestFunction = exports.toPathString = exports.serializeDataIfNeeded = exports.setSearchParams = exports.setOAuthToObject = exports.setBearerAuthToObject = exports.setBasicAuthToObject = exports.setApiKeyToObject = exports.assertParamExists = exports.DUMMY_BASE_URL = void 0;
    var base_1 = require_base();
    exports.DUMMY_BASE_URL = "https://example.com";
    var assertParamExists = function(functionName, paramName, paramValue) {
      if (paramValue === null || paramValue === void 0) {
        throw new base_1.RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);
      }
    };
    exports.assertParamExists = assertParamExists;
    var setApiKeyToObject = async function(object, keyParamName, configuration) {
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === "function" ? await configuration.apiKey(keyParamName) : await configuration.apiKey;
        object[keyParamName] = localVarApiKeyValue;
      }
    };
    exports.setApiKeyToObject = setApiKeyToObject;
    var setBasicAuthToObject = function(object, configuration) {
      if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = { username: configuration.username, password: configuration.password };
      }
    };
    exports.setBasicAuthToObject = setBasicAuthToObject;
    var setBearerAuthToObject = async function(object, configuration) {
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === "function" ? await configuration.accessToken() : await configuration.accessToken;
        object["Authorization"] = "Bearer " + accessToken;
      }
    };
    exports.setBearerAuthToObject = setBearerAuthToObject;
    var setOAuthToObject = async function(object, name, scopes, configuration) {
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === "function" ? await configuration.accessToken(name, scopes) : await configuration.accessToken;
        object["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }
    };
    exports.setOAuthToObject = setOAuthToObject;
    function setFlattenedQueryParams(urlSearchParams, parameter, key = "") {
      if (parameter == null)
        return;
      if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
          parameter.forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key));
        } else {
          Object.keys(parameter).forEach((currentKey) => setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== "" ? "." : ""}${currentKey}`));
        }
      } else {
        if (urlSearchParams.has(key)) {
          urlSearchParams.append(key, parameter);
        } else {
          urlSearchParams.set(key, parameter);
        }
      }
    }
    var setSearchParams = function(url, ...objects) {
      const searchParams = new URLSearchParams(url.search);
      setFlattenedQueryParams(searchParams, objects);
      url.search = searchParams.toString();
    };
    exports.setSearchParams = setSearchParams;
    var serializeDataIfNeeded = function(value, requestOptions, configuration) {
      const nonString = typeof value !== "string";
      const needsSerialization = nonString && configuration && configuration.isJsonMime ? configuration.isJsonMime(requestOptions.headers["Content-Type"]) : nonString;
      return needsSerialization ? JSON.stringify(value !== void 0 ? value : {}) : value || "";
    };
    exports.serializeDataIfNeeded = serializeDataIfNeeded;
    var toPathString = function(url) {
      return url.pathname + url.search + url.hash;
    };
    exports.toPathString = toPathString;
    var createRequestFunction = function(axiosArgs, globalAxios, BASE_PATH, configuration) {
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = { ...axiosArgs.options, url: (axios.defaults.baseURL ? "" : (configuration == null ? void 0 : configuration.basePath) ?? basePath) + axiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    };
    exports.createRequestFunction = createRequestFunction;
  }
});

// node_modules/@eulerstream/euler-api-sdk/dist/sdk/api.js
var require_api = __commonJS({
  "node_modules/@eulerstream/euler-api-sdk/dist/sdk/api.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebcastApi = exports.WebcastApiFactory = exports.WebcastApiFp = exports.WebcastApiAxiosParamCreator = exports.UpdateKeyUpdateByEnum = exports.GetKeyRetrieveByEnum = exports.DeleteKeyDeleteByEnum = exports.AuthenticationApi = exports.AuthenticationApiFactory = exports.AuthenticationApiFp = exports.AuthenticationApiAxiosParamCreator = exports.AnalyticsApi = exports.AnalyticsApiFactory = exports.AnalyticsApiFp = exports.AnalyticsApiAxiosParamCreator = exports.AlertsApi = exports.AlertsApiFactory = exports.AlertsApiFp = exports.AlertsApiAxiosParamCreator = exports.AlertTargetsApi = exports.AlertTargetsApiFactory = exports.AlertTargetsApiFp = exports.AlertTargetsApiAxiosParamCreator = exports.RetrieveAggregateUsagePeriodEnum = exports.AccountsApi = exports.AccountsApiFactory = exports.AccountsApiFp = exports.AccountsApiAxiosParamCreator = exports.StreamType = exports.PeerRole = exports.PeerPresenceTypeEnum = exports.LogRequestMethod = exports.LiveClient = exports.ISignTikTokUrlBodyTypeEnum = exports.ISignTikTokUrlBodyMethodEnum = exports.IAlertTargetStatus = exports.IAlertTargetFormat = exports.ApiRoutes = void 0;
    var axios_1 = __importDefault(require_axios());
    var common_1 = require_common();
    var base_1 = require_base();
    exports.ApiRoutes = {
      ApiLive: "api-live",
      InfoByUser: "info-by-user"
    };
    exports.IAlertTargetFormat = {
      NUMBER_0: 0,
      NUMBER_1: 1
    };
    exports.IAlertTargetStatus = {
      NUMBER_0: 0,
      NUMBER_1: 1,
      NUMBER_4: 4
    };
    exports.ISignTikTokUrlBodyMethodEnum = {
      Get: "GET",
      Post: "POST",
      Options: "OPTIONS",
      Put: "PUT",
      Delete: "DELETE",
      Patch: "PATCH",
      Head: "HEAD"
    };
    exports.ISignTikTokUrlBodyTypeEnum = {
      Fetch: "fetch",
      Xhr: "xhr"
    };
    exports.LiveClient = {
      TtliveJava: "ttlive-java",
      TtliveNode: "ttlive-node",
      TtlivePython: "ttlive-python",
      TtliveNet: "ttlive-net",
      TtliveRust: "ttlive-rust",
      GotiktokLive: "gotiktok_live",
      TtliveCloudflare: "ttlive-cloudflare",
      TtliveOther: "ttlive-other"
    };
    exports.LogRequestMethod = {
      NUMBER_0: 0,
      NUMBER_1: 1
    };
    exports.PeerPresenceTypeEnum = {
      Api: "api",
      Agent: "agent"
    };
    exports.PeerRole = {
      Public: "public",
      Enterprise: "enterprise",
      Staging: "staging"
    };
    exports.StreamType = {
      HlsLd: "hls_ld",
      HlsSd: "hls_sd",
      FlvLd: "flv_ld",
      FlvSd: "flv_sd"
    };
    var AccountsApiAxiosParamCreator = function(configuration) {
      return {
        /**
         * Retrieve the usage logs for a specific account
         * @param {number} accountId Account ID to retrieve usage logs for
         * @param {string} from Start date for the logs
         * @param {string} to End date for the logs
         * @param {number} [apiKeyId] Optional API key ID to filter logs by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countSignUsage: async (accountId, from, to, apiKeyId, options = {}) => {
          (0, common_1.assertParamExists)("countSignUsage", "accountId", accountId);
          (0, common_1.assertParamExists)("countSignUsage", "from", from);
          (0, common_1.assertParamExists)("countSignUsage", "to", to);
          const localVarPath = `/accounts/{account_id}/usage/sign_usage/page_count`.replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarQueryParameter, "apiKey", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
          if (from !== void 0) {
            localVarQueryParameter["from"] = from instanceof Date ? from.toISOString() : from;
          }
          if (to !== void 0) {
            localVarQueryParameter["to"] = to instanceof Date ? to.toISOString() : to;
          }
          if (apiKeyId !== void 0) {
            localVarQueryParameter["api_key_id"] = apiKeyId;
          }
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        /**
         * Retrieve the usage logs for a specific account
         * @param {number} accountId Account ID to retrieve usage logs for
         * @param {string} from Start date for the logs
         * @param {string} to End date for the logs
         * @param {number} [apiKeyId] Optional API key ID to filter logs by
         * @param {number} [page] Page number to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignUsage: async (accountId, from, to, apiKeyId, page, options = {}) => {
          (0, common_1.assertParamExists)("getSignUsage", "accountId", accountId);
          (0, common_1.assertParamExists)("getSignUsage", "from", from);
          (0, common_1.assertParamExists)("getSignUsage", "to", to);
          const localVarPath = `/accounts/{account_id}/usage/sign_usage`.replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarQueryParameter, "apiKey", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
          if (from !== void 0) {
            localVarQueryParameter["from"] = from instanceof Date ? from.toISOString() : from;
          }
          if (to !== void 0) {
            localVarQueryParameter["to"] = to instanceof Date ? to.toISOString() : to;
          }
          if (apiKeyId !== void 0) {
            localVarQueryParameter["api_key_id"] = apiKeyId;
          }
          if (page !== void 0) {
            localVarQueryParameter["page"] = page;
          }
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        /**
         * Retrieve the usage logs for a specific account
         * @param {number} accountId Account ID to retrieve usage logs for
         * @param {RetrieveAggregateUsagePeriodEnum} period The period for aggregate statistics to check
         * @param {number} value The value for the period (either hours or numbers)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAggregateUsage: async (accountId, period, value, options = {}) => {
          (0, common_1.assertParamExists)("retrieveAggregateUsage", "accountId", accountId);
          (0, common_1.assertParamExists)("retrieveAggregateUsage", "period", period);
          (0, common_1.assertParamExists)("retrieveAggregateUsage", "value", value);
          const localVarPath = `/accounts/{account_id}/usage/sign_usage/aggregate`.replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarQueryParameter, "apiKey", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
          if (period !== void 0) {
            localVarQueryParameter["period"] = period;
          }
          if (value !== void 0) {
            localVarQueryParameter["value"] = value;
          }
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        }
      };
    };
    exports.AccountsApiAxiosParamCreator = AccountsApiAxiosParamCreator;
    var AccountsApiFp = function(configuration) {
      const localVarAxiosParamCreator = (0, exports.AccountsApiAxiosParamCreator)(configuration);
      return {
        /**
         * Retrieve the usage logs for a specific account
         * @param {number} accountId Account ID to retrieve usage logs for
         * @param {string} from Start date for the logs
         * @param {string} to End date for the logs
         * @param {number} [apiKeyId] Optional API key ID to filter logs by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countSignUsage(accountId, from, to, apiKeyId, options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.countSignUsage(accountId, from, to, apiKeyId, options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["AccountsApi.countSignUsage"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the usage logs for a specific account
         * @param {number} accountId Account ID to retrieve usage logs for
         * @param {string} from Start date for the logs
         * @param {string} to End date for the logs
         * @param {number} [apiKeyId] Optional API key ID to filter logs by
         * @param {number} [page] Page number to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSignUsage(accountId, from, to, apiKeyId, page, options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getSignUsage(accountId, from, to, apiKeyId, page, options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["AccountsApi.getSignUsage"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the usage logs for a specific account
         * @param {number} accountId Account ID to retrieve usage logs for
         * @param {RetrieveAggregateUsagePeriodEnum} period The period for aggregate statistics to check
         * @param {number} value The value for the period (either hours or numbers)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAggregateUsage(accountId, period, value, options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAggregateUsage(accountId, period, value, options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["AccountsApi.retrieveAggregateUsage"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        }
      };
    };
    exports.AccountsApiFp = AccountsApiFp;
    var AccountsApiFactory = function(configuration, basePath, axios) {
      const localVarFp = (0, exports.AccountsApiFp)(configuration);
      return {
        /**
         * Retrieve the usage logs for a specific account
         * @param {number} accountId Account ID to retrieve usage logs for
         * @param {string} from Start date for the logs
         * @param {string} to End date for the logs
         * @param {number} [apiKeyId] Optional API key ID to filter logs by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countSignUsage(accountId, from, to, apiKeyId, options) {
          return localVarFp.countSignUsage(accountId, from, to, apiKeyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the usage logs for a specific account
         * @param {number} accountId Account ID to retrieve usage logs for
         * @param {string} from Start date for the logs
         * @param {string} to End date for the logs
         * @param {number} [apiKeyId] Optional API key ID to filter logs by
         * @param {number} [page] Page number to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignUsage(accountId, from, to, apiKeyId, page, options) {
          return localVarFp.getSignUsage(accountId, from, to, apiKeyId, page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the usage logs for a specific account
         * @param {number} accountId Account ID to retrieve usage logs for
         * @param {RetrieveAggregateUsagePeriodEnum} period The period for aggregate statistics to check
         * @param {number} value The value for the period (either hours or numbers)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAggregateUsage(accountId, period, value, options) {
          return localVarFp.retrieveAggregateUsage(accountId, period, value, options).then((request) => request(axios, basePath));
        }
      };
    };
    exports.AccountsApiFactory = AccountsApiFactory;
    var AccountsApi = class extends base_1.BaseAPI {
      /**
       * Retrieve the usage logs for a specific account
       * @param {number} accountId Account ID to retrieve usage logs for
       * @param {string} from Start date for the logs
       * @param {string} to End date for the logs
       * @param {number} [apiKeyId] Optional API key ID to filter logs by
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof AccountsApi
       */
      countSignUsage(accountId, from, to, apiKeyId, options) {
        return (0, exports.AccountsApiFp)(this.configuration).countSignUsage(accountId, from, to, apiKeyId, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Retrieve the usage logs for a specific account
       * @param {number} accountId Account ID to retrieve usage logs for
       * @param {string} from Start date for the logs
       * @param {string} to End date for the logs
       * @param {number} [apiKeyId] Optional API key ID to filter logs by
       * @param {number} [page] Page number to retrieve
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof AccountsApi
       */
      getSignUsage(accountId, from, to, apiKeyId, page, options) {
        return (0, exports.AccountsApiFp)(this.configuration).getSignUsage(accountId, from, to, apiKeyId, page, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Retrieve the usage logs for a specific account
       * @param {number} accountId Account ID to retrieve usage logs for
       * @param {RetrieveAggregateUsagePeriodEnum} period The period for aggregate statistics to check
       * @param {number} value The value for the period (either hours or numbers)
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof AccountsApi
       */
      retrieveAggregateUsage(accountId, period, value, options) {
        return (0, exports.AccountsApiFp)(this.configuration).retrieveAggregateUsage(accountId, period, value, options).then((request) => request(this.axios, this.basePath));
      }
    };
    exports.AccountsApi = AccountsApi;
    exports.RetrieveAggregateUsagePeriodEnum = {
      Hour: "hour",
      Day: "day"
    };
    var AlertTargetsApiAxiosParamCreator = function(configuration) {
      return {
        /**
         * Create a target for an alert. This is the HTTP endpoint that will be called when an alert is triggered.
         * @param {number} accountId The ID of the account to create the alert target for
         * @param {number} alertId The ID of the alert to create the target for
         * @param {IAlertTargetConfigBase} iAlertTargetConfigBase Configuration for the alert target
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAlertTarget: async (accountId, alertId, iAlertTargetConfigBase, options = {}) => {
          (0, common_1.assertParamExists)("createAlertTarget", "accountId", accountId);
          (0, common_1.assertParamExists)("createAlertTarget", "alertId", alertId);
          (0, common_1.assertParamExists)("createAlertTarget", "iAlertTargetConfigBase", iAlertTargetConfigBase);
          const localVarPath = `/accounts/{account_id}/alerts/{alert_id}/targets/create`.replace(`{${"account_id"}}`, encodeURIComponent(String(accountId))).replace(`{${"alert_id"}}`, encodeURIComponent(String(alertId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarQueryParameter, "apiKey", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-jwt-key", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(iAlertTargetConfigBase, localVarRequestOptions, configuration);
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        /**
         * Delete an alert target from the Sign API
         * @param {number} accountId The ID of the account to delete the alert target from
         * @param {number} alertId The ID of the alert to delete the target from
         * @param {number} targetId The ID of the target to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlertTarget: async (accountId, alertId, targetId, options = {}) => {
          (0, common_1.assertParamExists)("deleteAlertTarget", "accountId", accountId);
          (0, common_1.assertParamExists)("deleteAlertTarget", "alertId", alertId);
          (0, common_1.assertParamExists)("deleteAlertTarget", "targetId", targetId);
          const localVarPath = `/accounts/{account_id}/alerts/{alert_id}/targets/{target_id}/delete`.replace(`{${"account_id"}}`, encodeURIComponent(String(accountId))).replace(`{${"alert_id"}}`, encodeURIComponent(String(alertId))).replace(`{${"target_id"}}`, encodeURIComponent(String(targetId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarQueryParameter, "apiKey", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-jwt-key", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        /**
         * List all alert targets for a specific alert
         * @param {number} accountId The account that the alert belongs to
         * @param {number} alertId The alert to list targets for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlertTargets: async (accountId, alertId, options = {}) => {
          (0, common_1.assertParamExists)("listAlertTargets", "accountId", accountId);
          (0, common_1.assertParamExists)("listAlertTargets", "alertId", alertId);
          const localVarPath = `/accounts/{account_id}/alerts/{alert_id}/targets/list`.replace(`{${"account_id"}}`, encodeURIComponent(String(accountId))).replace(`{${"alert_id"}}`, encodeURIComponent(String(alertId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarQueryParameter, "apiKey", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-jwt-key", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        /**
         * Test an alert target
         * @param {number} accountId The account that the alert belongs to
         * @param {number} alertId The alert that the target belongs to
         * @param {number} targetId The target to test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testAlertTarget: async (accountId, alertId, targetId, options = {}) => {
          (0, common_1.assertParamExists)("testAlertTarget", "accountId", accountId);
          (0, common_1.assertParamExists)("testAlertTarget", "alertId", alertId);
          (0, common_1.assertParamExists)("testAlertTarget", "targetId", targetId);
          const localVarPath = `/accounts/{account_id}/alerts/{alert_id}/targets/{target_id}/test`.replace(`{${"account_id"}}`, encodeURIComponent(String(accountId))).replace(`{${"alert_id"}}`, encodeURIComponent(String(alertId))).replace(`{${"target_id"}}`, encodeURIComponent(String(targetId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarQueryParameter, "apiKey", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-jwt-key", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        }
      };
    };
    exports.AlertTargetsApiAxiosParamCreator = AlertTargetsApiAxiosParamCreator;
    var AlertTargetsApiFp = function(configuration) {
      const localVarAxiosParamCreator = (0, exports.AlertTargetsApiAxiosParamCreator)(configuration);
      return {
        /**
         * Create a target for an alert. This is the HTTP endpoint that will be called when an alert is triggered.
         * @param {number} accountId The ID of the account to create the alert target for
         * @param {number} alertId The ID of the alert to create the target for
         * @param {IAlertTargetConfigBase} iAlertTargetConfigBase Configuration for the alert target
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAlertTarget(accountId, alertId, iAlertTargetConfigBase, options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.createAlertTarget(accountId, alertId, iAlertTargetConfigBase, options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["AlertTargetsApi.createAlertTarget"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an alert target from the Sign API
         * @param {number} accountId The ID of the account to delete the alert target from
         * @param {number} alertId The ID of the alert to delete the target from
         * @param {number} targetId The ID of the target to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAlertTarget(accountId, alertId, targetId, options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAlertTarget(accountId, alertId, targetId, options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["AlertTargetsApi.deleteAlertTarget"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all alert targets for a specific alert
         * @param {number} accountId The account that the alert belongs to
         * @param {number} alertId The alert to list targets for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAlertTargets(accountId, alertId, options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.listAlertTargets(accountId, alertId, options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["AlertTargetsApi.listAlertTargets"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Test an alert target
         * @param {number} accountId The account that the alert belongs to
         * @param {number} alertId The alert that the target belongs to
         * @param {number} targetId The target to test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testAlertTarget(accountId, alertId, targetId, options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.testAlertTarget(accountId, alertId, targetId, options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["AlertTargetsApi.testAlertTarget"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        }
      };
    };
    exports.AlertTargetsApiFp = AlertTargetsApiFp;
    var AlertTargetsApiFactory = function(configuration, basePath, axios) {
      const localVarFp = (0, exports.AlertTargetsApiFp)(configuration);
      return {
        /**
         * Create a target for an alert. This is the HTTP endpoint that will be called when an alert is triggered.
         * @param {number} accountId The ID of the account to create the alert target for
         * @param {number} alertId The ID of the alert to create the target for
         * @param {IAlertTargetConfigBase} iAlertTargetConfigBase Configuration for the alert target
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAlertTarget(accountId, alertId, iAlertTargetConfigBase, options) {
          return localVarFp.createAlertTarget(accountId, alertId, iAlertTargetConfigBase, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an alert target from the Sign API
         * @param {number} accountId The ID of the account to delete the alert target from
         * @param {number} alertId The ID of the alert to delete the target from
         * @param {number} targetId The ID of the target to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlertTarget(accountId, alertId, targetId, options) {
          return localVarFp.deleteAlertTarget(accountId, alertId, targetId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all alert targets for a specific alert
         * @param {number} accountId The account that the alert belongs to
         * @param {number} alertId The alert to list targets for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlertTargets(accountId, alertId, options) {
          return localVarFp.listAlertTargets(accountId, alertId, options).then((request) => request(axios, basePath));
        },
        /**
         * Test an alert target
         * @param {number} accountId The account that the alert belongs to
         * @param {number} alertId The alert that the target belongs to
         * @param {number} targetId The target to test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testAlertTarget(accountId, alertId, targetId, options) {
          return localVarFp.testAlertTarget(accountId, alertId, targetId, options).then((request) => request(axios, basePath));
        }
      };
    };
    exports.AlertTargetsApiFactory = AlertTargetsApiFactory;
    var AlertTargetsApi = class extends base_1.BaseAPI {
      /**
       * Create a target for an alert. This is the HTTP endpoint that will be called when an alert is triggered.
       * @param {number} accountId The ID of the account to create the alert target for
       * @param {number} alertId The ID of the alert to create the target for
       * @param {IAlertTargetConfigBase} iAlertTargetConfigBase Configuration for the alert target
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof AlertTargetsApi
       */
      createAlertTarget(accountId, alertId, iAlertTargetConfigBase, options) {
        return (0, exports.AlertTargetsApiFp)(this.configuration).createAlertTarget(accountId, alertId, iAlertTargetConfigBase, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Delete an alert target from the Sign API
       * @param {number} accountId The ID of the account to delete the alert target from
       * @param {number} alertId The ID of the alert to delete the target from
       * @param {number} targetId The ID of the target to delete
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof AlertTargetsApi
       */
      deleteAlertTarget(accountId, alertId, targetId, options) {
        return (0, exports.AlertTargetsApiFp)(this.configuration).deleteAlertTarget(accountId, alertId, targetId, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List all alert targets for a specific alert
       * @param {number} accountId The account that the alert belongs to
       * @param {number} alertId The alert to list targets for
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof AlertTargetsApi
       */
      listAlertTargets(accountId, alertId, options) {
        return (0, exports.AlertTargetsApiFp)(this.configuration).listAlertTargets(accountId, alertId, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Test an alert target
       * @param {number} accountId The account that the alert belongs to
       * @param {number} alertId The alert that the target belongs to
       * @param {number} targetId The target to test
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof AlertTargetsApi
       */
      testAlertTarget(accountId, alertId, targetId, options) {
        return (0, exports.AlertTargetsApiFp)(this.configuration).testAlertTarget(accountId, alertId, targetId, options).then((request) => request(this.axios, this.basePath));
      }
    };
    exports.AlertTargetsApi = AlertTargetsApi;
    var AlertsApiAxiosParamCreator = function(configuration) {
      return {
        /**
         * Create a creator alert. These alerts are used to notify users of a new livestream.
         * @param {number} accountId The ID of the account to create the alert for
         * @param {IAlertConfigBase} iAlertConfigBase Configuration for the alert
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAlert: async (accountId, iAlertConfigBase, options = {}) => {
          (0, common_1.assertParamExists)("createAlert", "accountId", accountId);
          (0, common_1.assertParamExists)("createAlert", "iAlertConfigBase", iAlertConfigBase);
          const localVarPath = `/accounts/{account_id}/alerts/create`.replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarQueryParameter, "apiKey", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-jwt-key", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(iAlertConfigBase, localVarRequestOptions, configuration);
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        /**
         * Delete an alert from the Sign API
         * @param {number} accountId The ID of the account to delete the alert from
         * @param {number} alertId The ID of the alert to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlert: async (accountId, alertId, options = {}) => {
          (0, common_1.assertParamExists)("deleteAlert", "accountId", accountId);
          (0, common_1.assertParamExists)("deleteAlert", "alertId", alertId);
          const localVarPath = `/accounts/{account_id}/alerts/{alert_id}/delete`.replace(`{${"account_id"}}`, encodeURIComponent(String(accountId))).replace(`{${"alert_id"}}`, encodeURIComponent(String(alertId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarQueryParameter, "apiKey", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-jwt-key", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        /**
         *
         * @param {number} accountId
         * @param {boolean} [includeRoomInfo]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlerts: async (accountId, includeRoomInfo, options = {}) => {
          (0, common_1.assertParamExists)("listAlerts", "accountId", accountId);
          const localVarPath = `/accounts/{account_id}/alerts/list`.replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarQueryParameter, "apiKey", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-jwt-key", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
          if (includeRoomInfo !== void 0) {
            localVarQueryParameter["include_room_info"] = includeRoomInfo;
          }
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        /**
         * Retrieve a specific alert by its ID
         * @param {number} accountId The account that the alert belongs to
         * @param {number} alertId The ID of the alert to retrieve
         * @param {boolean} [includeRoomInfo] Whether to include room information in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAlert: async (accountId, alertId, includeRoomInfo, options = {}) => {
          (0, common_1.assertParamExists)("retrieveAlert", "accountId", accountId);
          (0, common_1.assertParamExists)("retrieveAlert", "alertId", alertId);
          const localVarPath = `/accounts/{account_id}/alerts/{alert_id}/retrieve`.replace(`{${"account_id"}}`, encodeURIComponent(String(accountId))).replace(`{${"alert_id"}}`, encodeURIComponent(String(alertId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarQueryParameter, "apiKey", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-jwt-key", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
          if (includeRoomInfo !== void 0) {
            localVarQueryParameter["include_room_info"] = includeRoomInfo;
          }
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        }
      };
    };
    exports.AlertsApiAxiosParamCreator = AlertsApiAxiosParamCreator;
    var AlertsApiFp = function(configuration) {
      const localVarAxiosParamCreator = (0, exports.AlertsApiAxiosParamCreator)(configuration);
      return {
        /**
         * Create a creator alert. These alerts are used to notify users of a new livestream.
         * @param {number} accountId The ID of the account to create the alert for
         * @param {IAlertConfigBase} iAlertConfigBase Configuration for the alert
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAlert(accountId, iAlertConfigBase, options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.createAlert(accountId, iAlertConfigBase, options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["AlertsApi.createAlert"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an alert from the Sign API
         * @param {number} accountId The ID of the account to delete the alert from
         * @param {number} alertId The ID of the alert to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAlert(accountId, alertId, options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAlert(accountId, alertId, options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["AlertsApi.deleteAlert"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {number} accountId
         * @param {boolean} [includeRoomInfo]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAlerts(accountId, includeRoomInfo, options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.listAlerts(accountId, includeRoomInfo, options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["AlertsApi.listAlerts"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a specific alert by its ID
         * @param {number} accountId The account that the alert belongs to
         * @param {number} alertId The ID of the alert to retrieve
         * @param {boolean} [includeRoomInfo] Whether to include room information in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveAlert(accountId, alertId, includeRoomInfo, options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAlert(accountId, alertId, includeRoomInfo, options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["AlertsApi.retrieveAlert"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        }
      };
    };
    exports.AlertsApiFp = AlertsApiFp;
    var AlertsApiFactory = function(configuration, basePath, axios) {
      const localVarFp = (0, exports.AlertsApiFp)(configuration);
      return {
        /**
         * Create a creator alert. These alerts are used to notify users of a new livestream.
         * @param {number} accountId The ID of the account to create the alert for
         * @param {IAlertConfigBase} iAlertConfigBase Configuration for the alert
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAlert(accountId, iAlertConfigBase, options) {
          return localVarFp.createAlert(accountId, iAlertConfigBase, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an alert from the Sign API
         * @param {number} accountId The ID of the account to delete the alert from
         * @param {number} alertId The ID of the alert to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlert(accountId, alertId, options) {
          return localVarFp.deleteAlert(accountId, alertId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} accountId
         * @param {boolean} [includeRoomInfo]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlerts(accountId, includeRoomInfo, options) {
          return localVarFp.listAlerts(accountId, includeRoomInfo, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific alert by its ID
         * @param {number} accountId The account that the alert belongs to
         * @param {number} alertId The ID of the alert to retrieve
         * @param {boolean} [includeRoomInfo] Whether to include room information in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAlert(accountId, alertId, includeRoomInfo, options) {
          return localVarFp.retrieveAlert(accountId, alertId, includeRoomInfo, options).then((request) => request(axios, basePath));
        }
      };
    };
    exports.AlertsApiFactory = AlertsApiFactory;
    var AlertsApi = class extends base_1.BaseAPI {
      /**
       * Create a creator alert. These alerts are used to notify users of a new livestream.
       * @param {number} accountId The ID of the account to create the alert for
       * @param {IAlertConfigBase} iAlertConfigBase Configuration for the alert
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof AlertsApi
       */
      createAlert(accountId, iAlertConfigBase, options) {
        return (0, exports.AlertsApiFp)(this.configuration).createAlert(accountId, iAlertConfigBase, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Delete an alert from the Sign API
       * @param {number} accountId The ID of the account to delete the alert from
       * @param {number} alertId The ID of the alert to delete
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof AlertsApi
       */
      deleteAlert(accountId, alertId, options) {
        return (0, exports.AlertsApiFp)(this.configuration).deleteAlert(accountId, alertId, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @param {number} accountId
       * @param {boolean} [includeRoomInfo]
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof AlertsApi
       */
      listAlerts(accountId, includeRoomInfo, options) {
        return (0, exports.AlertsApiFp)(this.configuration).listAlerts(accountId, includeRoomInfo, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Retrieve a specific alert by its ID
       * @param {number} accountId The account that the alert belongs to
       * @param {number} alertId The ID of the alert to retrieve
       * @param {boolean} [includeRoomInfo] Whether to include room information in the response
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof AlertsApi
       */
      retrieveAlert(accountId, alertId, includeRoomInfo, options) {
        return (0, exports.AlertsApiFp)(this.configuration).retrieveAlert(accountId, alertId, includeRoomInfo, options).then((request) => request(this.axios, this.basePath));
      }
    };
    exports.AlertsApi = AlertsApi;
    var AnalyticsApiAxiosParamCreator = function(configuration) {
      return {
        /**
         * Retrieve the currently connected agents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAgents: async (options = {}) => {
          const localVarPath = `/analytics/agents`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        /**
         * Retrieve the list of API hosts (used for horizontal scaling)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHosts: async (options = {}) => {
          const localVarPath = `/analytics/hosts`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        /**
         * Retrieve stats as an SVG
         * @param {LogRequestMethod} statName Name of the stat to retrieve
         * @param {string} [labelColour] Specify label colour in SVG
         * @param {string} [valueColour] Specify value colour in SVG
         * @param {number} [hours] The number of hours to retrieve the stat for
         * @param {LiveClient} [client] The client to filter for
         * @param {boolean} [json] Add the ability to retrieve the pip as JSON
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pips: async (statName, labelColour, valueColour, hours, client, json, options = {}) => {
          (0, common_1.assertParamExists)("pips", "statName", statName);
          const localVarPath = `/analytics/pips/{statName}`.replace(`{${"statName"}}`, encodeURIComponent(String(statName)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          if (labelColour !== void 0) {
            localVarQueryParameter["labelColour"] = labelColour;
          }
          if (valueColour !== void 0) {
            localVarQueryParameter["valueColour"] = valueColour;
          }
          if (hours !== void 0) {
            localVarQueryParameter["hours"] = hours;
          }
          if (client !== void 0) {
            localVarQueryParameter["client"] = client;
          }
          if (json !== void 0) {
            localVarQueryParameter["json"] = json;
          }
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        }
      };
    };
    exports.AnalyticsApiAxiosParamCreator = AnalyticsApiAxiosParamCreator;
    var AnalyticsApiFp = function(configuration) {
      const localVarAxiosParamCreator = (0, exports.AnalyticsApiAxiosParamCreator)(configuration);
      return {
        /**
         * Retrieve the currently connected agents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchAgents(options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.fetchAgents(options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["AnalyticsApi.fetchAgents"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the list of API hosts (used for horizontal scaling)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHosts(options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getHosts(options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["AnalyticsApi.getHosts"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve stats as an SVG
         * @param {LogRequestMethod} statName Name of the stat to retrieve
         * @param {string} [labelColour] Specify label colour in SVG
         * @param {string} [valueColour] Specify value colour in SVG
         * @param {number} [hours] The number of hours to retrieve the stat for
         * @param {LiveClient} [client] The client to filter for
         * @param {boolean} [json] Add the ability to retrieve the pip as JSON
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pips(statName, labelColour, valueColour, hours, client, json, options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.pips(statName, labelColour, valueColour, hours, client, json, options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["AnalyticsApi.pips"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        }
      };
    };
    exports.AnalyticsApiFp = AnalyticsApiFp;
    var AnalyticsApiFactory = function(configuration, basePath, axios) {
      const localVarFp = (0, exports.AnalyticsApiFp)(configuration);
      return {
        /**
         * Retrieve the currently connected agents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAgents(options) {
          return localVarFp.fetchAgents(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the list of API hosts (used for horizontal scaling)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHosts(options) {
          return localVarFp.getHosts(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve stats as an SVG
         * @param {LogRequestMethod} statName Name of the stat to retrieve
         * @param {string} [labelColour] Specify label colour in SVG
         * @param {string} [valueColour] Specify value colour in SVG
         * @param {number} [hours] The number of hours to retrieve the stat for
         * @param {LiveClient} [client] The client to filter for
         * @param {boolean} [json] Add the ability to retrieve the pip as JSON
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pips(statName, labelColour, valueColour, hours, client, json, options) {
          return localVarFp.pips(statName, labelColour, valueColour, hours, client, json, options).then((request) => request(axios, basePath));
        }
      };
    };
    exports.AnalyticsApiFactory = AnalyticsApiFactory;
    var AnalyticsApi = class extends base_1.BaseAPI {
      /**
       * Retrieve the currently connected agents
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof AnalyticsApi
       */
      fetchAgents(options) {
        return (0, exports.AnalyticsApiFp)(this.configuration).fetchAgents(options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Retrieve the list of API hosts (used for horizontal scaling)
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof AnalyticsApi
       */
      getHosts(options) {
        return (0, exports.AnalyticsApiFp)(this.configuration).getHosts(options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Retrieve stats as an SVG
       * @param {LogRequestMethod} statName Name of the stat to retrieve
       * @param {string} [labelColour] Specify label colour in SVG
       * @param {string} [valueColour] Specify value colour in SVG
       * @param {number} [hours] The number of hours to retrieve the stat for
       * @param {LiveClient} [client] The client to filter for
       * @param {boolean} [json] Add the ability to retrieve the pip as JSON
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof AnalyticsApi
       */
      pips(statName, labelColour, valueColour, hours, client, json, options) {
        return (0, exports.AnalyticsApiFp)(this.configuration).pips(statName, labelColour, valueColour, hours, client, json, options).then((request) => request(this.axios, this.basePath));
      }
    };
    exports.AnalyticsApi = AnalyticsApi;
    var AuthenticationApiAxiosParamCreator = function(configuration) {
      return {
        /**
         * Create a JWT for a given API key. Note that these JWT keys are only valid for the non-authenticated Webcast endpoints. They function to attach the rate limits of the API key to the request for client-sided applications.
         * @param {number} accountId The ID of the account to create the JWT for
         * @param {JWTCreateConfig} jWTCreateConfig The configuration for the JWT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJWT: async (accountId, jWTCreateConfig, options = {}) => {
          (0, common_1.assertParamExists)("createJWT", "accountId", accountId);
          (0, common_1.assertParamExists)("createJWT", "jWTCreateConfig", jWTCreateConfig);
          const localVarPath = `/accounts/{account_id}/jwt/create`.replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarQueryParameter, "apiKey", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(jWTCreateConfig, localVarRequestOptions, configuration);
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        /**
         * Create a new API key
         * @param {number} accountId The ID of the account to create the key for
         * @param {IApiKeyConfigBase} iApiKeyConfigBase The configuration for the new key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKey: async (accountId, iApiKeyConfigBase, options = {}) => {
          (0, common_1.assertParamExists)("createKey", "accountId", accountId);
          (0, common_1.assertParamExists)("createKey", "iApiKeyConfigBase", iApiKeyConfigBase);
          const localVarPath = `/accounts/{account_id}/api_keys/create`.replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarQueryParameter, "apiKey", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(iApiKeyConfigBase, localVarRequestOptions, configuration);
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        /**
         * Delete an API key by its key value, name, or ID
         * @param {number} accountId The ID of the account to delete the key for
         * @param {DeleteKeyDeleteByEnum} deleteBy The API key field to delete by
         * @param {string} deleteParam The API key field value to delete by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteKey: async (accountId, deleteBy, deleteParam, options = {}) => {
          (0, common_1.assertParamExists)("deleteKey", "accountId", accountId);
          (0, common_1.assertParamExists)("deleteKey", "deleteBy", deleteBy);
          (0, common_1.assertParamExists)("deleteKey", "deleteParam", deleteParam);
          const localVarPath = `/accounts/{account_id}/api_keys/delete`.replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarQueryParameter, "apiKey", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
          if (deleteBy !== void 0) {
            localVarQueryParameter["delete_by"] = deleteBy;
          }
          if (deleteParam !== void 0) {
            localVarQueryParameter["delete_param"] = deleteParam;
          }
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        /**
         * Retrieve an API key by its key value, name, or ID
         * @param {number} accountId The ID of the account to retrieve the key for
         * @param {string} retrieveParam The API key field value to retrieve by
         * @param {GetKeyRetrieveByEnum} [retrieveBy] The API key field to retrieve by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKey: async (accountId, retrieveParam, retrieveBy, options = {}) => {
          (0, common_1.assertParamExists)("getKey", "accountId", accountId);
          (0, common_1.assertParamExists)("getKey", "retrieveParam", retrieveParam);
          const localVarPath = `/accounts/{account_id}/api_keys/retrieve`.replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarQueryParameter, "apiKey", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
          if (retrieveBy !== void 0) {
            localVarQueryParameter["retrieve_by"] = retrieveBy;
          }
          if (retrieveParam !== void 0) {
            localVarQueryParameter["retrieve_param"] = retrieveParam;
          }
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        /**
         * Retrieve an API key by its key value, name, or ID
         * @param {number} accountId The ID of the account to retrieve the key for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listKeys: async (accountId, options = {}) => {
          (0, common_1.assertParamExists)("listKeys", "accountId", accountId);
          const localVarPath = `/accounts/{account_id}/api_keys/list`.replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarQueryParameter, "apiKey", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        /**
         * Update an existing API key
         * @param {number} accountId The account to update the key for
         * @param {UpdateKeyUpdateByEnum} updateBy The API key field to update by
         * @param {string} updateParam The API key field value to update by
         * @param {IApiKeyConfigBase} iApiKeyConfigBase The new configuration for the key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateKey: async (accountId, updateBy, updateParam, iApiKeyConfigBase, options = {}) => {
          (0, common_1.assertParamExists)("updateKey", "accountId", accountId);
          (0, common_1.assertParamExists)("updateKey", "updateBy", updateBy);
          (0, common_1.assertParamExists)("updateKey", "updateParam", updateParam);
          (0, common_1.assertParamExists)("updateKey", "iApiKeyConfigBase", iApiKeyConfigBase);
          const localVarPath = `/accounts/{account_id}/api_keys/update`.replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarQueryParameter, "apiKey", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
          if (updateBy !== void 0) {
            localVarQueryParameter["update_by"] = updateBy;
          }
          if (updateParam !== void 0) {
            localVarQueryParameter["update_param"] = updateParam;
          }
          localVarHeaderParameter["Content-Type"] = "application/json";
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(iApiKeyConfigBase, localVarRequestOptions, configuration);
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        }
      };
    };
    exports.AuthenticationApiAxiosParamCreator = AuthenticationApiAxiosParamCreator;
    var AuthenticationApiFp = function(configuration) {
      const localVarAxiosParamCreator = (0, exports.AuthenticationApiAxiosParamCreator)(configuration);
      return {
        /**
         * Create a JWT for a given API key. Note that these JWT keys are only valid for the non-authenticated Webcast endpoints. They function to attach the rate limits of the API key to the request for client-sided applications.
         * @param {number} accountId The ID of the account to create the JWT for
         * @param {JWTCreateConfig} jWTCreateConfig The configuration for the JWT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createJWT(accountId, jWTCreateConfig, options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.createJWT(accountId, jWTCreateConfig, options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["AuthenticationApi.createJWT"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new API key
         * @param {number} accountId The ID of the account to create the key for
         * @param {IApiKeyConfigBase} iApiKeyConfigBase The configuration for the new key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createKey(accountId, iApiKeyConfigBase, options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.createKey(accountId, iApiKeyConfigBase, options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["AuthenticationApi.createKey"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an API key by its key value, name, or ID
         * @param {number} accountId The ID of the account to delete the key for
         * @param {DeleteKeyDeleteByEnum} deleteBy The API key field to delete by
         * @param {string} deleteParam The API key field value to delete by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteKey(accountId, deleteBy, deleteParam, options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.deleteKey(accountId, deleteBy, deleteParam, options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["AuthenticationApi.deleteKey"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve an API key by its key value, name, or ID
         * @param {number} accountId The ID of the account to retrieve the key for
         * @param {string} retrieveParam The API key field value to retrieve by
         * @param {GetKeyRetrieveByEnum} [retrieveBy] The API key field to retrieve by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKey(accountId, retrieveParam, retrieveBy, options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getKey(accountId, retrieveParam, retrieveBy, options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["AuthenticationApi.getKey"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve an API key by its key value, name, or ID
         * @param {number} accountId The ID of the account to retrieve the key for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listKeys(accountId, options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.listKeys(accountId, options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["AuthenticationApi.listKeys"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an existing API key
         * @param {number} accountId The account to update the key for
         * @param {UpdateKeyUpdateByEnum} updateBy The API key field to update by
         * @param {string} updateParam The API key field value to update by
         * @param {IApiKeyConfigBase} iApiKeyConfigBase The new configuration for the key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateKey(accountId, updateBy, updateParam, iApiKeyConfigBase, options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.updateKey(accountId, updateBy, updateParam, iApiKeyConfigBase, options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["AuthenticationApi.updateKey"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        }
      };
    };
    exports.AuthenticationApiFp = AuthenticationApiFp;
    var AuthenticationApiFactory = function(configuration, basePath, axios) {
      const localVarFp = (0, exports.AuthenticationApiFp)(configuration);
      return {
        /**
         * Create a JWT for a given API key. Note that these JWT keys are only valid for the non-authenticated Webcast endpoints. They function to attach the rate limits of the API key to the request for client-sided applications.
         * @param {number} accountId The ID of the account to create the JWT for
         * @param {JWTCreateConfig} jWTCreateConfig The configuration for the JWT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJWT(accountId, jWTCreateConfig, options) {
          return localVarFp.createJWT(accountId, jWTCreateConfig, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new API key
         * @param {number} accountId The ID of the account to create the key for
         * @param {IApiKeyConfigBase} iApiKeyConfigBase The configuration for the new key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKey(accountId, iApiKeyConfigBase, options) {
          return localVarFp.createKey(accountId, iApiKeyConfigBase, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an API key by its key value, name, or ID
         * @param {number} accountId The ID of the account to delete the key for
         * @param {DeleteKeyDeleteByEnum} deleteBy The API key field to delete by
         * @param {string} deleteParam The API key field value to delete by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteKey(accountId, deleteBy, deleteParam, options) {
          return localVarFp.deleteKey(accountId, deleteBy, deleteParam, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an API key by its key value, name, or ID
         * @param {number} accountId The ID of the account to retrieve the key for
         * @param {string} retrieveParam The API key field value to retrieve by
         * @param {GetKeyRetrieveByEnum} [retrieveBy] The API key field to retrieve by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKey(accountId, retrieveParam, retrieveBy, options) {
          return localVarFp.getKey(accountId, retrieveParam, retrieveBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an API key by its key value, name, or ID
         * @param {number} accountId The ID of the account to retrieve the key for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listKeys(accountId, options) {
          return localVarFp.listKeys(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing API key
         * @param {number} accountId The account to update the key for
         * @param {UpdateKeyUpdateByEnum} updateBy The API key field to update by
         * @param {string} updateParam The API key field value to update by
         * @param {IApiKeyConfigBase} iApiKeyConfigBase The new configuration for the key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateKey(accountId, updateBy, updateParam, iApiKeyConfigBase, options) {
          return localVarFp.updateKey(accountId, updateBy, updateParam, iApiKeyConfigBase, options).then((request) => request(axios, basePath));
        }
      };
    };
    exports.AuthenticationApiFactory = AuthenticationApiFactory;
    var AuthenticationApi = class extends base_1.BaseAPI {
      /**
       * Create a JWT for a given API key. Note that these JWT keys are only valid for the non-authenticated Webcast endpoints. They function to attach the rate limits of the API key to the request for client-sided applications.
       * @param {number} accountId The ID of the account to create the JWT for
       * @param {JWTCreateConfig} jWTCreateConfig The configuration for the JWT
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof AuthenticationApi
       */
      createJWT(accountId, jWTCreateConfig, options) {
        return (0, exports.AuthenticationApiFp)(this.configuration).createJWT(accountId, jWTCreateConfig, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Create a new API key
       * @param {number} accountId The ID of the account to create the key for
       * @param {IApiKeyConfigBase} iApiKeyConfigBase The configuration for the new key
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof AuthenticationApi
       */
      createKey(accountId, iApiKeyConfigBase, options) {
        return (0, exports.AuthenticationApiFp)(this.configuration).createKey(accountId, iApiKeyConfigBase, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Delete an API key by its key value, name, or ID
       * @param {number} accountId The ID of the account to delete the key for
       * @param {DeleteKeyDeleteByEnum} deleteBy The API key field to delete by
       * @param {string} deleteParam The API key field value to delete by
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof AuthenticationApi
       */
      deleteKey(accountId, deleteBy, deleteParam, options) {
        return (0, exports.AuthenticationApiFp)(this.configuration).deleteKey(accountId, deleteBy, deleteParam, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Retrieve an API key by its key value, name, or ID
       * @param {number} accountId The ID of the account to retrieve the key for
       * @param {string} retrieveParam The API key field value to retrieve by
       * @param {GetKeyRetrieveByEnum} [retrieveBy] The API key field to retrieve by
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof AuthenticationApi
       */
      getKey(accountId, retrieveParam, retrieveBy, options) {
        return (0, exports.AuthenticationApiFp)(this.configuration).getKey(accountId, retrieveParam, retrieveBy, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Retrieve an API key by its key value, name, or ID
       * @param {number} accountId The ID of the account to retrieve the key for
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof AuthenticationApi
       */
      listKeys(accountId, options) {
        return (0, exports.AuthenticationApiFp)(this.configuration).listKeys(accountId, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Update an existing API key
       * @param {number} accountId The account to update the key for
       * @param {UpdateKeyUpdateByEnum} updateBy The API key field to update by
       * @param {string} updateParam The API key field value to update by
       * @param {IApiKeyConfigBase} iApiKeyConfigBase The new configuration for the key
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof AuthenticationApi
       */
      updateKey(accountId, updateBy, updateParam, iApiKeyConfigBase, options) {
        return (0, exports.AuthenticationApiFp)(this.configuration).updateKey(accountId, updateBy, updateParam, iApiKeyConfigBase, options).then((request) => request(this.axios, this.basePath));
      }
    };
    exports.AuthenticationApi = AuthenticationApi;
    exports.DeleteKeyDeleteByEnum = {
      Value: "value",
      Name: "name",
      Id: "id"
    };
    exports.GetKeyRetrieveByEnum = {
      Value: "value",
      Name: "name",
      Id: "id"
    };
    exports.UpdateKeyUpdateByEnum = {
      Value: "value",
      Name: "name",
      Id: "id"
    };
    var WebcastApiAxiosParamCreator = function(configuration) {
      return {
        /**
         * Fetch the WebSocket URL & first payload for a TikTok LIVE Room given a Room Id.
         * @param {string} client The client ID
         * @param {string} [roomId] The room ID to fetch the webcast URL for
         * @param {string} [uniqueId] The unique ID of the TikTok user. Only available to Enterprise users.
         * @param {string} [cursor] The cursor to fetch the webcast URL for
         * @param {string} [sessionId] The session ID used to fetch a privileged WS connection
         * @param {string} [userAgent] Override the user agent used in the signature
         * @param {string} [ttTargetIdc] The target IDC to use for the request
         * @param {boolean} [clientEnter] Whether the client is entering the room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchWebcastURL: async (client, roomId, uniqueId, cursor, sessionId, userAgent, ttTargetIdc, clientEnter, options = {}) => {
          (0, common_1.assertParamExists)("fetchWebcastURL", "client", client);
          const localVarPath = `/webcast/fetch`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarQueryParameter, "apiKey", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-jwt-key", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
          if (client !== void 0) {
            localVarQueryParameter["client"] = client;
          }
          if (roomId !== void 0) {
            localVarQueryParameter["room_id"] = roomId;
          }
          if (uniqueId !== void 0) {
            localVarQueryParameter["unique_id"] = uniqueId;
          }
          if (cursor !== void 0) {
            localVarQueryParameter["cursor"] = cursor;
          }
          if (sessionId !== void 0) {
            localVarQueryParameter["session_id"] = sessionId;
          }
          if (userAgent !== void 0) {
            localVarQueryParameter["user_agent"] = userAgent;
          }
          if (ttTargetIdc !== void 0) {
            localVarQueryParameter["tt_target_idc"] = ttTargetIdc;
          }
          if (clientEnter !== void 0) {
            localVarQueryParameter["client_enter"] = clientEnter;
          }
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        /**
         * Retrieve the currently connected WebSocket clients for your account. Only for paid plans.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectedWebSockets: async (options = {}) => {
          const localVarPath = `/webcast/websockets`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarQueryParameter, "apiKey", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        /**
         * Retrieve the rate limits for the provided API key (or the unauthenticated limits if no key is provided)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRateLimits: async (options = {}) => {
          const localVarPath = `/webcast/rate_limits`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarQueryParameter, "apiKey", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        /**
         * Fetch TikTok LIVE Stream Cover URL given a uniqueId.
         * @param {string} uniqueId The unique ID of the TikTok to fetch the cover for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveRoomCover: async (uniqueId, options = {}) => {
          (0, common_1.assertParamExists)("retrieveRoomCover", "uniqueId", uniqueId);
          const localVarPath = `/webcast/room_cover`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarQueryParameter, "apiKey", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-jwt-key", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
          if (uniqueId !== void 0) {
            localVarQueryParameter["uniqueId"] = uniqueId;
          }
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        /**
         * Fetch Room Id for a given uniqueId & whether that user is live.
         * @param {string} uniqueId The unique ID of the TikTok user to fetch the data for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveRoomId: async (uniqueId, options = {}) => {
          (0, common_1.assertParamExists)("retrieveRoomId", "uniqueId", uniqueId);
          const localVarPath = `/webcast/room_id`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarQueryParameter, "apiKey", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-jwt-key", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
          if (uniqueId !== void 0) {
            localVarQueryParameter["uniqueId"] = uniqueId;
          }
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        /**
         * Retrieve TikTok Live Room Information
         * @param {string} uniqueId The unique identifier for the TikTok user or room
         * @param {boolean} [giftInfo] Optional flag to include gift information in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveRoomInfo: async (uniqueId, giftInfo, options = {}) => {
          (0, common_1.assertParamExists)("retrieveRoomInfo", "uniqueId", uniqueId);
          const localVarPath = `/webcast/room_info`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarQueryParameter, "apiKey", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
          if (uniqueId !== void 0) {
            localVarQueryParameter["uniqueId"] = uniqueId;
          }
          if (giftInfo !== void 0) {
            localVarQueryParameter["giftInfo"] = giftInfo;
          }
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        /**
         * Fetch TikTok LIVE Stream video given a uniqueId.
         * @param {string} uniqueId The unique ID of the TikTok to fetch the data for.
         * @param {StreamType} [streamType] The type of video stream to fetch. Default is HLS_SD.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveRoomVideo: async (uniqueId, streamType, options = {}) => {
          (0, common_1.assertParamExists)("retrieveRoomVideo", "uniqueId", uniqueId);
          const localVarPath = `/webcast/room_video`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarQueryParameter, "apiKey", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-jwt-key", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
          if (uniqueId !== void 0) {
            localVarQueryParameter["uniqueId"] = uniqueId;
          }
          if (streamType !== void 0) {
            localVarQueryParameter["streamType"] = streamType;
          }
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        /**
         * Send a chat to a TikTok LIVE room.
         * @param {IWebcastRoomChatPayload} iWebcastRoomChatPayload The payload configuration for sending a chat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendRoomChat: async (iWebcastRoomChatPayload, options = {}) => {
          (0, common_1.assertParamExists)("sendRoomChat", "iWebcastRoomChatPayload", iWebcastRoomChatPayload);
          const localVarPath = `/webcast/chat`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarQueryParameter, "apiKey", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(iWebcastRoomChatPayload, localVarRequestOptions, configuration);
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        /**
         *
         * @param {ISignTikTokUrlBody} iSignTikTokUrlBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signWebcastUrl: async (iSignTikTokUrlBody, options = {}) => {
          (0, common_1.assertParamExists)("signWebcastUrl", "iSignTikTokUrlBody", iSignTikTokUrlBody);
          const localVarPath = `/webcast/sign_url`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarQueryParameter, "apiKey", configuration);
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(iSignTikTokUrlBody, localVarRequestOptions, configuration);
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        }
      };
    };
    exports.WebcastApiAxiosParamCreator = WebcastApiAxiosParamCreator;
    var WebcastApiFp = function(configuration) {
      const localVarAxiosParamCreator = (0, exports.WebcastApiAxiosParamCreator)(configuration);
      return {
        /**
         * Fetch the WebSocket URL & first payload for a TikTok LIVE Room given a Room Id.
         * @param {string} client The client ID
         * @param {string} [roomId] The room ID to fetch the webcast URL for
         * @param {string} [uniqueId] The unique ID of the TikTok user. Only available to Enterprise users.
         * @param {string} [cursor] The cursor to fetch the webcast URL for
         * @param {string} [sessionId] The session ID used to fetch a privileged WS connection
         * @param {string} [userAgent] Override the user agent used in the signature
         * @param {string} [ttTargetIdc] The target IDC to use for the request
         * @param {boolean} [clientEnter] Whether the client is entering the room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchWebcastURL(client, roomId, uniqueId, cursor, sessionId, userAgent, ttTargetIdc, clientEnter, options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.fetchWebcastURL(client, roomId, uniqueId, cursor, sessionId, userAgent, ttTargetIdc, clientEnter, options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["WebcastApi.fetchWebcastURL"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the currently connected WebSocket clients for your account. Only for paid plans.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConnectedWebSockets(options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getConnectedWebSockets(options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["WebcastApi.getConnectedWebSockets"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the rate limits for the provided API key (or the unauthenticated limits if no key is provided)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRateLimits(options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getRateLimits(options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["WebcastApi.getRateLimits"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch TikTok LIVE Stream Cover URL given a uniqueId.
         * @param {string} uniqueId The unique ID of the TikTok to fetch the cover for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveRoomCover(uniqueId, options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveRoomCover(uniqueId, options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["WebcastApi.retrieveRoomCover"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch Room Id for a given uniqueId & whether that user is live.
         * @param {string} uniqueId The unique ID of the TikTok user to fetch the data for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveRoomId(uniqueId, options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveRoomId(uniqueId, options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["WebcastApi.retrieveRoomId"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve TikTok Live Room Information
         * @param {string} uniqueId The unique identifier for the TikTok user or room
         * @param {boolean} [giftInfo] Optional flag to include gift information in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveRoomInfo(uniqueId, giftInfo, options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveRoomInfo(uniqueId, giftInfo, options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["WebcastApi.retrieveRoomInfo"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch TikTok LIVE Stream video given a uniqueId.
         * @param {string} uniqueId The unique ID of the TikTok to fetch the data for.
         * @param {StreamType} [streamType] The type of video stream to fetch. Default is HLS_SD.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveRoomVideo(uniqueId, streamType, options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveRoomVideo(uniqueId, streamType, options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["WebcastApi.retrieveRoomVideo"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send a chat to a TikTok LIVE room.
         * @param {IWebcastRoomChatPayload} iWebcastRoomChatPayload The payload configuration for sending a chat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendRoomChat(iWebcastRoomChatPayload, options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.sendRoomChat(iWebcastRoomChatPayload, options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["WebcastApi.sendRoomChat"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {ISignTikTokUrlBody} iSignTikTokUrlBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signWebcastUrl(iSignTikTokUrlBody, options) {
          var _a, _b;
          const localVarAxiosArgs = await localVarAxiosParamCreator.signWebcastUrl(iSignTikTokUrlBody, options);
          const localVarOperationServerIndex = (configuration == null ? void 0 : configuration.serverIndex) ?? 0;
          const localVarOperationServerBasePath = (_b = (_a = base_1.operationServerMap["WebcastApi.signWebcastUrl"]) == null ? void 0 : _a[localVarOperationServerIndex]) == null ? void 0 : _b.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        }
      };
    };
    exports.WebcastApiFp = WebcastApiFp;
    var WebcastApiFactory = function(configuration, basePath, axios) {
      const localVarFp = (0, exports.WebcastApiFp)(configuration);
      return {
        /**
         * Fetch the WebSocket URL & first payload for a TikTok LIVE Room given a Room Id.
         * @param {string} client The client ID
         * @param {string} [roomId] The room ID to fetch the webcast URL for
         * @param {string} [uniqueId] The unique ID of the TikTok user. Only available to Enterprise users.
         * @param {string} [cursor] The cursor to fetch the webcast URL for
         * @param {string} [sessionId] The session ID used to fetch a privileged WS connection
         * @param {string} [userAgent] Override the user agent used in the signature
         * @param {string} [ttTargetIdc] The target IDC to use for the request
         * @param {boolean} [clientEnter] Whether the client is entering the room
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchWebcastURL(client, roomId, uniqueId, cursor, sessionId, userAgent, ttTargetIdc, clientEnter, options) {
          return localVarFp.fetchWebcastURL(client, roomId, uniqueId, cursor, sessionId, userAgent, ttTargetIdc, clientEnter, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the currently connected WebSocket clients for your account. Only for paid plans.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectedWebSockets(options) {
          return localVarFp.getConnectedWebSockets(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the rate limits for the provided API key (or the unauthenticated limits if no key is provided)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRateLimits(options) {
          return localVarFp.getRateLimits(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch TikTok LIVE Stream Cover URL given a uniqueId.
         * @param {string} uniqueId The unique ID of the TikTok to fetch the cover for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveRoomCover(uniqueId, options) {
          return localVarFp.retrieveRoomCover(uniqueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch Room Id for a given uniqueId & whether that user is live.
         * @param {string} uniqueId The unique ID of the TikTok user to fetch the data for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveRoomId(uniqueId, options) {
          return localVarFp.retrieveRoomId(uniqueId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve TikTok Live Room Information
         * @param {string} uniqueId The unique identifier for the TikTok user or room
         * @param {boolean} [giftInfo] Optional flag to include gift information in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveRoomInfo(uniqueId, giftInfo, options) {
          return localVarFp.retrieveRoomInfo(uniqueId, giftInfo, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch TikTok LIVE Stream video given a uniqueId.
         * @param {string} uniqueId The unique ID of the TikTok to fetch the data for.
         * @param {StreamType} [streamType] The type of video stream to fetch. Default is HLS_SD.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveRoomVideo(uniqueId, streamType, options) {
          return localVarFp.retrieveRoomVideo(uniqueId, streamType, options).then((request) => request(axios, basePath));
        },
        /**
         * Send a chat to a TikTok LIVE room.
         * @param {IWebcastRoomChatPayload} iWebcastRoomChatPayload The payload configuration for sending a chat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendRoomChat(iWebcastRoomChatPayload, options) {
          return localVarFp.sendRoomChat(iWebcastRoomChatPayload, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ISignTikTokUrlBody} iSignTikTokUrlBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signWebcastUrl(iSignTikTokUrlBody, options) {
          return localVarFp.signWebcastUrl(iSignTikTokUrlBody, options).then((request) => request(axios, basePath));
        }
      };
    };
    exports.WebcastApiFactory = WebcastApiFactory;
    var WebcastApi = class extends base_1.BaseAPI {
      /**
       * Fetch the WebSocket URL & first payload for a TikTok LIVE Room given a Room Id.
       * @param {string} client The client ID
       * @param {string} [roomId] The room ID to fetch the webcast URL for
       * @param {string} [uniqueId] The unique ID of the TikTok user. Only available to Enterprise users.
       * @param {string} [cursor] The cursor to fetch the webcast URL for
       * @param {string} [sessionId] The session ID used to fetch a privileged WS connection
       * @param {string} [userAgent] Override the user agent used in the signature
       * @param {string} [ttTargetIdc] The target IDC to use for the request
       * @param {boolean} [clientEnter] Whether the client is entering the room
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof WebcastApi
       */
      fetchWebcastURL(client, roomId, uniqueId, cursor, sessionId, userAgent, ttTargetIdc, clientEnter, options) {
        return (0, exports.WebcastApiFp)(this.configuration).fetchWebcastURL(client, roomId, uniqueId, cursor, sessionId, userAgent, ttTargetIdc, clientEnter, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Retrieve the currently connected WebSocket clients for your account. Only for paid plans.
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof WebcastApi
       */
      getConnectedWebSockets(options) {
        return (0, exports.WebcastApiFp)(this.configuration).getConnectedWebSockets(options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Retrieve the rate limits for the provided API key (or the unauthenticated limits if no key is provided)
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof WebcastApi
       */
      getRateLimits(options) {
        return (0, exports.WebcastApiFp)(this.configuration).getRateLimits(options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Fetch TikTok LIVE Stream Cover URL given a uniqueId.
       * @param {string} uniqueId The unique ID of the TikTok to fetch the cover for.
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof WebcastApi
       */
      retrieveRoomCover(uniqueId, options) {
        return (0, exports.WebcastApiFp)(this.configuration).retrieveRoomCover(uniqueId, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Fetch Room Id for a given uniqueId & whether that user is live.
       * @param {string} uniqueId The unique ID of the TikTok user to fetch the data for.
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof WebcastApi
       */
      retrieveRoomId(uniqueId, options) {
        return (0, exports.WebcastApiFp)(this.configuration).retrieveRoomId(uniqueId, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Retrieve TikTok Live Room Information
       * @param {string} uniqueId The unique identifier for the TikTok user or room
       * @param {boolean} [giftInfo] Optional flag to include gift information in the response
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof WebcastApi
       */
      retrieveRoomInfo(uniqueId, giftInfo, options) {
        return (0, exports.WebcastApiFp)(this.configuration).retrieveRoomInfo(uniqueId, giftInfo, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Fetch TikTok LIVE Stream video given a uniqueId.
       * @param {string} uniqueId The unique ID of the TikTok to fetch the data for.
       * @param {StreamType} [streamType] The type of video stream to fetch. Default is HLS_SD.
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof WebcastApi
       */
      retrieveRoomVideo(uniqueId, streamType, options) {
        return (0, exports.WebcastApiFp)(this.configuration).retrieveRoomVideo(uniqueId, streamType, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Send a chat to a TikTok LIVE room.
       * @param {IWebcastRoomChatPayload} iWebcastRoomChatPayload The payload configuration for sending a chat
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof WebcastApi
       */
      sendRoomChat(iWebcastRoomChatPayload, options) {
        return (0, exports.WebcastApiFp)(this.configuration).sendRoomChat(iWebcastRoomChatPayload, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @param {ISignTikTokUrlBody} iSignTikTokUrlBody
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof WebcastApi
       */
      signWebcastUrl(iSignTikTokUrlBody, options) {
        return (0, exports.WebcastApiFp)(this.configuration).signWebcastUrl(iSignTikTokUrlBody, options).then((request) => request(this.axios, this.basePath));
      }
    };
    exports.WebcastApi = WebcastApi;
  }
});

// node_modules/tiktok-live-connector/dist/lib/web/lib/http-client.js
var require_http_client = __commonJS({
  "node_modules/tiktok-live-connector/dist/lib/web/lib/http-client.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var axios_1 = __importDefault(require_axios());
    var utilities_1 = require_utilities();
    var cookie_jar_1 = __importDefault(require_cookie_jar());
    var config_1 = __importDefault(require_config());
    var api_1 = require_api();
    var lib_1 = require_lib3();
    var WebcastHttpClient = class {
      constructor(configuration = {
        customHeaders: {},
        axiosOptions: {},
        clientParams: {},
        authenticateWs: false,
        signApiKey: void 0
      }, webSigner = new lib_1.EulerSigner(configuration.signApiKey ? { apiKey: configuration.signApiKey } : {})) {
        __publicField(this, "configuration");
        __publicField(this, "webSigner");
        // HTTP Request Client
        __publicField(this, "axiosInstance");
        // External Cookie Jar
        __publicField(this, "cookieJar");
        // Internal Client Parameter Store
        __publicField(this, "clientParams");
        var _a;
        this.configuration = configuration;
        this.webSigner = webSigner;
        this.axiosInstance = axios_1.default.create({
          timeout: parseInt(process.env.TIKTOK_CLIENT_TIMEOUT || "10000"),
          headers: { ...config_1.default.DEFAULT_HTTP_CLIENT_HEADERS, ...this.configuration.customHeaders },
          ...this.configuration.axiosOptions
        });
        this.clientParams = {
          ...config_1.default.DEFAULT_HTTP_CLIENT_PARAMS,
          ...this.configuration.clientParams
        };
        this.cookieJar = new cookie_jar_1.default(this.axiosInstance);
        if (!!((_a = this.configuration.customHeaders) == null ? void 0 : _a.Cookie)) {
          const cookieHeader = this.configuration.customHeaders.Cookie;
          delete this.configuration.customHeaders["Cookie"];
          cookieHeader.split("; ").forEach((v) => this.cookieJar.processSetCookieHeader(v));
        }
      }
      /**
       * Set the Room ID for the client
       * @param roomId The client's Room ID
       */
      set roomId(roomId) {
        this.clientParams.room_id = roomId;
      }
      /**
       * Get the Room ID for the client
       */
      get roomId() {
        return this.clientParams.room_id || "";
      }
      /**
       * Build the URL for the request
       *
       * @param host The host for the request
       * @param path The path for the request
       * @param params The query parameters for the request
       * @param signRequest Whether to sign the request or not
       * @param method The HTTP method for the request
       * @param headers The headers for the request
       * @param extraOptions Additional axios request options
       * @protected
       */
      async request({ host, path, params, signRequest, method = "GET", headers, ...extraOptions }) {
        let secure = !(host.startsWith("127.0.0.1") || host.startsWith("localhost") || host.startsWith("::1"));
        let url = `http${secure ? "s" : ""}://${host}/${path}?${new URLSearchParams(params || {})}`;
        if (signRequest) {
          const signMethod = Object.values(api_1.ISignTikTokUrlBodyMethodEnum).includes(method.toUpperCase());
          if (!signMethod) {
            throw new Error(`Invalid method for signing: ${method}. Must be one of ${Object.values(api_1.ISignTikTokUrlBodyMethodEnum).join(", ")}`);
          }
          const signResponse = await this.webSigner.webcastSign(url, method.toUpperCase(), this.axiosInstance.defaults.headers["User-Agent"], this.cookieJar.sessionId, this.cookieJar.ttTargetIdc);
          url = signResponse.response.signedUrl;
          headers || (headers = {});
          headers["User-Agent"] = signResponse.response.userAgent;
        }
        return this.axiosInstance.request({
          url,
          headers: headers ?? void 0,
          method,
          ...extraOptions
        });
      }
      /**
       * Get HTML from TikTok website
       *
       * @param path Path to the HTML page
       * @param options Additional request options
       */
      async getHtmlFromTikTokWebsite(path, options = {}) {
        const fetchResponse = await this.request({
          host: config_1.default.TIKTOK_HOST_WEB,
          path,
          responseType: "text",
          signRequest: false,
          ...options
        });
        return fetchResponse.data;
      }
      /**
       * Get deserialized object from Webcast API
       *
       * @param path Path to the API endpoint
       * @param params Query parameters to be sent with the request
       * @param schemaName Schema name for deserialization
       * @param signRequest Whether to sign the request or not
       * @param options Additional request options
       */
      async getDeserializedObjectFromWebcastApi(path, params, schemaName, signRequest = false, options = {}) {
        const fetchResponse = await this.request({
          host: config_1.default.TIKTOK_HOST_WEBCAST,
          path: "webcast/" + path,
          params,
          signRequest,
          responseType: "arraybuffer",
          ...options
        });
        return (0, utilities_1.deserializeMessage)(schemaName, fetchResponse.data);
      }
      async postJsonObjectToWebcastApi(path, params, data, signRequest = false, options = {}) {
        options.headers || (options.headers = {});
        options.headers["Content-Type"] = "application/json; charset=UTF-8";
        const fetchResponse = await this.request({
          host: config_1.default.TIKTOK_HOST_WEBCAST,
          path: "webcast/" + path,
          data,
          params,
          responseType: "json",
          signRequest,
          method: "POST",
          ...options
        });
        return fetchResponse.data;
      }
      /**
       * Get JSON object from Webcast API
       *
       * @param path Path to the API endpoint
       * @param params Query parameters to be sent with the request
       * @param signRequest Whether to sign the request or not
       * @param options Additional request options
       */
      async getJsonObjectFromWebcastApi(path, params, signRequest = false, options = {}) {
        options.headers = {};
        const fetchResponse = await this.request({
          host: config_1.default.TIKTOK_HOST_WEBCAST,
          path: "webcast/" + path,
          params,
          responseType: "json",
          signRequest,
          headers: {
            ...options.headers
          },
          ...options
        });
        return fetchResponse.data;
      }
      /**
       * Get JSON object from TikTok API
       *
       * @param path Path to the API endpoint
       * @param params Query parameters to be sent with the request
       * @param signRequest Whether to sign the request or not
       * @param options Additional request options
       */
      async getJsonObjectFromTikTokApi(path, params, signRequest = false, options = {}) {
        const fetchResponse = await this.request({
          host: config_1.default.TIKTOK_HOST_WEB,
          path,
          params,
          responseType: "json",
          signRequest,
          ...options
        });
        return fetchResponse.data;
      }
    };
    exports.default = WebcastHttpClient;
  }
});

// node_modules/tiktok-live-connector/dist/lib/web/routes/fetch-room-info.js
var require_fetch_room_info = __commonJS({
  "node_modules/tiktok-live-connector/dist/lib/web/routes/fetch-room-info.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FetchRoomInfoRoute = void 0;
    var route_1 = require_route();
    var errors_1 = require_errors();
    var FetchRoomInfoRoute = class extends route_1.Route {
      async call(params) {
        const { roomId } = params || this.webClient;
        if (roomId == null) {
          throw new errors_1.MissingRoomIdError("Missing roomId. Please provide a roomId to the HTTP client.");
        }
        try {
          return await this.webClient.getJsonObjectFromWebcastApi("room/info/", { ...this.webClient.clientParams, roomId }, false);
        } catch (err) {
          throw new errors_1.InvalidResponseError(`Failed to fetch room info. ${err.message}`, err);
        }
      }
    };
    exports.FetchRoomInfoRoute = FetchRoomInfoRoute;
  }
});

// node_modules/tiktok-live-connector/dist/lib/web/routes/fetch-room-id-euler.js
var require_fetch_room_id_euler = __commonJS({
  "node_modules/tiktok-live-connector/dist/lib/web/routes/fetch-room-id-euler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FetchRoomIdFromEulerRoute = void 0;
    var route_1 = require_route();
    var FetchRoomIdFromEulerRoute = class extends route_1.Route {
      async call({ uniqueId, options }) {
        const fetchResponse = await this.webClient.webSigner.webcast.retrieveRoomId(uniqueId, options);
        return fetchResponse.data;
      }
    };
    exports.FetchRoomIdFromEulerRoute = FetchRoomIdFromEulerRoute;
  }
});

// node_modules/tiktok-live-connector/dist/lib/web/routes/fetch-room-info-api-live.js
var require_fetch_room_info_api_live = __commonJS({
  "node_modules/tiktok-live-connector/dist/lib/web/routes/fetch-room-info-api-live.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FetchRoomInfoFromApiLiveRoute = void 0;
    var route_1 = require_route();
    var errors_1 = require_errors();
    var FetchRoomInfoFromApiLiveRoute = class extends route_1.Route {
      async call({ uniqueId }) {
        var _a, _b;
        const roomData = await this.webClient.getJsonObjectFromTikTokApi("api-live/user/room/", {
          ...this.webClient.clientParams,
          uniqueId,
          sourceType: "54"
        });
        if (roomData.statusCode) {
          throw new errors_1.InvalidResponseError(`API Error ${roomData.statusCode} (${roomData.message || "Unknown Error"})`, void 0);
        }
        if (!((_b = (_a = roomData == null ? void 0 : roomData.data) == null ? void 0 : _a.user) == null ? void 0 : _b.roomId)) {
          throw new errors_1.InvalidResponseError(`Invalid response from API: ${JSON.stringify(roomData)}`, void 0);
        }
        return roomData;
      }
    };
    exports.FetchRoomInfoFromApiLiveRoute = FetchRoomInfoFromApiLiveRoute;
  }
});

// node_modules/tiktok-live-connector/dist/lib/web/routes/fetch-room-info-euler.js
var require_fetch_room_info_euler = __commonJS({
  "node_modules/tiktok-live-connector/dist/lib/web/routes/fetch-room-info-euler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FetchRoomInfoFromEulerRoute = void 0;
    var route_1 = require_route();
    var FetchRoomInfoFromEulerRoute = class extends route_1.Route {
      async call({ uniqueId, options }) {
        const fetchResponse = await this.webClient.webSigner.webcast.retrieveRoomInfo(uniqueId, options);
        return fetchResponse.data;
      }
    };
    exports.FetchRoomInfoFromEulerRoute = FetchRoomInfoFromEulerRoute;
  }
});

// node_modules/tiktok-live-connector/dist/lib/web/routes/fetch-room-info-html.js
var require_fetch_room_info_html = __commonJS({
  "node_modules/tiktok-live-connector/dist/lib/web/routes/fetch-room-info-html.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FetchRoomInfoFromHtmlRoute = void 0;
    var route_1 = require_route();
    var SIGI_PATTERN = /<script id="SIGI_STATE" type="application\/json">(.*?)<\/script>/;
    var FetchRoomInfoFromHtmlRoute = class extends route_1.Route {
      async call({ uniqueId }) {
        const html = await this.webClient.getHtmlFromTikTokWebsite(`@${uniqueId}/live`);
        const match = html.match(SIGI_PATTERN);
        if (!match || match.length < 2) {
          throw new Error("Failed to extract the SIGI_STATE HTML tag, you might be blocked by TikTok.");
        }
        let sigiState;
        try {
          sigiState = JSON.parse(match[1]);
        } catch (e) {
          throw new Error("Failed to parse SIGI_STATE into JSON. Are you captcha-blocked by TikTok?");
        }
        const liveRoom = sigiState == null ? void 0 : sigiState.LiveRoom;
        if (!liveRoom) {
          throw new Error("Failed to extract the LiveRoom object from SIGI_STATE.");
        }
        return liveRoom;
      }
    };
    exports.FetchRoomInfoFromHtmlRoute = FetchRoomInfoFromHtmlRoute;
  }
});

// node_modules/tiktok-live-connector/dist/lib/web/routes/fetch-signed-websocket-euler.js
var require_fetch_signed_websocket_euler = __commonJS({
  "node_modules/tiktok-live-connector/dist/lib/web/routes/fetch-signed-websocket-euler.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FetchSignedWebSocketFromEulerRoute = void 0;
    var route_1 = require_route();
    var errors_1 = require_errors();
    var config_1 = __importDefault(require_config());
    var lib_1 = require_lib3();
    var FetchSignedWebSocketFromEulerRoute = class extends route_1.Route {
      async call({ roomId, uniqueId, sessionId, ttTargetIdc }) {
        var _a;
        if (!roomId && !uniqueId) {
          throw new errors_1.FetchSignedWebSocketIdentityParameterError("Either roomId or uniqueId must be provided.");
        }
        if (roomId && uniqueId) {
          throw new errors_1.FetchSignedWebSocketIdentityParameterError("Both roomId and uniqueId cannot be provided at the same time.");
        }
        const resolvedSessionId = sessionId || this.webClient.cookieJar.sessionId;
        const resolvedTtTargetIdc = ttTargetIdc || this.webClient.cookieJar.ttTargetIdc;
        if (resolvedSessionId && !resolvedTtTargetIdc) {
          throw new errors_1.FetchSignedWebSocketIdentityParameterError("ttTargetIdc must be set when sessionId is provided.");
        }
        if (this.webClient.configuration.authenticateWs && resolvedSessionId) {
          const envHost = process.env.WHITELIST_AUTHENTICATED_SESSION_ID_HOST;
          const expectedHost = new URL(this.webClient.webSigner.configuration.basePath).host;
          if (!envHost) {
            throw new errors_1.AuthenticatedWebSocketConnectionError(`authenticate_websocket is true, but no whitelist host defined. Set the env var WHITELIST_AUTHENTICATED_SESSION_ID_HOST to proceed.`);
          }
          if (envHost !== expectedHost) {
            throw new errors_1.AuthenticatedWebSocketConnectionError(`The env var WHITELIST_AUTHENTICATED_SESSION_ID_HOST "${envHost}" does not match sign server host "${expectedHost}".`);
          }
        }
        let response;
        try {
          response = await this.webClient.webSigner.webcast.fetchWebcastURL(
            "ttlive-node",
            roomId,
            uniqueId,
            ((_a = this.webClient.clientParams) == null ? void 0 : _a.cursor) ?? void 0,
            resolvedSessionId,
            config_1.default.DEFAULT_HTTP_CLIENT_HEADERS["User-Agent"],
            resolvedTtTargetIdc,
            // With the latest version, we now send the im_enter_room payload, so clientEnter should be true
            false,
            {
              // NOTE: NEVER REMOVE THIS BECAUSE FUCKING AXIOS WILL END UP TRYING TO INTERPRET THE RESPONSE
              // AS UTF-8 DATA AND YOU WILL FUCKING HATE YOUR LIFE
              responseType: "arraybuffer"
            }
          );
        } catch (err) {
          throw new errors_1.SignAPIError(errors_1.ErrorReason.CONNECT_ERROR, void 0, void 0, "Failed to connect to sign server.", null, err);
        }
        if (response.status === 429) {
          const data = JSON.parse(Buffer.from(response.data).toString("utf-8"));
          const message = process.env.SIGN_SERVER_MESSAGE_DISABLED ? null : data == null ? void 0 : data.message;
          const label = (data == null ? void 0 : data.limit_label) ? `(${data.limit_label}) ` : "";
          throw new errors_1.SignatureRateLimitError(message, `${label}Too many connections started, try again later.`, response);
        }
        if (response.status === 402) {
          const data = JSON.parse(Buffer.from(response.data).toString("utf-8"));
          const message = process.env.SIGN_SERVER_MESSAGE_DISABLED ? null : data == null ? void 0 : data.message;
          throw new errors_1.PremiumFeatureError(message, "Error fetching the signed TikTok WebSocket");
        }
        const logId = response.headers["X-Log-Id"] && parseInt(response.headers["X-Log-Id"]);
        const agentId = response.headers["X-Agent-ID"];
        if (response.status !== 200) {
          let payload;
          try {
            payload = Buffer.from(response.data).toString("utf-8");
          } catch {
            payload = `"${response.statusText}"`;
          }
          throw new errors_1.SignAPIError(errors_1.ErrorReason.SIGN_NOT_200, logId, agentId, `Unexpected sign server status ${response.status}. Payload:
${payload}`);
        }
        if (!response.headers["x-set-tt-cookie"]) {
          throw new errors_1.SignAPIError(errors_1.ErrorReason.EMPTY_COOKIES, logId, agentId, "No cookies received from sign server.");
        }
        this.webClient.cookieJar.processSetCookieHeader(response.headers["x-set-tt-cookie"] || "");
        this.webClient.roomId = response.headers["x-room-id"] || this.webClient.roomId;
        return (0, lib_1.deserializeMessage)("ProtoMessageFetchResult", Buffer.from(response.data));
      }
    };
    exports.FetchSignedWebSocketFromEulerRoute = FetchSignedWebSocketFromEulerRoute;
  }
});

// node_modules/tiktok-live-connector/dist/lib/web/routes/send-room-chat-euler.js
var require_send_room_chat_euler = __commonJS({
  "node_modules/tiktok-live-connector/dist/lib/web/routes/send-room-chat-euler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SendRoomChatFromEulerRoute = void 0;
    var route_1 = require_route();
    var types_1 = require_types();
    var SendRoomChatFromEulerRoute = class extends route_1.Route {
      async call({ roomId, content, sessionId, ttTargetIdc, options }) {
        var _a;
        const resolvedSessionId = sessionId || this.webClient.cookieJar.sessionId;
        const resolvedTtTargetIdc = ttTargetIdc || this.webClient.cookieJar.ttTargetIdc;
        if (resolvedSessionId && !resolvedTtTargetIdc) {
          throw new types_1.FetchSignedWebSocketIdentityParameterError("ttTargetIdc must be set when sessionId is provided.");
        }
        const fetchResponse = await this.webClient.webSigner.webcast.sendRoomChat({
          roomId,
          content,
          sessionId: resolvedSessionId,
          ttTargetIdc: resolvedTtTargetIdc
        }, options);
        switch (fetchResponse.status) {
          case 401:
          case 403:
            throw new types_1.PremiumFeatureError("Sending chats requires an API key & a paid plan, as it uses cloud managed services.", fetchResponse.data.message, JSON.stringify(fetchResponse.data));
          case 200:
            return fetchResponse.data;
          default:
            throw new Error(`Failed to send chat: ${((_a = fetchResponse == null ? void 0 : fetchResponse.data) == null ? void 0 : _a.message) || "Unknown error"}`);
        }
      }
    };
    exports.SendRoomChatFromEulerRoute = SendRoomChatFromEulerRoute;
  }
});

// node_modules/tiktok-live-connector/dist/lib/web/routes/index.js
var require_routes = __commonJS({
  "node_modules/tiktok-live-connector/dist/lib/web/routes/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_fetch_room_info(), exports);
    __exportStar(require_fetch_room_id_euler(), exports);
    __exportStar(require_fetch_room_info_api_live(), exports);
    __exportStar(require_fetch_room_info_euler(), exports);
    __exportStar(require_fetch_room_info_html(), exports);
    __exportStar(require_fetch_signed_websocket_euler(), exports);
    __exportStar(require_send_room_chat_euler(), exports);
  }
});

// node_modules/@eulerstream/euler-api-sdk/dist/sdk/configuration.js
var require_configuration = __commonJS({
  "node_modules/@eulerstream/euler-api-sdk/dist/sdk/configuration.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Configuration = void 0;
    var Configuration = class {
      constructor(param = {}) {
        /**
         * parameter for apiKey security
         * @param name security name
         * @memberof Configuration
         */
        __publicField(this, "apiKey");
        /**
         * parameter for basic security
         *
         * @type {string}
         * @memberof Configuration
         */
        __publicField(this, "username");
        /**
         * parameter for basic security
         *
         * @type {string}
         * @memberof Configuration
         */
        __publicField(this, "password");
        /**
         * parameter for oauth2 security
         * @param name security name
         * @param scopes oauth2 scope
         * @memberof Configuration
         */
        __publicField(this, "accessToken");
        /**
         * override base path
         *
         * @type {string}
         * @memberof Configuration
         */
        __publicField(this, "basePath");
        /**
         * override server index
         *
         * @type {number}
         * @memberof Configuration
         */
        __publicField(this, "serverIndex");
        /**
         * base options for axios calls
         *
         * @type {any}
         * @memberof Configuration
         */
        __publicField(this, "baseOptions");
        /**
         * The FormData constructor that will be used to create multipart form data
         * requests. You can inject this here so that execution environments that
         * do not support the FormData class can still run the generated client.
         *
         * @type {new () => FormData}
         */
        __publicField(this, "formDataCtor");
        var _a;
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.baseOptions = {
          ...param.baseOptions,
          headers: {
            ...(_a = param.baseOptions) == null ? void 0 : _a.headers
          }
        };
        this.formDataCtor = param.formDataCtor;
      }
      /**
       * Check if the given MIME is a JSON MIME.
       * JSON MIME examples:
       *   application/json
       *   application/json; charset=UTF8
       *   APPLICATION/JSON
       *   application/vnd.company+json
       * @param mime - MIME (Multipurpose Internet Mail Extensions)
       * @return True if the given MIME is JSON, false otherwise.
       */
      isJsonMime(mime) {
        const jsonMime = new RegExp("^(application/json|[^;/ 	]+/[^;/ 	]+[+]json)[ 	]*(;.*)?$", "i");
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === "application/json-patch+json");
      }
    };
    exports.Configuration = Configuration;
  }
});

// node_modules/@eulerstream/euler-api-sdk/dist/sdk/index.js
var require_sdk = __commonJS({
  "node_modules/@eulerstream/euler-api-sdk/dist/sdk/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_api(), exports);
    __exportStar(require_configuration(), exports);
  }
});

// node_modules/@eulerstream/euler-api-sdk/dist/utils.js
var require_utils = __commonJS({
  "node_modules/@eulerstream/euler-api-sdk/dist/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.buildConfig = void 0;
    function buildConfig(baseConfig) {
      var _a;
      const config = {
        ...{
          basePath: "https://tiktok.eulerstream.com",
          baseOptions: { validateStatus: () => true },
          isJsonMime: (mime) => mime.toLowerCase().includes("application/json")
        },
        ...baseConfig
      };
      if (!config.apiKey) {
        return config;
      }
      const apiKey = config.apiKey;
      delete config.apiKey;
      (_a = config.baseOptions).headers || (_a.headers = {});
      config.baseOptions.headers["X-Api-Key"] = apiKey;
      return config;
    }
    exports.buildConfig = buildConfig;
  }
});

// node_modules/@eulerstream/euler-api-sdk/dist/index.js
var require_dist = __commonJS({
  "node_modules/@eulerstream/euler-api-sdk/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var sdk_1 = require_sdk();
    var utils_1 = require_utils();
    __exportStar(require_sdk(), exports);
    __exportStar(require_utils(), exports);
    var EulerStreamApiClient = class {
      /**
       * EulerStream API Client
       *
       * Configuration
       *
       *
       * API Instances
       *
       * @param config The configuration for the API client
       */
      constructor(config = {}) {
        __publicField(this, "webcast");
        __publicField(this, "accounts");
        __publicField(this, "authentication");
        __publicField(this, "analytics");
        __publicField(this, "alerts");
        __publicField(this, "alertTargets");
        __publicField(this, "configuration");
        this.configuration = (0, utils_1.buildConfig)(config);
        this.webcast = new sdk_1.WebcastApi(this.configuration);
        this.accounts = new sdk_1.AccountsApi(this.configuration);
        this.authentication = new sdk_1.AuthenticationApi(this.configuration);
        this.analytics = new sdk_1.AnalyticsApi(this.configuration);
        this.alerts = new sdk_1.AlertsApi(this.configuration);
        this.alertTargets = new sdk_1.AlertsApi(this.configuration);
      }
    };
    exports.default = EulerStreamApiClient;
  }
});

// node_modules/tiktok-live-connector/dist/lib/web/lib/tiktok-signer.js
var require_tiktok_signer = __commonJS({
  "node_modules/tiktok-live-connector/dist/lib/web/lib/tiktok-signer.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EulerSigner = void 0;
    var errors_1 = require_errors();
    var euler_api_sdk_1 = __importDefault(require_dist());
    var lib_1 = require_lib3();
    var EulerSigner = class extends euler_api_sdk_1.default {
      constructor(config = {}) {
        super({ ...lib_1.SignConfig, ...config });
      }
      /**
       * Sign a URL using the TikTok signature provider
       *
       * @param url The URL to sign
       * @param method The HTTP method to use (GET, POST, etc.)
       * @param userAgent The user agent to sign with
       * @param sessionId The session ID to use (optional)
       * @param ttTargetIdc The target IDC to use (optional)
       */
      async webcastSign(url, method, userAgent, sessionId, ttTargetIdc) {
        var _a;
        const mustRemoveParams = ["X-Bogus", "X-Gnarly", "msToken"];
        let cleanUrl = typeof url === "string" ? url : url.toString();
        for (const param of mustRemoveParams) {
          cleanUrl = cleanUrl.replace(new RegExp(`([&?])${param}=[^&]*`, "g"), "$1");
          cleanUrl = cleanUrl.replace(/[&?]$/, "");
        }
        if (sessionId && !ttTargetIdc) {
          throw new Error("ttTargetIdc must be set when sessionId is provided.");
        }
        const response = await this.webcast.signWebcastUrl({
          url: cleanUrl,
          method,
          userAgent,
          sessionId,
          ttTargetIdc
        });
        if (response.status === 403) {
          throw new errors_1.PremiumFeatureError("You do not have permission from the signature provider to sign this URL.", response.data.message, JSON.stringify(response.data));
        }
        if (!response.data || Object.keys(response.data.response.tokens || {}).length < 1) {
          throw new errors_1.SignatureMissingTokensError("Failed to sign a request due to missing tokens in response!");
        }
        if (response.status !== 200) {
          throw new errors_1.SignatureMissingTokensError(`Failed to sign a request: ${((_a = response == null ? void 0 : response.data) == null ? void 0 : _a.message) || "Unknown error"}`);
        }
        return response.data;
      }
    };
    exports.EulerSigner = EulerSigner;
  }
});

// node_modules/tiktok-live-connector/dist/lib/web/lib/index.js
var require_lib = __commonJS({
  "node_modules/tiktok-live-connector/dist/lib/web/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_cookie_jar(), exports);
    __exportStar(require_http_client(), exports);
    __exportStar(require_tiktok_signer(), exports);
  }
});

// node_modules/tiktok-live-connector/dist/lib/web/index.js
var require_web = __commonJS({
  "node_modules/tiktok-live-connector/dist/lib/web/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TikTokWebClient = void 0;
    var http_client_1 = __importDefault(require_http_client());
    var routes_1 = require_routes();
    var fetch_room_info_html_1 = require_fetch_room_info_html();
    var fetch_signed_websocket_euler_1 = require_fetch_signed_websocket_euler();
    var fetch_room_id_euler_1 = require_fetch_room_id_euler();
    var fetch_room_info_euler_1 = require_fetch_room_info_euler();
    var fetch_room_info_api_live_1 = require_fetch_room_info_api_live();
    __exportStar(require_routes(), exports);
    __exportStar(require_lib(), exports);
    var TikTokWebClient = class extends http_client_1.default {
      constructor(...params) {
        super(...params);
        // TikTok-based routes
        __publicField(this, "fetchRoomInfo");
        __publicField(this, "fetchRoomInfoFromApiLive");
        __publicField(this, "fetchRoomInfoFromHtml");
        // Euler-based routes
        __publicField(this, "fetchSignedWebSocketFromEuler");
        __publicField(this, "fetchRoomIdFromEuler");
        __publicField(this, "fetchRoomInfoFromEuler");
        __publicField(this, "sendRoomChatFromEuler");
        this.fetchRoomInfo = new routes_1.FetchRoomInfoRoute(this);
        this.fetchRoomInfoFromHtml = new fetch_room_info_html_1.FetchRoomInfoFromHtmlRoute(this);
        this.fetchRoomInfoFromApiLive = new fetch_room_info_api_live_1.FetchRoomInfoFromApiLiveRoute(this);
        this.fetchSignedWebSocketFromEuler = new fetch_signed_websocket_euler_1.FetchSignedWebSocketFromEulerRoute(this);
        this.fetchRoomIdFromEuler = new fetch_room_id_euler_1.FetchRoomIdFromEulerRoute(this);
        this.fetchRoomInfoFromEuler = new fetch_room_info_euler_1.FetchRoomInfoFromEulerRoute(this);
        this.sendRoomChatFromEuler = new routes_1.SendRoomChatFromEulerRoute(this);
      }
    };
    exports.TikTokWebClient = TikTokWebClient;
  }
});

// node_modules/tiktok-live-connector/dist/lib/client.js
var require_client2 = __commonJS({
  "node_modules/tiktok-live-connector/dist/lib/client.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TikTokLiveConnection = void 0;
    var errors_1 = require_errors();
    var node_events_1 = require_node_events();
    var ws_client_1 = __importDefault(require_ws_client());
    var config_1 = __importDefault(require_config());
    var utilities_1 = require_utilities();
    var web_1 = require_web();
    var events_1 = require_events();
    var types_1 = require_types();
    var TikTokLiveConnection = class extends node_events_1.EventEmitter {
      /**
       * Create a new TikTokLiveConnection instance
       * @param {string} uniqueId TikTok username (from URL)
       * @param {object} [options] Connection options
       * @param {boolean} [options[].authenticateWs=false] Authenticate the WebSocket connection using the session ID from the "sessionid" cookie
       * @param {boolean} [options[].processInitialData=true] Process the initital data which includes messages of the last minutes
       * @param {boolean} [options[].fetchRoomInfoOnConnect=false] Fetch the room info (room status, streamer info, etc.) on connect (will be returned when calling connect())
       * @param {boolean} [options[].enableExtendedGiftInfo=false] Enable this option to get extended information on 'gift' events like gift name and cost
       * @param {boolean} [options[].enableRequestPolling=true] Use request polling if no WebSocket upgrade is offered. If `false` an exception will be thrown if TikTok does not offer a WebSocket upgrade.
       * @param {number} [options[].requestPollingIntervalMs=1000] Request polling interval if WebSocket is not used
       * @param {string} [options[].sessionId=null] The session ID from the "sessionid" cookie is required if you want to send automated messages in the chat.
       * @param {object} [options[].webClientParams={}] Custom client params for Webcast API
       * @param {object} [options[].webClientHeaders={}] Custom request headers for axios
       * @param {object} [options[].websocketHeaders={}] Custom request headers for websocket.client
       * @param {object} [options[].webClientOptions={}] Custom request options for axios. Here you can specify an `httpsAgent` to use a proxy and a `timeout` value for example.
       * @param {object} [options[].websocketOptions={}] Custom request options for websocket.client. Here you can specify an `agent` to use a proxy and a `timeout` value for example.
       * @param {boolean} [options[].connectWithUniqueId=false] Connect to the live stream using the unique ID instead of the room ID. If `true`, the room ID will be fetched from the TikTok API.
       * @param {boolean} [options[].logFetchFallbackErrors=false] Log errors when falling back to the API or Euler source
       * @param {function} [options[].signedWebSocketProvider] Custom function to fetch the signed WebSocket URL. If not specified, the default function will be used.
       * @param {EulerSigner} [signer] TikTok Signer instance. If not provided, a new instance will be created using the provided options
       */
      constructor(uniqueId, options, signer) {
        var _a, _b, _c, _d, _e;
        super();
        __publicField(this, "uniqueId");
        __publicField(this, "signer");
        // Public properties
        __publicField(this, "webClient");
        __publicField(this, "wsClient", null);
        // Protected properties
        __publicField(this, "_roomInfo", null);
        __publicField(this, "_availableGifts", null);
        __publicField(this, "_connectState", events_1.ConnectState.DISCONNECTED);
        __publicField(this, "options");
        this.uniqueId = uniqueId;
        this.signer = signer;
        this.uniqueId = (0, utilities_1.validateAndNormalizeUniqueId)(uniqueId);
        this.options = {
          connectWithUniqueId: false,
          processInitialData: true,
          fetchRoomInfoOnConnect: true,
          enableExtendedGiftInfo: false,
          enableRequestPolling: true,
          requestPollingIntervalMs: 1e3,
          sessionId: null,
          ttTargetIdc: null,
          signApiKey: null,
          disableEulerFallbacks: false,
          // Override Http client params
          webClientParams: {},
          webClientHeaders: {},
          webClientOptions: {},
          // Override WebSocket params
          wsClientHeaders: {},
          wsClientOptions: {},
          wsClientParams: {},
          authenticateWs: false,
          signedWebSocketProvider: void 0,
          ...options
        };
        this.webClient = new web_1.TikTokWebClient({
          customHeaders: ((_a = this.options) == null ? void 0 : _a.webClientHeaders) || {},
          axiosOptions: (_b = this.options) == null ? void 0 : _b.webClientOptions,
          clientParams: ((_c = this.options) == null ? void 0 : _c.webClientParams) || {},
          authenticateWs: ((_d = this.options) == null ? void 0 : _d.authenticateWs) || false,
          signApiKey: ((_e = this.options) == null ? void 0 : _e.signApiKey) ?? void 0
        }, signer);
        this.webClient.cookieJar.setSession(this.options.sessionId, this.options.ttTargetIdc);
        this.setDisconnected();
      }
      /**
       * Set the connection state to disconnected
       * @protected
       */
      setDisconnected() {
        this._connectState = events_1.ConnectState.DISCONNECTED;
        this._roomInfo = null;
        this.clientParams.cursor = "";
        this.clientParams.room_id = "";
        this.clientParams.internal_ext = "";
      }
      /**
       * Get the current Room Info
       */
      get roomInfo() {
        return this._roomInfo;
      }
      /**
       * Get the available gifts
       */
      get availableGifts() {
        return this._availableGifts;
      }
      /**
       * Get the current connection state
       */
      get isConnecting() {
        return this._connectState === events_1.ConnectState.CONNECTING;
      }
      /**
       * Check if the connection is established
       */
      get isConnected() {
        return this._connectState === events_1.ConnectState.CONNECTED;
      }
      /**
       * Get the current client parameters
       */
      get clientParams() {
        return this.webClient.clientParams;
      }
      /**
       * Get the current room ID
       */
      get roomId() {
        return this.webClient.roomId;
      }
      /**
       * Get the current connection state including the cached room info and all available gifts
       * (if `enableExtendedGiftInfo` option enabled)
       */
      get state() {
        return {
          isConnected: this.isConnected,
          roomId: this.roomId,
          roomInfo: this.roomInfo,
          availableGifts: this.availableGifts
        };
      }
      /**
       * Connects to the live stream of the specified streamer
       * @param roomId Room ID to connect to. If not specified, the room ID will be retrieved from the TikTok API
       * @returns The current connection state
       */
      async connect(roomId) {
        switch (this._connectState) {
          case events_1.ConnectState.CONNECTED:
            throw new errors_1.AlreadyConnectedError("Already connected!");
          case events_1.ConnectState.CONNECTING:
            throw new errors_1.AlreadyConnectingError("Already connecting!");
          default:
          case events_1.ConnectState.DISCONNECTED:
            try {
              this._connectState = events_1.ConnectState.CONNECTING;
              await this._connect(roomId);
              this._connectState = events_1.ConnectState.CONNECTED;
              this.emit(events_1.ControlEvent.CONNECTED, this.state);
              return this.state;
            } catch (err) {
              this._connectState = events_1.ConnectState.DISCONNECTED;
              this.handleError(err, "Error while connecting");
              throw err;
            }
        }
      }
      /**
       * Connects to the live stream of the specified streamer
       *
       * @param roomId Room ID to connect to. If not specified, the room ID will be retrieved from the TikTok API
       * @protected
       */
      async _connect(roomId) {
        var _a, _b, _c;
        if (!this.options.connectWithUniqueId || this.options.fetchRoomInfoOnConnect || this.options.enableExtendedGiftInfo) {
          this.clientParams.room_id = roomId || this.clientParams.room_id || await this.fetchRoomId();
        }
        if ((_a = this.options) == null ? void 0 : _a.fetchRoomInfoOnConnect) {
          this._roomInfo = await this.fetchRoomInfo();
          if (this._roomInfo.data.status === 4) {
            throw new errors_1.UserOfflineError("The requested user isn't online :(");
          }
        }
        if ((_b = this.options) == null ? void 0 : _b.enableExtendedGiftInfo) {
          this._availableGifts = await this.fetchAvailableGifts();
        }
        const protoMessageFetchResult = await (this.options.signedWebSocketProvider || this.webClient.fetchSignedWebSocketFromEuler)({
          roomId: roomId || !this.options.connectWithUniqueId ? this.roomId : void 0,
          uniqueId: this.options.connectWithUniqueId ? this.uniqueId : void 0,
          sessionId: this.options.authenticateWs ? this.options.sessionId : void 0
        });
        if ((_c = this.options) == null ? void 0 : _c.processInitialData) {
          await this.processProtoMessageFetchResult(protoMessageFetchResult);
        }
        if (!protoMessageFetchResult.cursor) {
          throw new errors_1.InvalidResponseError("Missing cursor in initial fetch response.");
        }
        this.clientParams.cursor = protoMessageFetchResult.cursor;
        this.clientParams.internal_ext = protoMessageFetchResult.internalExt;
        const wsParams = {
          compress: "gzip",
          room_id: this.roomId,
          internal_ext: protoMessageFetchResult.internalExt,
          cursor: protoMessageFetchResult.cursor,
          ...protoMessageFetchResult.wsParams
        };
        this.wsClient = await this.setupWebsocket(protoMessageFetchResult.wsUrl, wsParams);
        this.wsClient.switchRooms(this.roomId);
        this.emit(events_1.ControlEvent.WEBSOCKET_CONNECTED, this.wsClient);
      }
      /**
       * Disconnects the connection to the live stream
       */
      async disconnect() {
        var _a;
        if (this.isConnected) {
          await ((_a = this.wsClient) == null ? void 0 : _a.close());
        }
      }
      /**
       * Fetch the room ID from the TikTok API
       * @param uniqueId Optional unique ID to use instead of the current one
       */
      async fetchRoomId(uniqueId) {
        var _a, _b;
        let errors = [];
        uniqueId || (uniqueId = this.uniqueId);
        try {
          const roomInfo = await this.webClient.fetchRoomInfoFromHtml({ uniqueId });
          const roomId = roomInfo.liveRoomUserInfo.liveRoom.roomId;
          if (!roomId)
            throw new Error("Failed to extract Room ID from HTML.");
          return roomId;
        } catch (ex) {
          this.handleError(ex, "Failed to retrieve Room ID from main page, falling back to API source...");
          errors.push(ex);
        }
        try {
          const roomData = await this.webClient.fetchRoomInfoFromApiLive({ uniqueId });
          const roomId = (_b = (_a = roomData == null ? void 0 : roomData.data) == null ? void 0 : _a.user) == null ? void 0 : _b.roomId;
          if (!roomId)
            throw new Error("Failed to extract Room ID from API.");
          return roomId;
        } catch (ex) {
          this.handleError(ex, "Failed to retrieve Room ID from API source, falling back to Euler source...");
          errors.push(ex);
        }
        if (!this.options.disableEulerFallbacks) {
          try {
            const response = await this.webClient.fetchRoomIdFromEuler({ uniqueId });
            if (!response.ok)
              throw new Error(`Failed to retrieve Room ID from Euler due to an error: ${response.message}`);
            if (!response.room_id)
              throw new Error("Failed to extract Room ID from Euler.");
            return response.room_id;
          } catch (err) {
            this.handleError(err, "Failed to retrieve Room ID from Euler source, no more sources available...");
            errors.push(err);
          }
        }
        const errMsg = "Failed to retrieve Room ID from all sources.";
        const failErr = new errors_1.FetchIsLiveError(errors, errMsg);
        this.handleError(failErr, errMsg);
        throw failErr;
      }
      async fetchIsLive() {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const errors = [];
        const isOnline = (status) => status !== 4;
        try {
          const roomInfo = await this.webClient.fetchRoomInfoFromHtml({ uniqueId: this.uniqueId });
          if (((_b = (_a = roomInfo == null ? void 0 : roomInfo.liveRoomUserInfo) == null ? void 0 : _a.liveRoom) == null ? void 0 : _b.status) === void 0)
            throw new Error("Failed to extract status from HTML.");
          return isOnline((_d = (_c = roomInfo == null ? void 0 : roomInfo.liveRoomUserInfo) == null ? void 0 : _c.liveRoom) == null ? void 0 : _d.status);
        } catch (ex) {
          this.handleError(ex, "Failed to retrieve room info for live status from main page, falling back to API source...");
          errors.push(ex);
        }
        try {
          const roomData = await this.webClient.fetchRoomInfoFromApiLive({ uniqueId: this.uniqueId });
          if (((_f = (_e = roomData == null ? void 0 : roomData.data) == null ? void 0 : _e.liveRoom) == null ? void 0 : _f.status) === void 0)
            throw new Error("Failed to extract status from API.");
          return isOnline((_h = (_g = roomData == null ? void 0 : roomData.data) == null ? void 0 : _g.liveRoom) == null ? void 0 : _h.status);
        } catch (err) {
          this.handleError(err, "Failed to retrieve room info for live status from API source, falling back to Euler source...");
          errors.push(err);
        }
        if (!this.options.disableEulerFallbacks) {
          try {
            const roomData = await this.webClient.fetchRoomIdFromEuler({ uniqueId: this.uniqueId });
            if (roomData.code !== 200)
              throw new Error("Failed to extract status from Euler.");
            return roomData.is_live;
          } catch (err) {
            this.handleError(err, "Failed to retrieve room info for live status from Euler source, no more sources available...");
            errors.push(err);
          }
        }
        const errMsg = "Failed to retrieve live status rom all sources.";
        const failErr = new errors_1.FetchIsLiveError(errors, errMsg);
        this.handleError(failErr, errMsg);
        throw failErr;
      }
      /**
       * Wait until the streamer is live
       * @param seconds Number of seconds to wait before checking if the streamer is live again
       */
      async waitUntilLive(seconds = 60) {
        seconds = Math.max(30, seconds);
        return new Promise(async (resolve) => {
          const fetchIsLive = async () => {
            const isLive = await this.fetchIsLive();
            if (isLive) {
              clearInterval(interval);
              resolve();
            }
          };
          const interval = setInterval(async () => fetchIsLive(), seconds * 1e3);
          await fetchIsLive();
        });
      }
      /**
       * Get the current room info (including streamer info, room status and statistics)
       * @returns Promise that will be resolved when the room info has been retrieved from the API
       */
      async fetchRoomInfo() {
        if (!this.webClient.roomId)
          await this.fetchRoomId();
        this._roomInfo = await this.webClient.fetchRoomInfo();
        return this._roomInfo;
      }
      /**
       * Get the available gifts in the current room
       * @returns Promise that will be resolved when the available gifts have been retrieved from the API
       */
      async fetchAvailableGifts() {
        try {
          let response = await this.webClient.getJsonObjectFromWebcastApi("gift/list/", this.clientParams);
          return response.data.gifts;
        } catch (err) {
          throw new errors_1.InvalidResponseError(`Failed to fetch available gifts. ${err.message}`, err);
        }
      }
      /**
       * Send a message to a TikTok LIVE Room
       *
       * @param content Message content to send to the stream
       * @param options Optional parameters for the message (incl. parameter overrides)
       */
      async sendMessage(content, options) {
        const roomId = (options == null ? void 0 : options.roomId) || this.roomId;
        if (!roomId) {
          throw new Error("Room ID is required to send a message.");
        }
        const sessionId = (options == null ? void 0 : options.sessionId) || this.webClient.cookieJar.sessionId;
        if (!sessionId) {
          throw new Error("Session ID is required to send a message.");
        }
        const ttTargetIdc = (options == null ? void 0 : options.ttTargetIdc) || this.webClient.cookieJar.ttTargetIdc;
        if (!ttTargetIdc) {
          throw new Error("ttTargetIdc is required to send a message.");
        }
        return this.webClient.sendRoomChatFromEuler({
          content,
          roomId,
          sessionId,
          ttTargetIdc
        });
      }
      /**
       * Set up the WebSocket connection
       *
       * @param wsUrl WebSocket URL
       * @param wsParams WebSocket parameters
       * @returns Promise that will be resolved when the WebSocket connection is established
       * @protected
       */
      async setupWebsocket(wsUrl, wsParams) {
        return new Promise((resolve, reject) => {
          var _a, _b;
          const wsClient = new ws_client_1.default(wsUrl, this.webClient.cookieJar, { ...config_1.default.DEFAULT_WS_CLIENT_PARAMS, ...this.options.wsClientParams, ...wsParams }, { ...config_1.default.DEFAULT_WS_CLIENT_HEADERS, ...(_a = this.options) == null ? void 0 : _a.wsClientHeaders }, (_b = this.options) == null ? void 0 : _b.wsClientOptions);
          wsClient.on("open", () => {
            clearTimeout(connectTimeout);
            wsClient.on("error", (e) => this.handleError(e, "WebSocket Error"));
            wsClient.on("close", () => {
              this.setDisconnected();
              this.emit(events_1.ControlEvent.DISCONNECTED);
            });
            resolve(wsClient);
          });
          wsClient.on("error", (err) => reject(`Websocket connection failed, ${err}`));
          wsClient.on("protoMessageFetchResult", this.processProtoMessageFetchResult.bind(this));
          wsClient.on("imEnteredRoom", (data) => this.emit(events_1.ControlEvent.ENTER_ROOM, data));
          wsClient.on("webSocketData", (data) => this.emit(events_1.ControlEvent.WEBSOCKET_DATA, data));
          wsClient.on("messageDecodingFailed", (err) => this.handleError(err, "Websocket message decoding failed"));
          const connectTimeout = setTimeout(() => reject("Websocket not responding"), 2e4);
        });
      }
      async processProtoMessageFetchResult(protoMessageFetchResult) {
        for (const message of protoMessageFetchResult.messages) {
          if (!message.decodedData) {
            continue;
          }
          this.emit(events_1.ControlEvent.DECODED_DATA, message.type, message.decodedData, message.payload);
          try {
            await this.processDecodedData(message.decodedData);
          } catch (ex) {
            this.handleError(ex, "Failed to process decoded data");
          }
        }
      }
      async processDecodedData({ data, type }) {
        var _a, _b;
        switch (type) {
          case "WebcastSocialMessage":
            if ((_a = data.common.displayText.displayType) == null ? void 0 : _a.includes("follow")) {
              return this.emit(events_1.WebcastEvent.FOLLOW, data);
            }
            if ((_b = data.common.displayText.displayType) == null ? void 0 : _b.includes("share")) {
              return this.emit(events_1.WebcastEvent.SHARE, data);
            }
            return this.emit(events_1.WebcastEvent.SOCIAL, data);
          case "WebcastControlMessage":
            this.emit(events_1.WebcastEvent.CONTROL_MESSAGE, data);
            if (data.action === types_1.ControlAction.CONTROL_ACTION_STREAM_ENDED || data.action === types_1.ControlAction.CONTROL_ACTION_STREAM_SUSPENDED) {
              this.emit(events_1.WebcastEvent.STREAM_END, { action: data.action });
              await this.disconnect();
            }
            return;
          case "WebcastGiftMessage":
            if (Array.isArray(this.availableGifts) && data.giftId) {
              data.extendedGiftInfo = this.availableGifts.find((x) => x.id === data.giftId);
            }
            return this.emit(events_1.WebcastEvent.GIFT, data);
          default:
            const basicEvent = events_1.WebcastEventMap[type];
            return basicEvent && this.emit(basicEvent, data);
        }
      }
      /**
       * Handle the error event
       *
       * @param exception Exception object
       * @param info Additional information about the error
       * @protected
       */
      handleError(exception, info) {
        if (this.listenerCount(events_1.ControlEvent.ERROR) < 1) {
          return;
        }
        this.emit(events_1.ControlEvent.ERROR, { info, exception });
      }
    };
    exports.TikTokLiveConnection = TikTokLiveConnection;
  }
});

// node_modules/tiktok-live-connector/dist/lib/ws/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/tiktok-live-connector/dist/lib/ws/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ws_client(), exports);
  }
});

// node_modules/tiktok-live-connector/dist/lib/ws/index.js
var require_ws = __commonJS({
  "node_modules/tiktok-live-connector/dist/lib/ws/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_lib2(), exports);
  }
});

// node_modules/tiktok-live-connector/dist/lib/_legacy/data-converter.js
var require_data_converter = __commonJS({
  "node_modules/tiktok-live-connector/dist/lib/_legacy/data-converter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPreferredPictureFormat = exports.mapBadges = exports.getTopViewerAttributes = exports.getEventAttributes = exports.simplifyObject = void 0;
    function simplifyObject(type, originalObject) {
      const simplify = (fn) => fn(originalObject);
      if (originalObject.user) {
        originalObject = simplify((webcastObject) => {
          Object.assign(webcastObject, getUserAttributes(webcastObject.user));
          delete webcastObject.user;
          return webcastObject;
        });
      }
      if (originalObject.common) {
        originalObject = simplify((webcastObject) => {
          Object.assign(webcastObject, webcastObject.common.displayText);
          delete webcastObject.common.displayText;
          Object.assign(webcastObject, webcastObject.common);
          delete webcastObject.common;
          return webcastObject;
        });
      }
      switch (type) {
        case "WebcastQuestionNewMessage": {
          originalObject = simplify((webcastObject) => {
            Object.assign(webcastObject, webcastObject.details);
            delete webcastObject.details;
            return webcastObject;
          });
          break;
        }
        case "WebcastRoomUserSeqMessage": {
          originalObject = simplify((webcastObject) => {
            webcastObject.topViewers = getTopViewerAttributes(webcastObject.ranksList);
            delete webcastObject.ranksList;
            return webcastObject;
          });
          break;
        }
        case "WebcastLinkMicBattle": {
          originalObject = simplify((webcastObject) => {
            const battleUsers = [];
            Object.values(webcastObject.anchorInfo).forEach((anchor) => {
              if (anchor.user) {
                battleUsers.push(getUserAttributes(anchor.user));
              }
            });
            webcastObject.battleUsers = battleUsers;
            return webcastObject;
          });
          break;
        }
        case "WebcastGiftMessage": {
          originalObject = simplify((webcastObject) => {
            var _a, _b;
            webcastObject.repeatEnd = !!webcastObject.repeatEnd;
            webcastObject.gift = {
              gift_id: webcastObject.giftId,
              repeat_count: webcastObject.repeatCount,
              repeat_end: webcastObject.repeatEnd ? 1 : 0,
              gift_type: (_a = webcastObject.giftDetails) == null ? void 0 : _a.giftType
            };
            if (webcastObject.giftDetails) {
              Object.assign(webcastObject, webcastObject.giftDetails);
              delete webcastObject.giftDetails;
            }
            if (webcastObject.giftDetails.giftImage) {
              Object.assign(webcastObject, webcastObject.giftDetails.giftImage);
              delete webcastObject.giftDetails.giftImage;
            }
            if (webcastObject.giftExtra) {
              if (webcastObject.giftExtra.toUserId) {
                webcastObject.receiverUserId = webcastObject.giftExtra.toUserId;
                delete webcastObject.giftExtra.toUserId;
              }
              if (webcastObject.giftExtra.sendGiftSendMessageSuccessMs) {
                webcastObject.timestamp = parseInt(webcastObject.giftExtra.sendGiftSendMessageSuccessMs);
                delete webcastObject.giftExtra.sendGiftSendMessageSuccessMs;
              }
              Object.assign(webcastObject, webcastObject.giftExtra);
              delete webcastObject.giftExtra;
            }
            if (((_b = webcastObject.monitorExtra) == null ? void 0 : _b.indexOf("{")) === 0) {
              try {
                webcastObject.monitorExtra = JSON.parse(webcastObject.monitorExtra);
              } catch (err) {
              }
            }
            return webcastObject;
          });
          break;
        }
        case "WebcastChatMessage": {
          originalObject = simplify((webcastObject) => {
            webcastObject.emotes = webcastObject.emotes.map((emote) => ({
              emoteId: emote.emote.emoteId,
              emoteImageUrl: emote.emote.image.imageUrl,
              placeInComment: emote.placeInComment
            }));
            return webcastObject;
          });
          break;
        }
        case "WebcastEmoteChatMessage": {
          originalObject = simplify((webcastObject) => {
            webcastObject.emotes = webcastObject.emoteList.map((emote) => ({
              emoteId: emote.emoteId,
              emoteImageUrl: emote.image.url[0]
            }));
            return webcastObject;
          });
          break;
        }
      }
      return originalObject;
    }
    exports.simplifyObject = simplifyObject;
    function getUserAttributes(webcastUser) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k;
      webcastUser || (webcastUser = {});
      const userAttributes = {
        userId: (_a = webcastUser.userId) == null ? void 0 : _a.toString(),
        secUid: (_b = webcastUser.secUid) == null ? void 0 : _b.toString(),
        uniqueId: webcastUser.uniqueId !== "" ? webcastUser.uniqueId : void 0,
        nickname: webcastUser.nickname !== "" ? webcastUser.nickname : void 0,
        profilePictureUrl: getPreferredPictureFormat((_c = webcastUser.profilePicture) == null ? void 0 : _c.url),
        followRole: (_d = webcastUser.followInfo) == null ? void 0 : _d.followStatus,
        userBadges: mapBadges(webcastUser.badges),
        userSceneTypes: (_e = webcastUser.badges) == null ? void 0 : _e.map((x) => (x == null ? void 0 : x.badgeScene) || 0),
        userDetails: {
          createTime: (_f = webcastUser.createTime) == null ? void 0 : _f.toString(),
          bioDescription: webcastUser.bioDescription,
          profilePictureUrls: (_g = webcastUser.profilePicture) == null ? void 0 : _g.url
        }
      };
      if (webcastUser.followInfo) {
        userAttributes.followInfo = {
          followingCount: webcastUser.followInfo.followingCount,
          followerCount: webcastUser.followInfo.followerCount,
          followStatus: webcastUser.followInfo.followStatus,
          pushStatus: webcastUser.followInfo.pushStatus
        };
      }
      userAttributes.isModerator = userAttributes.userBadges.some((x) => x.type && x.type.toLowerCase().includes("moderator") || x.badgeSceneType === 1);
      userAttributes.isNewGifter = userAttributes.userBadges.some((x) => x.type && x.type.toLowerCase().includes("live_ng_"));
      userAttributes.isSubscriber = userAttributes.userBadges.some((x) => x.url && x.url.toLowerCase().includes("/sub_") || x.badgeSceneType === 4 || x.badgeSceneType === 7);
      userAttributes.topGifterRank = ((_i = (_h = userAttributes.userBadges.find((x) => x.url && x.url.includes("/ranklist_top_gifter_"))) == null ? void 0 : _h.url.match(new RegExp("(?<=ranklist_top_gifter_)(\\d+)(?=.png)", "g"))) == null ? void 0 : _i.map(Number)[0]) ?? null;
      userAttributes.gifterLevel = ((_j = userAttributes.userBadges.find((x) => x.badgeSceneType === 8)) == null ? void 0 : _j.level) || 0;
      userAttributes.teamMemberLevel = ((_k = userAttributes.userBadges.find((x) => x.badgeSceneType === 10)) == null ? void 0 : _k.level) || 0;
      return userAttributes;
    }
    function getEventAttributes(event) {
      if (event.msgId)
        event.msgId = event.msgId.toString();
      if (event.createTime)
        event.createTime = event.createTime.toString();
      return event;
    }
    exports.getEventAttributes = getEventAttributes;
    function getTopViewerAttributes(topViewers) {
      return topViewers.map((viewer) => {
        return {
          user: viewer.user ? getUserAttributes(viewer.user) : null,
          coinCount: viewer.coinCount ? parseInt(viewer.coinCount) : 0
        };
      });
    }
    exports.getTopViewerAttributes = getTopViewerAttributes;
    function mapBadges(badges) {
      let simplifiedBadges = [];
      if (Array.isArray(badges)) {
        badges.forEach((innerBadges) => {
          var _a, _b;
          let badgeSceneType = innerBadges.badgeSceneType;
          if (Array.isArray(innerBadges.badges)) {
            innerBadges.badges.forEach((badge) => {
              simplifiedBadges.push(Object.assign({ badgeSceneType }, badge));
            });
          }
          if (Array.isArray(innerBadges.imageBadges)) {
            innerBadges.imageBadges.forEach((badge) => {
              if (badge && badge.image && badge.image.url) {
                simplifiedBadges.push({
                  type: "image",
                  badgeSceneType,
                  displayType: badge.displayType,
                  url: badge.image.url
                });
              }
            });
          }
          if (((_a = innerBadges.privilegeLogExtra) == null ? void 0 : _a.level) && ((_b = innerBadges.privilegeLogExtra) == null ? void 0 : _b.level) !== "0") {
            simplifiedBadges.push({
              type: "privilege",
              privilegeId: innerBadges.privilegeLogExtra.privilegeId,
              level: parseInt(innerBadges.privilegeLogExtra.level),
              badgeSceneType: innerBadges.badgeSceneType
            });
          }
        });
      }
      return simplifiedBadges;
    }
    exports.mapBadges = mapBadges;
    function getPreferredPictureFormat(pictureUrls) {
      if (!pictureUrls || !Array.isArray(pictureUrls) || !pictureUrls.length) {
        return null;
      }
      return pictureUrls.find((x) => x.includes("100x100") && x.includes(".webp")) || pictureUrls.find((x) => x.includes("100x100") && x.includes(".jpeg")) || pictureUrls.find((x) => !x.includes("shrink")) || pictureUrls[0];
    }
    exports.getPreferredPictureFormat = getPreferredPictureFormat;
  }
});

// node_modules/tiktok-live-connector/dist/lib/_legacy/legacy-client.js
var require_legacy_client = __commonJS({
  "node_modules/tiktok-live-connector/dist/lib/_legacy/legacy-client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebcastPushConnection = void 0;
    var data_converter_1 = require_data_converter();
    var lib_1 = require_lib3();
    var events_1 = require_events();
    var WebcastPushConnection = class extends lib_1.TikTokLiveConnection {
      async processProtoMessageFetchResult(fetchResult) {
        fetchResult.messages.forEach((message) => {
          this.emit(events_1.ControlEvent.RAW_DATA, message.type, message.payload);
        });
        fetchResult.messages.forEach((message) => {
          var _a, _b, _c;
          let simplifiedObj = (0, data_converter_1.simplifyObject)(message.type, ((_a = message.decodedData) == null ? void 0 : _a.data) || {});
          this.emit(events_1.ControlEvent.DECODED_DATA, message.type, simplifiedObj, message.payload);
          switch (message.type) {
            case "WebcastControlMessage":
              const action = message.decodedData.data.action;
              if ([3, 4].includes(action)) {
                this.emit(events_1.WebcastEvent.STREAM_END, { action });
                this.disconnect();
              }
              break;
            case "WebcastRoomUserSeqMessage":
              this.emit(events_1.WebcastEvent.ROOM_USER, simplifiedObj);
              break;
            case "WebcastChatMessage":
              this.emit(events_1.WebcastEvent.CHAT, simplifiedObj);
              break;
            case "WebcastMemberMessage":
              this.emit(events_1.WebcastEvent.MEMBER, simplifiedObj);
              break;
            case "WebcastGiftMessage":
              if (Array.isArray(this.availableGifts) && simplifiedObj.giftId) {
                simplifiedObj.extendedGiftInfo = this.availableGifts.find((x) => x.id === simplifiedObj.giftId);
              }
              this.emit(events_1.WebcastEvent.GIFT, simplifiedObj);
              break;
            case "WebcastSocialMessage":
              this.emit(events_1.WebcastEvent.SOCIAL, simplifiedObj);
              if ((_b = simplifiedObj.displayType) == null ? void 0 : _b.includes("follow")) {
                this.emit(events_1.WebcastEvent.FOLLOW, simplifiedObj);
              }
              if ((_c = simplifiedObj.displayType) == null ? void 0 : _c.includes("share")) {
                this.emit(events_1.WebcastEvent.SHARE, simplifiedObj);
              }
              break;
            case "WebcastLikeMessage":
              this.emit(events_1.WebcastEvent.LIKE, simplifiedObj);
              break;
            case "WebcastQuestionNewMessage":
              this.emit(events_1.WebcastEvent.QUESTION_NEW, simplifiedObj);
              break;
            case "WebcastLinkMicBattle":
              this.emit(events_1.WebcastEvent.LINK_MIC_BATTLE, simplifiedObj);
              break;
            case "WebcastLinkMicArmies":
              this.emit(events_1.WebcastEvent.LINK_MIC_ARMIES, simplifiedObj);
              break;
            case "WebcastLiveIntroMessage":
              this.emit(events_1.WebcastEvent.LIVE_INTRO, simplifiedObj);
              break;
            case "WebcastEmoteChatMessage":
              this.emit(events_1.WebcastEvent.EMOTE, simplifiedObj);
              break;
            case "WebcastEnvelopeMessage":
              this.emit(events_1.WebcastEvent.ENVELOPE, simplifiedObj);
              break;
            case "WebcastSubNotifyMessage":
              this.emit(events_1.WebcastEvent.SUBSCRIBE, simplifiedObj);
              break;
          }
        });
      }
    };
    exports.WebcastPushConnection = WebcastPushConnection;
  }
});

// node_modules/tiktok-live-connector/dist/lib/_legacy/index.js
var require_legacy = __commonJS({
  "node_modules/tiktok-live-connector/dist/lib/_legacy/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_data_converter(), exports);
    __exportStar(require_legacy_client(), exports);
  }
});

// node_modules/tiktok-live-connector/dist/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/tiktok-live-connector/dist/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_client2(), exports);
    __exportStar(require_utilities(), exports);
    __exportStar(require_web(), exports);
    __exportStar(require_ws(), exports);
    __exportStar(require_legacy(), exports);
    __exportStar(require_config(), exports);
  }
});

// node_modules/tiktok-live-connector/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/tiktok-live-connector/dist/index.js"(exports) {
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_lib3(), exports);
    __exportStar(require_types(), exports);
    __exportStar(require_version(), exports);
  }
});
export default require_dist2();
/*! Bundled license information:

axios/dist/browser/axios.cjs:
  (*! Axios v1.11.0 Copyright (c) 2025 Matt Zabriskie and contributors *)
*/
//# sourceMappingURL=tiktok-live-connector.js.map
