#!/bin/bash

echo "🔧 Setting up TikTokLiveApp..."

# Create project structure
mkdir TikTokLiveApp && cd TikTokLiveApp
mkdir renderer scripts assets logs

# Initialize NPM and clean up default package.json
npm init -y
rm -f package.json

# 📦 Write corrected package.json
cat <<EOL > package.json
{
  "name": "TikTokLiveApp",
  "version": "1.0.0",
  "main": "main.js",
  "scripts": {
    "start": "electron .",
    "build": "webpack"
  },
  "dependencies": {
    "electron": "latest",
    "vue": "^2.7.14",
    "tiktok-live-connector": "latest"
  },
  "devDependencies": {
    "webpack": "^5.88.2",
    "webpack-cli": "^5.1.4",
    "webpack-dev-server": "^4.15.1",
    "vue-loader": "^15.9.8",
    "vue-style-loader": "^4.1.3",
    "vue-template-compiler": "^2.7.14",
    "css-loader": "^6.7.3",
    "babel-loader": "^9.1.3",
    "@babel/core": "^7.23.0",
    "@babel/preset-env": "^7.23.0"
  }
}
EOL

# 🔧 Babel config
echo '{ "presets": ["@babel/preset-env"] }' > .babelrc

# 🔧 Webpack config
cat <<EOL > webpack.config.js
const path = require('path');
const { VueLoaderPlugin } = require('vue-loader');

module.exports = {
  entry: './renderer/main.js',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'bundle.js'
  },
  resolve: {
    alias: {
      vue$: 'vue/dist/vue.esm.js'
    },
    extensions: ['.js', '.vue']
  },
  module: {
    rules: [
      { test: /\.vue$/, loader: 'vue-loader' },
      { test: /\.js$/, exclude: /node_modules/, loader: 'babel-loader' },
      { test: /\.css$/, use: ['vue-style-loader', 'css-loader'] }
    ]
  },
  plugins: [new VueLoaderPlugin()]
}
EOL

# 🔧 Electron main process
cat <<EOL > main.js
const { app, BrowserWindow } = require('electron');
const path = require('path');

function createWindow() {
  const win = new BrowserWindow({
    width: 1000,
    height: 800,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false
    }
  });
  win.loadFile('renderer/index.html');
  win.webContents.openDevTools();
}

app.whenReady().then(createWindow);
EOL

# 🔧 Preload placeholder
echo "// Preload placeholder" > preload.js

# 🧱 HTML entry
cat <<EOL > renderer/index.html
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>TikTok Monitor</title>
</head>
<body>
  <div id="app"></div>
  <script src="../dist/bundle.js"></script>
</body>
</html>
EOL

# 🧩 Vue entry
cat <<EOL > renderer/main.js
import Vue from 'vue';
import App from './App.vue';

new Vue({
  render: h => h(App)
}).\$mount('#app');
EOL

# 🧩 App.vue
cat <<EOL > renderer/App.vue
<template>
  <div>
    <h1 style="color: green">TikTok Live Monitor</h1>
    <input v-model="username" placeholder="Enter TikTok username" @keyup.enter="startSession"/>
    <button @click="startSession">Start Monitoring</button>
    <ChatPanel :messages="messages"/>
  </div>
</template>

<script>
import ChatPanel from './ChatPanel.vue';
const { spawn } = require('child_process');

export default {
  components: { ChatPanel },
  data() {
    return {
      username: '',
      messages: []
    };
  },
  methods: {
    startSession() {
      if (!this.username) return alert("Please enter a TikTok username");
      const listener = spawn('node', ['../scripts/tikTokConnector.js', this.username]);

      listener.stdout.on('data', data => {
        const line = data.toString().trim();
        this.messages.push(this.parseLine(line));
      });

      listener.stderr.on('data', err => console.error("Listener Error:", err.toString()));
    },
    parseLine(line) {
      const match = line.match(/

\[(.*?)\]

 

\[(.*?)\]

 \((.*?)\) (.*?) :: (.*)/);
      if (!match) return { username: 'Unknown', text: line };
      return { username: match[4], text: match[5] };
    }
  }
}
</script>
EOL

# 🧩 ChatPanel.vue
cat <<EOL > renderer/ChatPanel.vue
<template>
  <div>
    <div v-for="(msg, index) in messages" :key="index">
      <strong>{{ msg.username }}</strong>: {{ msg.text }}
    </div>
  </div>
</template>

<script>
export default {
  props: ['messages']
}
</script>
EOL

# 🔌 TikTok connector script
cat <<'EOL' > scripts/tikTokConnector.js
const { TikTokLiveConnection } = require('tiktok-live-connector');
const fs = require('fs');
const path = require('path');

const tiktokUsername = process.argv[2] || "defaultuser";

const startTime = new Date();
const formattedDate = startTime.toISOString().split('T')[0].replace(/-/g, '_');
const formattedTime = startTime.toTimeString().split(' ')[0].replace(/:/g, '-');
const filename = \`\${tiktokUsername}_\${formattedDate}_\${formattedTime}_LiveLog.txt\`;
const filepath = path.join(__dirname, '..', 'logs', filename);

function getLocalTimestamp() {
  const now = new Date();
  const yyyy_mm_dd = now.getFullYear() + '_' +
    String(now.getMonth() + 1).padStart(2, '0') + '_' +
    String(now.getDate()).padStart(2, '0');
  const hh_mm_ss = String(now.getHours()).padStart(2, '0') + ':' +
    String(now.getMinutes()).padStart(2, '0') + ':' +
    String(now.getSeconds()).padStart(2, '0');
  return \`[\${yyyy_mm_dd}] [\${hh_mm_ss}]\`;
}

function getNames(data) {
  const screenName = data.nickname || data.user?.nickname || data.userValue?.user?.nickname || "Unknown";
  const username = data.uniqueId || data.user?.uniqueId || data.userValue?.user?.uniqueId || "Unknown";
  return { screenName, username };
}

function extractGiftFromDescribe(describeText) {
  const match = describeText.match(/gifted the host .*? (.*)$/);
  return match ? match[1] : "Unknown Gift";
}

const connection = new TikTokLiveConnection(tiktokUsername);

connection.on('chat', data => {
  const timestamp = getLocalTimestamp();
  const { screenName, username } = getNames(data);
  const line = \`\${timestamp} [COMMENT] (\${username}) \${screenName} :: \${data.comment}\\n\`;
  fs.appendFile(filepath, line, err => err && console.error("Write failed:", err));
  process.stdout.write(line);
});

connection.on('gift', data => {
  const timestamp = getLocalTimestamp();
  const { screenName, username } = getNames(data);
  const describe = data.common?.describe || "gifted something";
  const giftName = extractGiftFromDescribe(describe);
  const line = \`\${timestamp} [GIFT] (\${username}) \${screenName} :: sent "\${giftName}" x\${data.repeatCount}\\n\`;
  fs.appendFile(filepath, line, err => err && console.error("Write failed:", err));
  process.stdout.write(line);
});

connection.on('subscribed', data => {
  const timestamp = getLocalTimestamp();
  const { screenName, username } = getNames(data);
  const line = \`\${timestamp} [SUBSCRIPTION] (\${username}) \${screenName} :: Subscribed\\n\`;
  fs.appendFile(filepath, line, err => err && console.error("Write failed:", err));
  process.stdout.write(line);
});
EOL

# ✅ Dependency cleanup and build step
echo "📦 Cleaning environment before build..."
rm -rf node_modules package-lock.json
npm cache verify

echo "📦 Installing webpack and webpack-cli..."
npm install --save-dev webpack webpack-cli

if [ $? -ne 0 ]; then
  echo "❌ Installation failed. Please check your npm or network setup."
  exit 1
fi

echo "🏗️ Running webpack to bundle Vue app..."
npx webpack

if [ $? -eq 0 ]; then
  echo "✅ TikTokLive